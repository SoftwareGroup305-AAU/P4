//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from ./P4.TinyCell.Shared/TinyCell.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class TinyCellParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		Bool=1, Whitespace=2, VOLHIGH=3, VOLLOW=4, PININ=5, PINOUT=6, PIN=7, INT=8, 
		FLOAT=9, STRING=10, BOOL=11, VOID=12, CHAR=13, UPDATE=14, SETUP=15, SET=16, 
		TO=17, READ=18, WRITE=19, IF=20, ELSE=21, WHILE=22, FOR=23, CONTINUE=24, 
		BREAK=25, RETURN=26, QUESTION=27, LPAR=28, RPAR=29, LCURLY=30, RCURLY=31, 
		LBRACKET=32, RBRACKET=33, SEMI=34, DOT=35, COMMA=36, COLON=37, TRUE=38, 
		FALSE=39, NEWLINE=40, ASSIGN=41, PLUSASSIGN=42, MULTASSIGN=43, DIVASSIGN=44, 
		MODASSIGN=45, MINUSASSIGN=46, QUOTE=47, MULT=48, DIV=49, PLUS=50, MINUS=51, 
		MOD=52, AND=53, OR=54, EQ=55, NEQ=56, GT=57, LT=58, GTE=59, LTE=60, NOT=61, 
		BITSHIFTL=62, BITSHIFTR=63, UNARYPLUS=64, UNARYMINUS=65, Identifier=66, 
		String=67, Numeral=68, BlockComment=69, LineComment=70, Newline=71;
	public const int
		RULE_document = 0, RULE_generalDeclaration = 1, RULE_setupDefinition = 2, 
		RULE_updateDefinition = 3, RULE_functionDefinition = 4, RULE_type = 5, 
		RULE_parameterList = 6, RULE_parameter = 7, RULE_argumentList = 8, RULE_argument = 9, 
		RULE_declaration = 10, RULE_initialDeclaration = 11, RULE_compoundStatement = 12, 
		RULE_statement = 13, RULE_ifStatement = 14, RULE_loopStatement = 15, RULE_jumpStatement = 16, 
		RULE_assignment = 17, RULE_functionCall = 18, RULE_primitiveExpression = 19, 
		RULE_unaryExpression = 20, RULE_multiplicativeExpression = 21, RULE_additiveExpression = 22, 
		RULE_bitshiftExpression = 23, RULE_comparisonExpression = 24, RULE_equalityExpression = 25, 
		RULE_andExpression = 26, RULE_orExpression = 27, RULE_ternaryExpression = 28, 
		RULE_pinAssignmentExpression = 29, RULE_pinStatusExpression = 30, RULE_expression = 31, 
		RULE_identifier = 32, RULE_assignmentOperator = 33, RULE_pinVoltage = 34, 
		RULE_pinStatus = 35;
	public static readonly string[] ruleNames = {
		"document", "generalDeclaration", "setupDefinition", "updateDefinition", 
		"functionDefinition", "type", "parameterList", "parameter", "argumentList", 
		"argument", "declaration", "initialDeclaration", "compoundStatement", 
		"statement", "ifStatement", "loopStatement", "jumpStatement", "assignment", 
		"functionCall", "primitiveExpression", "unaryExpression", "multiplicativeExpression", 
		"additiveExpression", "bitshiftExpression", "comparisonExpression", "equalityExpression", 
		"andExpression", "orExpression", "ternaryExpression", "pinAssignmentExpression", 
		"pinStatusExpression", "expression", "identifier", "assignmentOperator", 
		"pinVoltage", "pinStatus"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, "'HIGH'", "'LOW'", "'INPUT'", "'OUTPUT'", "'pin'", "'int'", 
		"'float'", "'string'", "'bool'", "'void'", "'char'", "'update'", "'setup'", 
		"'set'", "'to'", "'read'", "'write'", "'if'", "'else'", "'while'", "'for'", 
		"'continue'", "'break'", "'return'", "'?'", "'('", "')'", "'{'", "'}'", 
		"'['", "']'", "';'", "'.'", "','", "':'", "'true'", "'false'", "'\\n'", 
		"'='", "'+='", "'*='", "'/='", "'%='", "'-='", "'\"'", "'*'", "'/'", "'+'", 
		"'-'", "'%'", "'&&'", "'||'", "'=='", "'!='", "'>'", "'<'", "'>='", "'<='", 
		"'!'", "'<<'", "'>>'", "'++'", "'--'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "Bool", "Whitespace", "VOLHIGH", "VOLLOW", "PININ", "PINOUT", "PIN", 
		"INT", "FLOAT", "STRING", "BOOL", "VOID", "CHAR", "UPDATE", "SETUP", "SET", 
		"TO", "READ", "WRITE", "IF", "ELSE", "WHILE", "FOR", "CONTINUE", "BREAK", 
		"RETURN", "QUESTION", "LPAR", "RPAR", "LCURLY", "RCURLY", "LBRACKET", 
		"RBRACKET", "SEMI", "DOT", "COMMA", "COLON", "TRUE", "FALSE", "NEWLINE", 
		"ASSIGN", "PLUSASSIGN", "MULTASSIGN", "DIVASSIGN", "MODASSIGN", "MINUSASSIGN", 
		"QUOTE", "MULT", "DIV", "PLUS", "MINUS", "MOD", "AND", "OR", "EQ", "NEQ", 
		"GT", "LT", "GTE", "LTE", "NOT", "BITSHIFTL", "BITSHIFTR", "UNARYPLUS", 
		"UNARYMINUS", "Identifier", "String", "Numeral", "BlockComment", "LineComment", 
		"Newline"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "TinyCell.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static TinyCellParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public TinyCellParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public TinyCellParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class DocumentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SetupDefinitionContext setupDefinition() {
			return GetRuleContext<SetupDefinitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UpdateDefinitionContext updateDefinition() {
			return GetRuleContext<UpdateDefinitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GeneralDeclarationContext[] generalDeclaration() {
			return GetRuleContexts<GeneralDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public GeneralDeclarationContext generalDeclaration(int i) {
			return GetRuleContext<GeneralDeclarationContext>(i);
		}
		public DocumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_document; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITinyCellVisitor<TResult> typedVisitor = visitor as ITinyCellVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDocument(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DocumentContext document() {
		DocumentContext _localctx = new DocumentContext(Context, State);
		EnterRule(_localctx, 0, RULE_document);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 75;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 8064L) != 0)) {
				{
				{
				State = 72;
				generalDeclaration();
				}
				}
				State = 77;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 78;
			setupDefinition();
			State = 79;
			updateDefinition();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GeneralDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunctionDefinitionContext functionDefinition() {
			return GetRuleContext<FunctionDefinitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationContext declaration() {
			return GetRuleContext<DeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(TinyCellParser.SEMI, 0); }
		public GeneralDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_generalDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITinyCellVisitor<TResult> typedVisitor = visitor as ITinyCellVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGeneralDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GeneralDeclarationContext generalDeclaration() {
		GeneralDeclarationContext _localctx = new GeneralDeclarationContext(Context, State);
		EnterRule(_localctx, 2, RULE_generalDeclaration);
		try {
			State = 85;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 81;
				functionDefinition();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 82;
				declaration();
				State = 83;
				Match(SEMI);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SetupDefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SETUP() { return GetToken(TinyCellParser.SETUP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CompoundStatementContext compoundStatement() {
			return GetRuleContext<CompoundStatementContext>(0);
		}
		public SetupDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_setupDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITinyCellVisitor<TResult> typedVisitor = visitor as ITinyCellVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSetupDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SetupDefinitionContext setupDefinition() {
		SetupDefinitionContext _localctx = new SetupDefinitionContext(Context, State);
		EnterRule(_localctx, 4, RULE_setupDefinition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 87;
			Match(SETUP);
			State = 88;
			compoundStatement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UpdateDefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UPDATE() { return GetToken(TinyCellParser.UPDATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CompoundStatementContext compoundStatement() {
			return GetRuleContext<CompoundStatementContext>(0);
		}
		public UpdateDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_updateDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITinyCellVisitor<TResult> typedVisitor = visitor as ITinyCellVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUpdateDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UpdateDefinitionContext updateDefinition() {
		UpdateDefinitionContext _localctx = new UpdateDefinitionContext(Context, State);
		EnterRule(_localctx, 6, RULE_updateDefinition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 90;
			Match(UPDATE);
			State = 91;
			compoundStatement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionDefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAR() { return GetToken(TinyCellParser.LPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAR() { return GetToken(TinyCellParser.RPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CompoundStatementContext compoundStatement() {
			return GetRuleContext<CompoundStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParameterListContext[] parameterList() {
			return GetRuleContexts<ParameterListContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParameterListContext parameterList(int i) {
			return GetRuleContext<ParameterListContext>(i);
		}
		public FunctionDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITinyCellVisitor<TResult> typedVisitor = visitor as ITinyCellVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionDefinitionContext functionDefinition() {
		FunctionDefinitionContext _localctx = new FunctionDefinitionContext(Context, State);
		EnterRule(_localctx, 8, RULE_functionDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 93;
			type();
			State = 94;
			identifier();
			State = 95;
			Match(LPAR);
			State = 99;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 8064L) != 0)) {
				{
				{
				State = 96;
				parameterList(0);
				}
				}
				State = 101;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 102;
			Match(RPAR);
			State = 103;
			compoundStatement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VOID() { return GetToken(TinyCellParser.VOID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(TinyCellParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(TinyCellParser.INT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT() { return GetToken(TinyCellParser.FLOAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOL() { return GetToken(TinyCellParser.BOOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PIN() { return GetToken(TinyCellParser.PIN, 0); }
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITinyCellVisitor<TResult> typedVisitor = visitor as ITinyCellVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(Context, State);
		EnterRule(_localctx, 10, RULE_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 105;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 8064L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ParameterContext parameter() {
			return GetRuleContext<ParameterContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParameterListContext parameterList() {
			return GetRuleContext<ParameterListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(TinyCellParser.COMMA, 0); }
		public ParameterListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameterList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITinyCellVisitor<TResult> typedVisitor = visitor as ITinyCellVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameterList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParameterListContext parameterList() {
		return parameterList(0);
	}

	private ParameterListContext parameterList(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ParameterListContext _localctx = new ParameterListContext(Context, _parentState);
		ParameterListContext _prevctx = _localctx;
		int _startState = 12;
		EnterRecursionRule(_localctx, 12, RULE_parameterList, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 108;
			parameter();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 115;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,3,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new ParameterListContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_parameterList);
					State = 110;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 111;
					Match(COMMA);
					State = 112;
					parameter();
					}
					} 
				}
				State = 117;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,3,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ParameterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITinyCellVisitor<TResult> typedVisitor = visitor as ITinyCellVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParameterContext parameter() {
		ParameterContext _localctx = new ParameterContext(Context, State);
		EnterRule(_localctx, 14, RULE_parameter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 118;
			type();
			State = 119;
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentContext argument() {
			return GetRuleContext<ArgumentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(TinyCellParser.COMMA, 0); }
		public ArgumentListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argumentList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITinyCellVisitor<TResult> typedVisitor = visitor as ITinyCellVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgumentList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentListContext argumentList() {
		return argumentList(0);
	}

	private ArgumentListContext argumentList(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ArgumentListContext _localctx = new ArgumentListContext(Context, _parentState);
		ArgumentListContext _prevctx = _localctx;
		int _startState = 16;
		EnterRecursionRule(_localctx, 16, RULE_argumentList, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 122;
			argument();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 129;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,4,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new ArgumentListContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_argumentList);
					State = 124;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 125;
					Match(COMMA);
					State = 126;
					argument();
					}
					} 
				}
				State = 131;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,4,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ArgumentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Numeral() { return GetToken(TinyCellParser.Numeral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode String() { return GetToken(TinyCellParser.String, 0); }
		public ArgumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argument; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITinyCellVisitor<TResult> typedVisitor = visitor as ITinyCellVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgument(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentContext argument() {
		ArgumentContext _localctx = new ArgumentContext(Context, State);
		EnterRule(_localctx, 18, RULE_argument);
		try {
			State = 136;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,5,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 132;
				identifier();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 133;
				functionCall();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 134;
				Match(Numeral);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 135;
				Match(String);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InitialDeclarationContext initialDeclaration() {
			return GetRuleContext<InitialDeclarationContext>(0);
		}
		public DeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITinyCellVisitor<TResult> typedVisitor = visitor as ITinyCellVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationContext declaration() {
		DeclarationContext _localctx = new DeclarationContext(Context, State);
		EnterRule(_localctx, 20, RULE_declaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 138;
			type();
			State = 139;
			initialDeclaration();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InitialDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(TinyCellParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		public InitialDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_initialDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITinyCellVisitor<TResult> typedVisitor = visitor as ITinyCellVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInitialDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InitialDeclarationContext initialDeclaration() {
		InitialDeclarationContext _localctx = new InitialDeclarationContext(Context, State);
		EnterRule(_localctx, 22, RULE_initialDeclaration);
		try {
			State = 148;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 141;
				identifier();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 142;
				identifier();
				State = 143;
				Match(ASSIGN);
				State = 146;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,6,Context) ) {
				case 1:
					{
					State = 144;
					expression();
					}
					break;
				case 2:
					{
					State = 145;
					functionCall();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CompoundStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LCURLY() { return GetToken(TinyCellParser.LCURLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RCURLY() { return GetToken(TinyCellParser.RCURLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public CompoundStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compoundStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITinyCellVisitor<TResult> typedVisitor = visitor as ITinyCellVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompoundStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompoundStatementContext compoundStatement() {
		CompoundStatementContext _localctx = new CompoundStatementContext(Context, State);
		EnterRule(_localctx, 24, RULE_compoundStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 150;
			Match(LCURLY);
			State = 154;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 2305843009614061442L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 31L) != 0)) {
				{
				{
				State = 151;
				statement();
				}
				}
				State = 156;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 157;
			Match(RCURLY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IfStatementContext ifStatement() {
			return GetRuleContext<IfStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LoopStatementContext loopStatement() {
			return GetRuleContext<LoopStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public JumpStatementContext jumpStatement() {
			return GetRuleContext<JumpStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationContext declaration() {
			return GetRuleContext<DeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(TinyCellParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentContext assignment() {
			return GetRuleContext<AssignmentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITinyCellVisitor<TResult> typedVisitor = visitor as ITinyCellVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 26, RULE_statement);
		try {
			State = 174;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,9,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 159;
				ifStatement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 160;
				loopStatement();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 161;
				jumpStatement();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 162;
				declaration();
				State = 163;
				Match(SEMI);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 165;
				functionCall();
				State = 166;
				Match(SEMI);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 168;
				assignment();
				State = 169;
				Match(SEMI);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 171;
				expression();
				State = 172;
				Match(SEMI);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(TinyCellParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAR() { return GetToken(TinyCellParser.LPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAR() { return GetToken(TinyCellParser.RPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CompoundStatementContext[] compoundStatement() {
			return GetRuleContexts<CompoundStatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CompoundStatementContext compoundStatement(int i) {
			return GetRuleContext<CompoundStatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(TinyCellParser.ELSE, 0); }
		public IfStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITinyCellVisitor<TResult> typedVisitor = visitor as ITinyCellVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfStatementContext ifStatement() {
		IfStatementContext _localctx = new IfStatementContext(Context, State);
		EnterRule(_localctx, 28, RULE_ifStatement);
		try {
			State = 190;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,10,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 176;
				Match(IF);
				State = 177;
				Match(LPAR);
				State = 178;
				expression();
				State = 179;
				Match(RPAR);
				State = 180;
				compoundStatement();
				State = 181;
				Match(ELSE);
				State = 182;
				compoundStatement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 184;
				Match(IF);
				State = 185;
				Match(LPAR);
				State = 186;
				expression();
				State = 187;
				Match(RPAR);
				State = 188;
				compoundStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LoopStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHILE() { return GetToken(TinyCellParser.WHILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAR() { return GetToken(TinyCellParser.LPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAR() { return GetToken(TinyCellParser.RPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CompoundStatementContext compoundStatement() {
			return GetRuleContext<CompoundStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(TinyCellParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SEMI() { return GetTokens(TinyCellParser.SEMI); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI(int i) {
			return GetToken(TinyCellParser.SEMI, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationContext declaration() {
			return GetRuleContext<DeclarationContext>(0);
		}
		public LoopStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loopStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITinyCellVisitor<TResult> typedVisitor = visitor as ITinyCellVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoopStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LoopStatementContext loopStatement() {
		LoopStatementContext _localctx = new LoopStatementContext(Context, State);
		EnterRule(_localctx, 30, RULE_loopStatement);
		try {
			State = 211;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case WHILE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 192;
				Match(WHILE);
				State = 193;
				Match(LPAR);
				State = 194;
				expression();
				State = 195;
				Match(RPAR);
				State = 196;
				compoundStatement();
				}
				break;
			case FOR:
				EnterOuterAlt(_localctx, 2);
				{
				State = 198;
				Match(FOR);
				State = 199;
				Match(LPAR);
				State = 202;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case Bool:
				case SET:
				case READ:
				case WRITE:
				case LPAR:
				case NOT:
				case UNARYPLUS:
				case UNARYMINUS:
				case Identifier:
				case String:
				case Numeral:
					{
					State = 200;
					expression();
					}
					break;
				case PIN:
				case INT:
				case FLOAT:
				case STRING:
				case BOOL:
				case VOID:
					{
					State = 201;
					declaration();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 204;
				Match(SEMI);
				State = 205;
				expression();
				State = 206;
				Match(SEMI);
				State = 207;
				expression();
				State = 208;
				Match(RPAR);
				State = 209;
				compoundStatement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class JumpStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONTINUE() { return GetToken(TinyCellParser.CONTINUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(TinyCellParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BREAK() { return GetToken(TinyCellParser.BREAK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURN() { return GetToken(TinyCellParser.RETURN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public JumpStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_jumpStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITinyCellVisitor<TResult> typedVisitor = visitor as ITinyCellVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJumpStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public JumpStatementContext jumpStatement() {
		JumpStatementContext _localctx = new JumpStatementContext(Context, State);
		EnterRule(_localctx, 32, RULE_jumpStatement);
		try {
			State = 221;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CONTINUE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 213;
				Match(CONTINUE);
				State = 214;
				Match(SEMI);
				}
				break;
			case BREAK:
				EnterOuterAlt(_localctx, 2);
				{
				State = 215;
				Match(BREAK);
				State = 216;
				Match(SEMI);
				}
				break;
			case RETURN:
				EnterOuterAlt(_localctx, 3);
				{
				State = 217;
				Match(RETURN);
				State = 218;
				expression();
				State = 219;
				Match(SEMI);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentOperatorContext assignmentOperator() {
			return GetRuleContext<AssignmentOperatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		public AssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITinyCellVisitor<TResult> typedVisitor = visitor as ITinyCellVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentContext assignment() {
		AssignmentContext _localctx = new AssignmentContext(Context, State);
		EnterRule(_localctx, 34, RULE_assignment);
		try {
			State = 231;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,14,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 223;
				identifier();
				State = 224;
				assignmentOperator();
				State = 225;
				expression();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 227;
				identifier();
				State = 228;
				assignmentOperator();
				State = 229;
				functionCall();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionCallContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAR() { return GetToken(TinyCellParser.LPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAR() { return GetToken(TinyCellParser.RPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentListContext[] argumentList() {
			return GetRuleContexts<ArgumentListContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentListContext argumentList(int i) {
			return GetRuleContext<ArgumentListContext>(i);
		}
		public FunctionCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionCall; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITinyCellVisitor<TResult> typedVisitor = visitor as ITinyCellVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionCallContext functionCall() {
		FunctionCallContext _localctx = new FunctionCallContext(Context, State);
		EnterRule(_localctx, 36, RULE_functionCall);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 233;
			identifier();
			State = 234;
			Match(LPAR);
			State = 238;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & 7L) != 0)) {
				{
				{
				State = 235;
				argumentList(0);
				}
				}
				State = 240;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 241;
			Match(RPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrimitiveExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Numeral() { return GetToken(TinyCellParser.Numeral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Bool() { return GetToken(TinyCellParser.Bool, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode String() { return GetToken(TinyCellParser.String, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAR() { return GetToken(TinyCellParser.LPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAR() { return GetToken(TinyCellParser.RPAR, 0); }
		public PrimitiveExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primitiveExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITinyCellVisitor<TResult> typedVisitor = visitor as ITinyCellVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimitiveExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrimitiveExpressionContext primitiveExpression() {
		PrimitiveExpressionContext _localctx = new PrimitiveExpressionContext(Context, State);
		EnterRule(_localctx, 38, RULE_primitiveExpression);
		try {
			State = 252;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,16,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 243;
				Match(Numeral);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 244;
				Match(Bool);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 245;
				Match(String);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 246;
				identifier();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 247;
				functionCall();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 248;
				Match(LPAR);
				State = 249;
				expression();
				State = 250;
				Match(RPAR);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnaryExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PrimitiveExpressionContext primitiveExpression() {
			return GetRuleContext<PrimitiveExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNARYPLUS() { return GetToken(TinyCellParser.UNARYPLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNARYMINUS() { return GetToken(TinyCellParser.UNARYMINUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(TinyCellParser.NOT, 0); }
		public UnaryExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unaryExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITinyCellVisitor<TResult> typedVisitor = visitor as ITinyCellVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnaryExpressionContext unaryExpression() {
		UnaryExpressionContext _localctx = new UnaryExpressionContext(Context, State);
		EnterRule(_localctx, 40, RULE_unaryExpression);
		try {
			State = 267;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,17,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 254;
				primitiveExpression();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 255;
				primitiveExpression();
				State = 256;
				Match(UNARYPLUS);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 258;
				primitiveExpression();
				State = 259;
				Match(UNARYMINUS);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 261;
				Match(UNARYPLUS);
				State = 262;
				primitiveExpression();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 263;
				Match(UNARYMINUS);
				State = 264;
				primitiveExpression();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 265;
				Match(NOT);
				State = 266;
				primitiveExpression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MultiplicativeExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public UnaryExpressionContext unaryExpression() {
			return GetRuleContext<UnaryExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MultiplicativeExpressionContext multiplicativeExpression() {
			return GetRuleContext<MultiplicativeExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULT() { return GetToken(TinyCellParser.MULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PrimitiveExpressionContext primitiveExpression() {
			return GetRuleContext<PrimitiveExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIV() { return GetToken(TinyCellParser.DIV, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MOD() { return GetToken(TinyCellParser.MOD, 0); }
		public MultiplicativeExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multiplicativeExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITinyCellVisitor<TResult> typedVisitor = visitor as ITinyCellVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiplicativeExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MultiplicativeExpressionContext multiplicativeExpression() {
		return multiplicativeExpression(0);
	}

	private MultiplicativeExpressionContext multiplicativeExpression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		MultiplicativeExpressionContext _localctx = new MultiplicativeExpressionContext(Context, _parentState);
		MultiplicativeExpressionContext _prevctx = _localctx;
		int _startState = 42;
		EnterRecursionRule(_localctx, 42, RULE_multiplicativeExpression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 270;
			unaryExpression();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 283;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,19,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 281;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,18,Context) ) {
					case 1:
						{
						_localctx = new MultiplicativeExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_multiplicativeExpression);
						State = 272;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 273;
						Match(MULT);
						State = 274;
						primitiveExpression();
						}
						break;
					case 2:
						{
						_localctx = new MultiplicativeExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_multiplicativeExpression);
						State = 275;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 276;
						Match(DIV);
						State = 277;
						primitiveExpression();
						}
						break;
					case 3:
						{
						_localctx = new MultiplicativeExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_multiplicativeExpression);
						State = 278;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 279;
						Match(MOD);
						State = 280;
						primitiveExpression();
						}
						break;
					}
					} 
				}
				State = 285;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,19,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class AdditiveExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public MultiplicativeExpressionContext multiplicativeExpression() {
			return GetRuleContext<MultiplicativeExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AdditiveExpressionContext additiveExpression() {
			return GetRuleContext<AdditiveExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(TinyCellParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(TinyCellParser.MINUS, 0); }
		public AdditiveExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_additiveExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITinyCellVisitor<TResult> typedVisitor = visitor as ITinyCellVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAdditiveExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AdditiveExpressionContext additiveExpression() {
		return additiveExpression(0);
	}

	private AdditiveExpressionContext additiveExpression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		AdditiveExpressionContext _localctx = new AdditiveExpressionContext(Context, _parentState);
		AdditiveExpressionContext _prevctx = _localctx;
		int _startState = 44;
		EnterRecursionRule(_localctx, 44, RULE_additiveExpression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 287;
			multiplicativeExpression(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 297;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,21,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 295;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,20,Context) ) {
					case 1:
						{
						_localctx = new AdditiveExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_additiveExpression);
						State = 289;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 290;
						Match(PLUS);
						State = 291;
						multiplicativeExpression(0);
						}
						break;
					case 2:
						{
						_localctx = new AdditiveExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_additiveExpression);
						State = 292;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 293;
						Match(MINUS);
						State = 294;
						multiplicativeExpression(0);
						}
						break;
					}
					} 
				}
				State = 299;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,21,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class BitshiftExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AdditiveExpressionContext additiveExpression() {
			return GetRuleContext<AdditiveExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BitshiftExpressionContext bitshiftExpression() {
			return GetRuleContext<BitshiftExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BITSHIFTL() { return GetToken(TinyCellParser.BITSHIFTL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BITSHIFTR() { return GetToken(TinyCellParser.BITSHIFTR, 0); }
		public BitshiftExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bitshiftExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITinyCellVisitor<TResult> typedVisitor = visitor as ITinyCellVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBitshiftExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BitshiftExpressionContext bitshiftExpression() {
		return bitshiftExpression(0);
	}

	private BitshiftExpressionContext bitshiftExpression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		BitshiftExpressionContext _localctx = new BitshiftExpressionContext(Context, _parentState);
		BitshiftExpressionContext _prevctx = _localctx;
		int _startState = 46;
		EnterRecursionRule(_localctx, 46, RULE_bitshiftExpression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 301;
			additiveExpression(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 311;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,23,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 309;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,22,Context) ) {
					case 1:
						{
						_localctx = new BitshiftExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_bitshiftExpression);
						State = 303;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 304;
						Match(BITSHIFTL);
						State = 305;
						additiveExpression(0);
						}
						break;
					case 2:
						{
						_localctx = new BitshiftExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_bitshiftExpression);
						State = 306;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 307;
						Match(BITSHIFTR);
						State = 308;
						additiveExpression(0);
						}
						break;
					}
					} 
				}
				State = 313;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,23,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ComparisonExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BitshiftExpressionContext bitshiftExpression() {
			return GetRuleContext<BitshiftExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ComparisonExpressionContext comparisonExpression() {
			return GetRuleContext<ComparisonExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT() { return GetToken(TinyCellParser.LT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT() { return GetToken(TinyCellParser.GT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LTE() { return GetToken(TinyCellParser.LTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GTE() { return GetToken(TinyCellParser.GTE, 0); }
		public ComparisonExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comparisonExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITinyCellVisitor<TResult> typedVisitor = visitor as ITinyCellVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComparisonExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ComparisonExpressionContext comparisonExpression() {
		return comparisonExpression(0);
	}

	private ComparisonExpressionContext comparisonExpression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ComparisonExpressionContext _localctx = new ComparisonExpressionContext(Context, _parentState);
		ComparisonExpressionContext _prevctx = _localctx;
		int _startState = 48;
		EnterRecursionRule(_localctx, 48, RULE_comparisonExpression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 315;
			bitshiftExpression(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 331;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,25,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 329;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,24,Context) ) {
					case 1:
						{
						_localctx = new ComparisonExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_comparisonExpression);
						State = 317;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 318;
						Match(LT);
						State = 319;
						bitshiftExpression(0);
						}
						break;
					case 2:
						{
						_localctx = new ComparisonExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_comparisonExpression);
						State = 320;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 321;
						Match(GT);
						State = 322;
						bitshiftExpression(0);
						}
						break;
					case 3:
						{
						_localctx = new ComparisonExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_comparisonExpression);
						State = 323;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 324;
						Match(LTE);
						State = 325;
						bitshiftExpression(0);
						}
						break;
					case 4:
						{
						_localctx = new ComparisonExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_comparisonExpression);
						State = 326;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 327;
						Match(GTE);
						State = 328;
						bitshiftExpression(0);
						}
						break;
					}
					} 
				}
				State = 333;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,25,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class EqualityExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ComparisonExpressionContext comparisonExpression() {
			return GetRuleContext<ComparisonExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EqualityExpressionContext equalityExpression() {
			return GetRuleContext<EqualityExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQ() { return GetToken(TinyCellParser.EQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEQ() { return GetToken(TinyCellParser.NEQ, 0); }
		public EqualityExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_equalityExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITinyCellVisitor<TResult> typedVisitor = visitor as ITinyCellVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEqualityExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EqualityExpressionContext equalityExpression() {
		return equalityExpression(0);
	}

	private EqualityExpressionContext equalityExpression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		EqualityExpressionContext _localctx = new EqualityExpressionContext(Context, _parentState);
		EqualityExpressionContext _prevctx = _localctx;
		int _startState = 50;
		EnterRecursionRule(_localctx, 50, RULE_equalityExpression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 335;
			comparisonExpression(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 345;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,27,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 343;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,26,Context) ) {
					case 1:
						{
						_localctx = new EqualityExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_equalityExpression);
						State = 337;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 338;
						Match(EQ);
						State = 339;
						comparisonExpression(0);
						}
						break;
					case 2:
						{
						_localctx = new EqualityExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_equalityExpression);
						State = 340;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 341;
						Match(NEQ);
						State = 342;
						comparisonExpression(0);
						}
						break;
					}
					} 
				}
				State = 347;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,27,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class AndExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public EqualityExpressionContext equalityExpression() {
			return GetRuleContext<EqualityExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AndExpressionContext andExpression() {
			return GetRuleContext<AndExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND() { return GetToken(TinyCellParser.AND, 0); }
		public AndExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_andExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITinyCellVisitor<TResult> typedVisitor = visitor as ITinyCellVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAndExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AndExpressionContext andExpression() {
		return andExpression(0);
	}

	private AndExpressionContext andExpression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		AndExpressionContext _localctx = new AndExpressionContext(Context, _parentState);
		AndExpressionContext _prevctx = _localctx;
		int _startState = 52;
		EnterRecursionRule(_localctx, 52, RULE_andExpression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 349;
			equalityExpression(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 356;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,28,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new AndExpressionContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_andExpression);
					State = 351;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 352;
					Match(AND);
					State = 353;
					equalityExpression(0);
					}
					} 
				}
				State = 358;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,28,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class OrExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AndExpressionContext andExpression() {
			return GetRuleContext<AndExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OrExpressionContext orExpression() {
			return GetRuleContext<OrExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR() { return GetToken(TinyCellParser.OR, 0); }
		public OrExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_orExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITinyCellVisitor<TResult> typedVisitor = visitor as ITinyCellVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOrExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OrExpressionContext orExpression() {
		return orExpression(0);
	}

	private OrExpressionContext orExpression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		OrExpressionContext _localctx = new OrExpressionContext(Context, _parentState);
		OrExpressionContext _prevctx = _localctx;
		int _startState = 54;
		EnterRecursionRule(_localctx, 54, RULE_orExpression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 360;
			andExpression(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 367;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,29,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new OrExpressionContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_orExpression);
					State = 362;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 363;
					Match(OR);
					State = 364;
					andExpression(0);
					}
					} 
				}
				State = 369;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,29,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class TernaryExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public OrExpressionContext orExpression() {
			return GetRuleContext<OrExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUESTION() { return GetToken(TinyCellParser.QUESTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(TinyCellParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallContext[] functionCall() {
			return GetRuleContexts<FunctionCallContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallContext functionCall(int i) {
			return GetRuleContext<FunctionCallContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentContext[] assignment() {
			return GetRuleContexts<AssignmentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentContext assignment(int i) {
			return GetRuleContext<AssignmentContext>(i);
		}
		public TernaryExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ternaryExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITinyCellVisitor<TResult> typedVisitor = visitor as ITinyCellVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTernaryExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TernaryExpressionContext ternaryExpression() {
		TernaryExpressionContext _localctx = new TernaryExpressionContext(Context, State);
		EnterRule(_localctx, 56, RULE_ternaryExpression);
		try {
			State = 384;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,32,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 370;
				orExpression(0);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 371;
				orExpression(0);
				State = 372;
				Match(QUESTION);
				State = 376;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,30,Context) ) {
				case 1:
					{
					State = 373;
					expression();
					}
					break;
				case 2:
					{
					State = 374;
					functionCall();
					}
					break;
				case 3:
					{
					State = 375;
					assignment();
					}
					break;
				}
				State = 378;
				Match(COLON);
				State = 382;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,31,Context) ) {
				case 1:
					{
					State = 379;
					expression();
					}
					break;
				case 2:
					{
					State = 380;
					functionCall();
					}
					break;
				case 3:
					{
					State = 381;
					assignment();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PinAssignmentExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TernaryExpressionContext ternaryExpression() {
			return GetRuleContext<TernaryExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WRITE() { return GetToken(TinyCellParser.WRITE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(TinyCellParser.TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PinVoltageContext pinVoltage() {
			return GetRuleContext<PinVoltageContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Numeral() { return GetToken(TinyCellParser.Numeral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode READ() { return GetToken(TinyCellParser.READ, 0); }
		public PinAssignmentExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pinAssignmentExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITinyCellVisitor<TResult> typedVisitor = visitor as ITinyCellVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPinAssignmentExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PinAssignmentExpressionContext pinAssignmentExpression() {
		PinAssignmentExpressionContext _localctx = new PinAssignmentExpressionContext(Context, State);
		EnterRule(_localctx, 58, RULE_pinAssignmentExpression);
		try {
			State = 404;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Bool:
			case LPAR:
			case NOT:
			case UNARYPLUS:
			case UNARYMINUS:
			case Identifier:
			case String:
			case Numeral:
				EnterOuterAlt(_localctx, 1);
				{
				State = 386;
				ternaryExpression();
				}
				break;
			case WRITE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 387;
				Match(WRITE);
				State = 390;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case VOLHIGH:
				case VOLLOW:
					{
					State = 388;
					pinVoltage();
					}
					break;
				case Identifier:
					{
					State = 389;
					identifier();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 392;
				Match(TO);
				State = 395;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case Identifier:
					{
					State = 393;
					identifier();
					}
					break;
				case Numeral:
					{
					State = 394;
					Match(Numeral);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case READ:
				EnterOuterAlt(_localctx, 3);
				{
				State = 397;
				Match(READ);
				State = 400;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case Identifier:
					{
					State = 398;
					identifier();
					}
					break;
				case Numeral:
					{
					State = 399;
					Match(Numeral);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 402;
				Match(TO);
				State = 403;
				identifier();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PinStatusExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PinAssignmentExpressionContext pinAssignmentExpression() {
			return GetRuleContext<PinAssignmentExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(TinyCellParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(TinyCellParser.TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PinStatusContext pinStatus() {
			return GetRuleContext<PinStatusContext>(0);
		}
		public PinStatusExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pinStatusExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITinyCellVisitor<TResult> typedVisitor = visitor as ITinyCellVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPinStatusExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PinStatusExpressionContext pinStatusExpression() {
		PinStatusExpressionContext _localctx = new PinStatusExpressionContext(Context, State);
		EnterRule(_localctx, 60, RULE_pinStatusExpression);
		try {
			State = 412;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Bool:
			case READ:
			case WRITE:
			case LPAR:
			case NOT:
			case UNARYPLUS:
			case UNARYMINUS:
			case Identifier:
			case String:
			case Numeral:
				EnterOuterAlt(_localctx, 1);
				{
				State = 406;
				pinAssignmentExpression();
				}
				break;
			case SET:
				EnterOuterAlt(_localctx, 2);
				{
				State = 407;
				Match(SET);
				State = 408;
				identifier();
				State = 409;
				Match(TO);
				State = 410;
				pinStatus();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PinStatusExpressionContext pinStatusExpression() {
			return GetRuleContext<PinStatusExpressionContext>(0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITinyCellVisitor<TResult> typedVisitor = visitor as ITinyCellVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(Context, State);
		EnterRule(_localctx, 62, RULE_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 414;
			pinStatusExpression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(TinyCellParser.Identifier, 0); }
		public IdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITinyCellVisitor<TResult> typedVisitor = visitor as ITinyCellVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierContext identifier() {
		IdentifierContext _localctx = new IdentifierContext(Context, State);
		EnterRule(_localctx, 64, RULE_identifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 416;
			Match(Identifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentOperatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(TinyCellParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULTASSIGN() { return GetToken(TinyCellParser.MULTASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIVASSIGN() { return GetToken(TinyCellParser.DIVASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MODASSIGN() { return GetToken(TinyCellParser.MODASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUSASSIGN() { return GetToken(TinyCellParser.PLUSASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUSASSIGN() { return GetToken(TinyCellParser.MINUSASSIGN, 0); }
		public AssignmentOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignmentOperator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITinyCellVisitor<TResult> typedVisitor = visitor as ITinyCellVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignmentOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentOperatorContext assignmentOperator() {
		AssignmentOperatorContext _localctx = new AssignmentOperatorContext(Context, State);
		EnterRule(_localctx, 66, RULE_assignmentOperator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 418;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 138538465099776L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PinVoltageContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VOLHIGH() { return GetToken(TinyCellParser.VOLHIGH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VOLLOW() { return GetToken(TinyCellParser.VOLLOW, 0); }
		public PinVoltageContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pinVoltage; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITinyCellVisitor<TResult> typedVisitor = visitor as ITinyCellVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPinVoltage(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PinVoltageContext pinVoltage() {
		PinVoltageContext _localctx = new PinVoltageContext(Context, State);
		EnterRule(_localctx, 68, RULE_pinVoltage);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 420;
			_la = TokenStream.LA(1);
			if ( !(_la==VOLHIGH || _la==VOLLOW) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PinStatusContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PININ() { return GetToken(TinyCellParser.PININ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PINOUT() { return GetToken(TinyCellParser.PINOUT, 0); }
		public PinStatusContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pinStatus; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITinyCellVisitor<TResult> typedVisitor = visitor as ITinyCellVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPinStatus(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PinStatusContext pinStatus() {
		PinStatusContext _localctx = new PinStatusContext(Context, State);
		EnterRule(_localctx, 70, RULE_pinStatus);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 422;
			_la = TokenStream.LA(1);
			if ( !(_la==PININ || _la==PINOUT) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 6: return parameterList_sempred((ParameterListContext)_localctx, predIndex);
		case 8: return argumentList_sempred((ArgumentListContext)_localctx, predIndex);
		case 21: return multiplicativeExpression_sempred((MultiplicativeExpressionContext)_localctx, predIndex);
		case 22: return additiveExpression_sempred((AdditiveExpressionContext)_localctx, predIndex);
		case 23: return bitshiftExpression_sempred((BitshiftExpressionContext)_localctx, predIndex);
		case 24: return comparisonExpression_sempred((ComparisonExpressionContext)_localctx, predIndex);
		case 25: return equalityExpression_sempred((EqualityExpressionContext)_localctx, predIndex);
		case 26: return andExpression_sempred((AndExpressionContext)_localctx, predIndex);
		case 27: return orExpression_sempred((OrExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool parameterList_sempred(ParameterListContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 1);
		}
		return true;
	}
	private bool argumentList_sempred(ArgumentListContext _localctx, int predIndex) {
		switch (predIndex) {
		case 1: return Precpred(Context, 1);
		}
		return true;
	}
	private bool multiplicativeExpression_sempred(MultiplicativeExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 2: return Precpred(Context, 3);
		case 3: return Precpred(Context, 2);
		case 4: return Precpred(Context, 1);
		}
		return true;
	}
	private bool additiveExpression_sempred(AdditiveExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 5: return Precpred(Context, 2);
		case 6: return Precpred(Context, 1);
		}
		return true;
	}
	private bool bitshiftExpression_sempred(BitshiftExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 7: return Precpred(Context, 2);
		case 8: return Precpred(Context, 1);
		}
		return true;
	}
	private bool comparisonExpression_sempred(ComparisonExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 9: return Precpred(Context, 4);
		case 10: return Precpred(Context, 3);
		case 11: return Precpred(Context, 2);
		case 12: return Precpred(Context, 1);
		}
		return true;
	}
	private bool equalityExpression_sempred(EqualityExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 13: return Precpred(Context, 2);
		case 14: return Precpred(Context, 1);
		}
		return true;
	}
	private bool andExpression_sempred(AndExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 15: return Precpred(Context, 1);
		}
		return true;
	}
	private bool orExpression_sempred(OrExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 16: return Precpred(Context, 1);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,71,425,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,
		1,0,5,0,74,8,0,10,0,12,0,77,9,0,1,0,1,0,1,0,1,1,1,1,1,1,1,1,3,1,86,8,1,
		1,2,1,2,1,2,1,3,1,3,1,3,1,4,1,4,1,4,1,4,5,4,98,8,4,10,4,12,4,101,9,4,1,
		4,1,4,1,4,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,6,5,6,114,8,6,10,6,12,6,117,9,
		6,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,8,5,8,128,8,8,10,8,12,8,131,9,8,1,
		9,1,9,1,9,1,9,3,9,137,8,9,1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,11,3,11,
		147,8,11,3,11,149,8,11,1,12,1,12,5,12,153,8,12,10,12,12,12,156,9,12,1,
		12,1,12,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,
		13,1,13,1,13,3,13,175,8,13,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,
		1,14,1,14,1,14,1,14,1,14,3,14,191,8,14,1,15,1,15,1,15,1,15,1,15,1,15,1,
		15,1,15,1,15,1,15,3,15,203,8,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,3,15,
		212,8,15,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,3,16,222,8,16,1,17,1,
		17,1,17,1,17,1,17,1,17,1,17,1,17,3,17,232,8,17,1,18,1,18,1,18,5,18,237,
		8,18,10,18,12,18,240,9,18,1,18,1,18,1,19,1,19,1,19,1,19,1,19,1,19,1,19,
		1,19,1,19,3,19,253,8,19,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,
		20,1,20,1,20,1,20,3,20,268,8,20,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,
		1,21,1,21,1,21,1,21,5,21,282,8,21,10,21,12,21,285,9,21,1,22,1,22,1,22,
		1,22,1,22,1,22,1,22,1,22,1,22,5,22,296,8,22,10,22,12,22,299,9,22,1,23,
		1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,5,23,310,8,23,10,23,12,23,313,
		9,23,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,
		1,24,1,24,5,24,330,8,24,10,24,12,24,333,9,24,1,25,1,25,1,25,1,25,1,25,
		1,25,1,25,1,25,1,25,5,25,344,8,25,10,25,12,25,347,9,25,1,26,1,26,1,26,
		1,26,1,26,1,26,5,26,355,8,26,10,26,12,26,358,9,26,1,27,1,27,1,27,1,27,
		1,27,1,27,5,27,366,8,27,10,27,12,27,369,9,27,1,28,1,28,1,28,1,28,1,28,
		1,28,3,28,377,8,28,1,28,1,28,1,28,1,28,3,28,383,8,28,3,28,385,8,28,1,29,
		1,29,1,29,1,29,3,29,391,8,29,1,29,1,29,1,29,3,29,396,8,29,1,29,1,29,1,
		29,3,29,401,8,29,1,29,1,29,3,29,405,8,29,1,30,1,30,1,30,1,30,1,30,1,30,
		3,30,413,8,30,1,31,1,31,1,32,1,32,1,33,1,33,1,34,1,34,1,35,1,35,1,35,0,
		9,12,16,42,44,46,48,50,52,54,36,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,
		30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,0,4,1,0,
		7,12,1,0,41,46,1,0,3,4,1,0,5,6,448,0,75,1,0,0,0,2,85,1,0,0,0,4,87,1,0,
		0,0,6,90,1,0,0,0,8,93,1,0,0,0,10,105,1,0,0,0,12,107,1,0,0,0,14,118,1,0,
		0,0,16,121,1,0,0,0,18,136,1,0,0,0,20,138,1,0,0,0,22,148,1,0,0,0,24,150,
		1,0,0,0,26,174,1,0,0,0,28,190,1,0,0,0,30,211,1,0,0,0,32,221,1,0,0,0,34,
		231,1,0,0,0,36,233,1,0,0,0,38,252,1,0,0,0,40,267,1,0,0,0,42,269,1,0,0,
		0,44,286,1,0,0,0,46,300,1,0,0,0,48,314,1,0,0,0,50,334,1,0,0,0,52,348,1,
		0,0,0,54,359,1,0,0,0,56,384,1,0,0,0,58,404,1,0,0,0,60,412,1,0,0,0,62,414,
		1,0,0,0,64,416,1,0,0,0,66,418,1,0,0,0,68,420,1,0,0,0,70,422,1,0,0,0,72,
		74,3,2,1,0,73,72,1,0,0,0,74,77,1,0,0,0,75,73,1,0,0,0,75,76,1,0,0,0,76,
		78,1,0,0,0,77,75,1,0,0,0,78,79,3,4,2,0,79,80,3,6,3,0,80,1,1,0,0,0,81,86,
		3,8,4,0,82,83,3,20,10,0,83,84,5,34,0,0,84,86,1,0,0,0,85,81,1,0,0,0,85,
		82,1,0,0,0,86,3,1,0,0,0,87,88,5,15,0,0,88,89,3,24,12,0,89,5,1,0,0,0,90,
		91,5,14,0,0,91,92,3,24,12,0,92,7,1,0,0,0,93,94,3,10,5,0,94,95,3,64,32,
		0,95,99,5,28,0,0,96,98,3,12,6,0,97,96,1,0,0,0,98,101,1,0,0,0,99,97,1,0,
		0,0,99,100,1,0,0,0,100,102,1,0,0,0,101,99,1,0,0,0,102,103,5,29,0,0,103,
		104,3,24,12,0,104,9,1,0,0,0,105,106,7,0,0,0,106,11,1,0,0,0,107,108,6,6,
		-1,0,108,109,3,14,7,0,109,115,1,0,0,0,110,111,10,1,0,0,111,112,5,36,0,
		0,112,114,3,14,7,0,113,110,1,0,0,0,114,117,1,0,0,0,115,113,1,0,0,0,115,
		116,1,0,0,0,116,13,1,0,0,0,117,115,1,0,0,0,118,119,3,10,5,0,119,120,3,
		64,32,0,120,15,1,0,0,0,121,122,6,8,-1,0,122,123,3,18,9,0,123,129,1,0,0,
		0,124,125,10,1,0,0,125,126,5,36,0,0,126,128,3,18,9,0,127,124,1,0,0,0,128,
		131,1,0,0,0,129,127,1,0,0,0,129,130,1,0,0,0,130,17,1,0,0,0,131,129,1,0,
		0,0,132,137,3,64,32,0,133,137,3,36,18,0,134,137,5,68,0,0,135,137,5,67,
		0,0,136,132,1,0,0,0,136,133,1,0,0,0,136,134,1,0,0,0,136,135,1,0,0,0,137,
		19,1,0,0,0,138,139,3,10,5,0,139,140,3,22,11,0,140,21,1,0,0,0,141,149,3,
		64,32,0,142,143,3,64,32,0,143,146,5,41,0,0,144,147,3,62,31,0,145,147,3,
		36,18,0,146,144,1,0,0,0,146,145,1,0,0,0,147,149,1,0,0,0,148,141,1,0,0,
		0,148,142,1,0,0,0,149,23,1,0,0,0,150,154,5,30,0,0,151,153,3,26,13,0,152,
		151,1,0,0,0,153,156,1,0,0,0,154,152,1,0,0,0,154,155,1,0,0,0,155,157,1,
		0,0,0,156,154,1,0,0,0,157,158,5,31,0,0,158,25,1,0,0,0,159,175,3,28,14,
		0,160,175,3,30,15,0,161,175,3,32,16,0,162,163,3,20,10,0,163,164,5,34,0,
		0,164,175,1,0,0,0,165,166,3,36,18,0,166,167,5,34,0,0,167,175,1,0,0,0,168,
		169,3,34,17,0,169,170,5,34,0,0,170,175,1,0,0,0,171,172,3,62,31,0,172,173,
		5,34,0,0,173,175,1,0,0,0,174,159,1,0,0,0,174,160,1,0,0,0,174,161,1,0,0,
		0,174,162,1,0,0,0,174,165,1,0,0,0,174,168,1,0,0,0,174,171,1,0,0,0,175,
		27,1,0,0,0,176,177,5,20,0,0,177,178,5,28,0,0,178,179,3,62,31,0,179,180,
		5,29,0,0,180,181,3,24,12,0,181,182,5,21,0,0,182,183,3,24,12,0,183,191,
		1,0,0,0,184,185,5,20,0,0,185,186,5,28,0,0,186,187,3,62,31,0,187,188,5,
		29,0,0,188,189,3,24,12,0,189,191,1,0,0,0,190,176,1,0,0,0,190,184,1,0,0,
		0,191,29,1,0,0,0,192,193,5,22,0,0,193,194,5,28,0,0,194,195,3,62,31,0,195,
		196,5,29,0,0,196,197,3,24,12,0,197,212,1,0,0,0,198,199,5,23,0,0,199,202,
		5,28,0,0,200,203,3,62,31,0,201,203,3,20,10,0,202,200,1,0,0,0,202,201,1,
		0,0,0,203,204,1,0,0,0,204,205,5,34,0,0,205,206,3,62,31,0,206,207,5,34,
		0,0,207,208,3,62,31,0,208,209,5,29,0,0,209,210,3,24,12,0,210,212,1,0,0,
		0,211,192,1,0,0,0,211,198,1,0,0,0,212,31,1,0,0,0,213,214,5,24,0,0,214,
		222,5,34,0,0,215,216,5,25,0,0,216,222,5,34,0,0,217,218,5,26,0,0,218,219,
		3,62,31,0,219,220,5,34,0,0,220,222,1,0,0,0,221,213,1,0,0,0,221,215,1,0,
		0,0,221,217,1,0,0,0,222,33,1,0,0,0,223,224,3,64,32,0,224,225,3,66,33,0,
		225,226,3,62,31,0,226,232,1,0,0,0,227,228,3,64,32,0,228,229,3,66,33,0,
		229,230,3,36,18,0,230,232,1,0,0,0,231,223,1,0,0,0,231,227,1,0,0,0,232,
		35,1,0,0,0,233,234,3,64,32,0,234,238,5,28,0,0,235,237,3,16,8,0,236,235,
		1,0,0,0,237,240,1,0,0,0,238,236,1,0,0,0,238,239,1,0,0,0,239,241,1,0,0,
		0,240,238,1,0,0,0,241,242,5,29,0,0,242,37,1,0,0,0,243,253,5,68,0,0,244,
		253,5,1,0,0,245,253,5,67,0,0,246,253,3,64,32,0,247,253,3,36,18,0,248,249,
		5,28,0,0,249,250,3,62,31,0,250,251,5,29,0,0,251,253,1,0,0,0,252,243,1,
		0,0,0,252,244,1,0,0,0,252,245,1,0,0,0,252,246,1,0,0,0,252,247,1,0,0,0,
		252,248,1,0,0,0,253,39,1,0,0,0,254,268,3,38,19,0,255,256,3,38,19,0,256,
		257,5,64,0,0,257,268,1,0,0,0,258,259,3,38,19,0,259,260,5,65,0,0,260,268,
		1,0,0,0,261,262,5,64,0,0,262,268,3,38,19,0,263,264,5,65,0,0,264,268,3,
		38,19,0,265,266,5,61,0,0,266,268,3,38,19,0,267,254,1,0,0,0,267,255,1,0,
		0,0,267,258,1,0,0,0,267,261,1,0,0,0,267,263,1,0,0,0,267,265,1,0,0,0,268,
		41,1,0,0,0,269,270,6,21,-1,0,270,271,3,40,20,0,271,283,1,0,0,0,272,273,
		10,3,0,0,273,274,5,48,0,0,274,282,3,38,19,0,275,276,10,2,0,0,276,277,5,
		49,0,0,277,282,3,38,19,0,278,279,10,1,0,0,279,280,5,52,0,0,280,282,3,38,
		19,0,281,272,1,0,0,0,281,275,1,0,0,0,281,278,1,0,0,0,282,285,1,0,0,0,283,
		281,1,0,0,0,283,284,1,0,0,0,284,43,1,0,0,0,285,283,1,0,0,0,286,287,6,22,
		-1,0,287,288,3,42,21,0,288,297,1,0,0,0,289,290,10,2,0,0,290,291,5,50,0,
		0,291,296,3,42,21,0,292,293,10,1,0,0,293,294,5,51,0,0,294,296,3,42,21,
		0,295,289,1,0,0,0,295,292,1,0,0,0,296,299,1,0,0,0,297,295,1,0,0,0,297,
		298,1,0,0,0,298,45,1,0,0,0,299,297,1,0,0,0,300,301,6,23,-1,0,301,302,3,
		44,22,0,302,311,1,0,0,0,303,304,10,2,0,0,304,305,5,62,0,0,305,310,3,44,
		22,0,306,307,10,1,0,0,307,308,5,63,0,0,308,310,3,44,22,0,309,303,1,0,0,
		0,309,306,1,0,0,0,310,313,1,0,0,0,311,309,1,0,0,0,311,312,1,0,0,0,312,
		47,1,0,0,0,313,311,1,0,0,0,314,315,6,24,-1,0,315,316,3,46,23,0,316,331,
		1,0,0,0,317,318,10,4,0,0,318,319,5,58,0,0,319,330,3,46,23,0,320,321,10,
		3,0,0,321,322,5,57,0,0,322,330,3,46,23,0,323,324,10,2,0,0,324,325,5,60,
		0,0,325,330,3,46,23,0,326,327,10,1,0,0,327,328,5,59,0,0,328,330,3,46,23,
		0,329,317,1,0,0,0,329,320,1,0,0,0,329,323,1,0,0,0,329,326,1,0,0,0,330,
		333,1,0,0,0,331,329,1,0,0,0,331,332,1,0,0,0,332,49,1,0,0,0,333,331,1,0,
		0,0,334,335,6,25,-1,0,335,336,3,48,24,0,336,345,1,0,0,0,337,338,10,2,0,
		0,338,339,5,55,0,0,339,344,3,48,24,0,340,341,10,1,0,0,341,342,5,56,0,0,
		342,344,3,48,24,0,343,337,1,0,0,0,343,340,1,0,0,0,344,347,1,0,0,0,345,
		343,1,0,0,0,345,346,1,0,0,0,346,51,1,0,0,0,347,345,1,0,0,0,348,349,6,26,
		-1,0,349,350,3,50,25,0,350,356,1,0,0,0,351,352,10,1,0,0,352,353,5,53,0,
		0,353,355,3,50,25,0,354,351,1,0,0,0,355,358,1,0,0,0,356,354,1,0,0,0,356,
		357,1,0,0,0,357,53,1,0,0,0,358,356,1,0,0,0,359,360,6,27,-1,0,360,361,3,
		52,26,0,361,367,1,0,0,0,362,363,10,1,0,0,363,364,5,54,0,0,364,366,3,52,
		26,0,365,362,1,0,0,0,366,369,1,0,0,0,367,365,1,0,0,0,367,368,1,0,0,0,368,
		55,1,0,0,0,369,367,1,0,0,0,370,385,3,54,27,0,371,372,3,54,27,0,372,376,
		5,27,0,0,373,377,3,62,31,0,374,377,3,36,18,0,375,377,3,34,17,0,376,373,
		1,0,0,0,376,374,1,0,0,0,376,375,1,0,0,0,377,378,1,0,0,0,378,382,5,37,0,
		0,379,383,3,62,31,0,380,383,3,36,18,0,381,383,3,34,17,0,382,379,1,0,0,
		0,382,380,1,0,0,0,382,381,1,0,0,0,383,385,1,0,0,0,384,370,1,0,0,0,384,
		371,1,0,0,0,385,57,1,0,0,0,386,405,3,56,28,0,387,390,5,19,0,0,388,391,
		3,68,34,0,389,391,3,64,32,0,390,388,1,0,0,0,390,389,1,0,0,0,391,392,1,
		0,0,0,392,395,5,17,0,0,393,396,3,64,32,0,394,396,5,68,0,0,395,393,1,0,
		0,0,395,394,1,0,0,0,396,405,1,0,0,0,397,400,5,18,0,0,398,401,3,64,32,0,
		399,401,5,68,0,0,400,398,1,0,0,0,400,399,1,0,0,0,401,402,1,0,0,0,402,403,
		5,17,0,0,403,405,3,64,32,0,404,386,1,0,0,0,404,387,1,0,0,0,404,397,1,0,
		0,0,405,59,1,0,0,0,406,413,3,58,29,0,407,408,5,16,0,0,408,409,3,64,32,
		0,409,410,5,17,0,0,410,411,3,70,35,0,411,413,1,0,0,0,412,406,1,0,0,0,412,
		407,1,0,0,0,413,61,1,0,0,0,414,415,3,60,30,0,415,63,1,0,0,0,416,417,5,
		66,0,0,417,65,1,0,0,0,418,419,7,1,0,0,419,67,1,0,0,0,420,421,7,2,0,0,421,
		69,1,0,0,0,422,423,7,3,0,0,423,71,1,0,0,0,38,75,85,99,115,129,136,146,
		148,154,174,190,202,211,221,231,238,252,267,281,283,295,297,309,311,329,
		331,343,345,356,367,376,382,384,390,395,400,404,412
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
