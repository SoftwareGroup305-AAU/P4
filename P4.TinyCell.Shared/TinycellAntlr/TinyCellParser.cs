//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from /home/rasmus/Documents/GitHub/P4/P4.TinyCell.Shared/TinycellAntlr/TinyCell.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class TinyCellParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		Bool=1, Whitespace=2, VOLHIGH=3, VOLLOW=4, PININ=5, PINOUT=6, DPIN=7, 
		APIN=8, INT=9, FLOAT=10, STRING=11, BOOL=12, VOID=13, CHAR=14, UPDATE=15, 
		SETUP=16, SET=17, TO=18, READ=19, WRITE=20, IF=21, ELSE=22, WHILE=23, 
		FOR=24, CONTINUE=25, BREAK=26, RETURN=27, INCLUDE=28, QUESTION=29, LPAR=30, 
		RPAR=31, LCURLY=32, RCURLY=33, LBRACKET=34, RBRACKET=35, SEMI=36, DOT=37, 
		COMMA=38, COLON=39, TRUE=40, FALSE=41, NEWLINE=42, ASSIGN=43, PLUSASSIGN=44, 
		MULTASSIGN=45, DIVASSIGN=46, MODASSIGN=47, MINUSASSIGN=48, QUOTE=49, MULT=50, 
		DIV=51, PLUS=52, MINUS=53, MOD=54, AND=55, OR=56, EQ=57, NEQ=58, GT=59, 
		LT=60, GTE=61, LTE=62, NOT=63, BITSHIFTL=64, BITSHIFTR=65, UNARYPLUS=66, 
		UNARYMINUS=67, Identifier=68, LibraryIdent=69, String=70, Numeral=71, 
		IntNumeral=72, BlockComment=73, LineComment=74, Newline=75;
	public const int
		RULE_document = 0, RULE_include = 1, RULE_generalDeclaration = 2, RULE_setupDefinition = 3, 
		RULE_updateDefinition = 4, RULE_functionDefinition = 5, RULE_type = 6, 
		RULE_parameterList = 7, RULE_parameter = 8, RULE_argumentList = 9, RULE_argument = 10, 
		RULE_declaration = 11, RULE_initialDeclaration = 12, RULE_compoundStatement = 13, 
		RULE_statement = 14, RULE_ifStatement = 15, RULE_loopStatement = 16, RULE_jumpStatement = 17, 
		RULE_assignment = 18, RULE_functionCall = 19, RULE_arrayContent = 20, 
		RULE_primitiveExpression = 21, RULE_negativeExpression = 22, RULE_unaryExpression = 23, 
		RULE_multiplicativeExpression = 24, RULE_additiveExpression = 25, RULE_bitshiftExpression = 26, 
		RULE_comparisonExpression = 27, RULE_equalityExpression = 28, RULE_andExpression = 29, 
		RULE_orExpression = 30, RULE_ternaryExpression = 31, RULE_expression = 32, 
		RULE_pinAssignmentExpression = 33, RULE_pinStatusExpression = 34, RULE_identifier = 35, 
		RULE_tclib = 36, RULE_assignmentOperator = 37, RULE_pinVoltage = 38, RULE_pinStatus = 39;
	public static readonly string[] ruleNames = {
		"document", "include", "generalDeclaration", "setupDefinition", "updateDefinition", 
		"functionDefinition", "type", "parameterList", "parameter", "argumentList", 
		"argument", "declaration", "initialDeclaration", "compoundStatement", 
		"statement", "ifStatement", "loopStatement", "jumpStatement", "assignment", 
		"functionCall", "arrayContent", "primitiveExpression", "negativeExpression", 
		"unaryExpression", "multiplicativeExpression", "additiveExpression", "bitshiftExpression", 
		"comparisonExpression", "equalityExpression", "andExpression", "orExpression", 
		"ternaryExpression", "expression", "pinAssignmentExpression", "pinStatusExpression", 
		"identifier", "tclib", "assignmentOperator", "pinVoltage", "pinStatus"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, "'HIGH'", "'LOW'", "'INPUT'", "'OUTPUT'", "'dpin'", 
		"'apin'", "'int'", "'float'", "'string'", "'bool'", "'void'", "'char'", 
		"'update'", "'setup'", "'set'", "'to'", "'read'", "'write'", "'if'", "'else'", 
		"'while'", "'for'", "'continue'", "'break'", "'return'", "'include'", 
		"'?'", "'('", "')'", "'{'", "'}'", "'['", "']'", "';'", "'.'", "','", 
		"':'", "'true'", "'false'", "'\\n'", "'='", "'+='", "'*='", "'/='", "'%='", 
		"'-='", "'\"'", "'*'", "'/'", "'+'", "'-'", "'%'", "'&&'", "'||'", "'=='", 
		"'!='", "'>'", "'<'", "'>='", "'<='", "'!'", "'<<'", "'>>'", "'++'", "'--'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "Bool", "Whitespace", "VOLHIGH", "VOLLOW", "PININ", "PINOUT", "DPIN", 
		"APIN", "INT", "FLOAT", "STRING", "BOOL", "VOID", "CHAR", "UPDATE", "SETUP", 
		"SET", "TO", "READ", "WRITE", "IF", "ELSE", "WHILE", "FOR", "CONTINUE", 
		"BREAK", "RETURN", "INCLUDE", "QUESTION", "LPAR", "RPAR", "LCURLY", "RCURLY", 
		"LBRACKET", "RBRACKET", "SEMI", "DOT", "COMMA", "COLON", "TRUE", "FALSE", 
		"NEWLINE", "ASSIGN", "PLUSASSIGN", "MULTASSIGN", "DIVASSIGN", "MODASSIGN", 
		"MINUSASSIGN", "QUOTE", "MULT", "DIV", "PLUS", "MINUS", "MOD", "AND", 
		"OR", "EQ", "NEQ", "GT", "LT", "GTE", "LTE", "NOT", "BITSHIFTL", "BITSHIFTR", 
		"UNARYPLUS", "UNARYMINUS", "Identifier", "LibraryIdent", "String", "Numeral", 
		"IntNumeral", "BlockComment", "LineComment", "Newline"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "TinyCell.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static TinyCellParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public TinyCellParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public TinyCellParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class DocumentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SetupDefinitionContext setupDefinition() {
			return GetRuleContext<SetupDefinitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UpdateDefinitionContext updateDefinition() {
			return GetRuleContext<UpdateDefinitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IncludeContext[] include() {
			return GetRuleContexts<IncludeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IncludeContext include(int i) {
			return GetRuleContext<IncludeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GeneralDeclarationContext[] generalDeclaration() {
			return GetRuleContexts<GeneralDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public GeneralDeclarationContext generalDeclaration(int i) {
			return GetRuleContext<GeneralDeclarationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionDefinitionContext[] functionDefinition() {
			return GetRuleContexts<FunctionDefinitionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionDefinitionContext functionDefinition(int i) {
			return GetRuleContext<FunctionDefinitionContext>(i);
		}
		public DocumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_document; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITinyCellVisitor<TResult> typedVisitor = visitor as ITinyCellVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDocument(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DocumentContext document() {
		DocumentContext _localctx = new DocumentContext(Context, State);
		EnterRule(_localctx, 0, RULE_document);
		int _la;
		try {
			State = 100;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				{
				State = 83;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==INCLUDE) {
					{
					{
					State = 80;
					include();
					}
					}
					State = 85;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 89;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 16256L) != 0)) {
					{
					{
					State = 86;
					generalDeclaration();
					}
					}
					State = 91;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 92;
				setupDefinition();
				State = 93;
				updateDefinition();
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 96;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 95;
					functionDefinition();
					}
					}
					State = 98;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 16256L) != 0) );
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IncludeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INCLUDE() { return GetToken(TinyCellParser.INCLUDE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TclibContext tclib() {
			return GetRuleContext<TclibContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(TinyCellParser.SEMI, 0); }
		public IncludeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_include; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITinyCellVisitor<TResult> typedVisitor = visitor as ITinyCellVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInclude(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IncludeContext include() {
		IncludeContext _localctx = new IncludeContext(Context, State);
		EnterRule(_localctx, 2, RULE_include);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 102;
			Match(INCLUDE);
			State = 103;
			tclib();
			State = 104;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GeneralDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunctionDefinitionContext functionDefinition() {
			return GetRuleContext<FunctionDefinitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationContext declaration() {
			return GetRuleContext<DeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(TinyCellParser.SEMI, 0); }
		public GeneralDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_generalDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITinyCellVisitor<TResult> typedVisitor = visitor as ITinyCellVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGeneralDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GeneralDeclarationContext generalDeclaration() {
		GeneralDeclarationContext _localctx = new GeneralDeclarationContext(Context, State);
		EnterRule(_localctx, 4, RULE_generalDeclaration);
		try {
			State = 110;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 106;
				functionDefinition();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 107;
				declaration();
				State = 108;
				Match(SEMI);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SetupDefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SETUP() { return GetToken(TinyCellParser.SETUP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CompoundStatementContext compoundStatement() {
			return GetRuleContext<CompoundStatementContext>(0);
		}
		public SetupDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_setupDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITinyCellVisitor<TResult> typedVisitor = visitor as ITinyCellVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSetupDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SetupDefinitionContext setupDefinition() {
		SetupDefinitionContext _localctx = new SetupDefinitionContext(Context, State);
		EnterRule(_localctx, 6, RULE_setupDefinition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 112;
			Match(SETUP);
			State = 113;
			compoundStatement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UpdateDefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UPDATE() { return GetToken(TinyCellParser.UPDATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CompoundStatementContext compoundStatement() {
			return GetRuleContext<CompoundStatementContext>(0);
		}
		public UpdateDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_updateDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITinyCellVisitor<TResult> typedVisitor = visitor as ITinyCellVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUpdateDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UpdateDefinitionContext updateDefinition() {
		UpdateDefinitionContext _localctx = new UpdateDefinitionContext(Context, State);
		EnterRule(_localctx, 8, RULE_updateDefinition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 115;
			Match(UPDATE);
			State = 116;
			compoundStatement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionDefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAR() { return GetToken(TinyCellParser.LPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAR() { return GetToken(TinyCellParser.RPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CompoundStatementContext compoundStatement() {
			return GetRuleContext<CompoundStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(TinyCellParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ParameterListContext[] parameterList() {
			return GetRuleContexts<ParameterListContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParameterListContext parameterList(int i) {
			return GetRuleContext<ParameterListContext>(i);
		}
		public FunctionDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITinyCellVisitor<TResult> typedVisitor = visitor as ITinyCellVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionDefinitionContext functionDefinition() {
		FunctionDefinitionContext _localctx = new FunctionDefinitionContext(Context, State);
		EnterRule(_localctx, 10, RULE_functionDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 118;
			type();
			State = 119;
			identifier();
			State = 120;
			Match(LPAR);
			State = 124;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 16256L) != 0)) {
				{
				{
				State = 121;
				parameterList(0);
				}
				}
				State = 126;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 127;
			Match(RPAR);
			State = 130;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LCURLY:
				{
				State = 128;
				compoundStatement();
				}
				break;
			case SEMI:
				{
				State = 129;
				Match(SEMI);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VOID() { return GetToken(TinyCellParser.VOID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(TinyCellParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(TinyCellParser.INT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT() { return GetToken(TinyCellParser.FLOAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOL() { return GetToken(TinyCellParser.BOOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DPIN() { return GetToken(TinyCellParser.DPIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode APIN() { return GetToken(TinyCellParser.APIN, 0); }
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITinyCellVisitor<TResult> typedVisitor = visitor as ITinyCellVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(Context, State);
		EnterRule(_localctx, 12, RULE_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 132;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 16256L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ParameterContext parameter() {
			return GetRuleContext<ParameterContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParameterListContext parameterList() {
			return GetRuleContext<ParameterListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(TinyCellParser.COMMA, 0); }
		public ParameterListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameterList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITinyCellVisitor<TResult> typedVisitor = visitor as ITinyCellVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameterList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParameterListContext parameterList() {
		return parameterList(0);
	}

	private ParameterListContext parameterList(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ParameterListContext _localctx = new ParameterListContext(Context, _parentState);
		ParameterListContext _prevctx = _localctx;
		int _startState = 14;
		EnterRecursionRule(_localctx, 14, RULE_parameterList, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 135;
			parameter();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 142;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,7,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new ParameterListContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_parameterList);
					State = 137;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 138;
					Match(COMMA);
					State = 139;
					parameter();
					}
					} 
				}
				State = 144;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,7,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ParameterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITinyCellVisitor<TResult> typedVisitor = visitor as ITinyCellVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParameterContext parameter() {
		ParameterContext _localctx = new ParameterContext(Context, State);
		EnterRule(_localctx, 16, RULE_parameter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 145;
			type();
			State = 146;
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentContext argument() {
			return GetRuleContext<ArgumentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(TinyCellParser.COMMA, 0); }
		public ArgumentListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argumentList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITinyCellVisitor<TResult> typedVisitor = visitor as ITinyCellVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgumentList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentListContext argumentList() {
		return argumentList(0);
	}

	private ArgumentListContext argumentList(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ArgumentListContext _localctx = new ArgumentListContext(Context, _parentState);
		ArgumentListContext _prevctx = _localctx;
		int _startState = 18;
		EnterRecursionRule(_localctx, 18, RULE_argumentList, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 149;
			argument();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 156;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,8,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new ArgumentListContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_argumentList);
					State = 151;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 152;
					Match(COMMA);
					State = 153;
					argument();
					}
					} 
				}
				State = 158;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,8,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ArgumentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Numeral() { return GetToken(TinyCellParser.Numeral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode String() { return GetToken(TinyCellParser.String, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Bool() { return GetToken(TinyCellParser.Bool, 0); }
		public ArgumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argument; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITinyCellVisitor<TResult> typedVisitor = visitor as ITinyCellVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgument(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentContext argument() {
		ArgumentContext _localctx = new ArgumentContext(Context, State);
		EnterRule(_localctx, 20, RULE_argument);
		try {
			State = 164;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,9,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 159;
				identifier();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 160;
				functionCall();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 161;
				Match(Numeral);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 162;
				Match(String);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 163;
				Match(Bool);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InitialDeclarationContext initialDeclaration() {
			return GetRuleContext<InitialDeclarationContext>(0);
		}
		public DeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITinyCellVisitor<TResult> typedVisitor = visitor as ITinyCellVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationContext declaration() {
		DeclarationContext _localctx = new DeclarationContext(Context, State);
		EnterRule(_localctx, 22, RULE_declaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 166;
			type();
			State = 167;
			initialDeclaration();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InitialDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACKET() { return GetToken(TinyCellParser.LBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACKET() { return GetToken(TinyCellParser.RBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IntNumeral() { return GetToken(TinyCellParser.IntNumeral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(TinyCellParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		public InitialDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_initialDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITinyCellVisitor<TResult> typedVisitor = visitor as ITinyCellVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInitialDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InitialDeclarationContext initialDeclaration() {
		InitialDeclarationContext _localctx = new InitialDeclarationContext(Context, State);
		EnterRule(_localctx, 24, RULE_initialDeclaration);
		int _la;
		try {
			State = 192;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,15,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 169;
				identifier();
				State = 176;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LBRACKET) {
					{
					State = 170;
					Match(LBRACKET);
					State = 173;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case IntNumeral:
						{
						State = 171;
						Match(IntNumeral);
						}
						break;
					case Identifier:
						{
						State = 172;
						identifier();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 175;
					Match(RBRACKET);
					}
				}

				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 178;
				identifier();
				State = 185;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LBRACKET) {
					{
					State = 179;
					Match(LBRACKET);
					State = 182;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case IntNumeral:
						{
						State = 180;
						Match(IntNumeral);
						}
						break;
					case Identifier:
						{
						State = 181;
						identifier();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 184;
					Match(RBRACKET);
					}
				}

				State = 187;
				Match(ASSIGN);
				State = 190;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,14,Context) ) {
				case 1:
					{
					State = 188;
					expression();
					}
					break;
				case 2:
					{
					State = 189;
					functionCall();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CompoundStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LCURLY() { return GetToken(TinyCellParser.LCURLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RCURLY() { return GetToken(TinyCellParser.RCURLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public CompoundStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compoundStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITinyCellVisitor<TResult> typedVisitor = visitor as ITinyCellVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompoundStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompoundStatementContext compoundStatement() {
		CompoundStatementContext _localctx = new CompoundStatementContext(Context, State);
		EnterRule(_localctx, 26, RULE_compoundStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 194;
			Match(LCURLY);
			State = 198;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & -9214364831967461502L) != 0) || ((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & 55L) != 0)) {
				{
				{
				State = 195;
				statement();
				}
				}
				State = 200;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 201;
			Match(RCURLY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IfStatementContext ifStatement() {
			return GetRuleContext<IfStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LoopStatementContext loopStatement() {
			return GetRuleContext<LoopStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public JumpStatementContext jumpStatement() {
			return GetRuleContext<JumpStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationContext declaration() {
			return GetRuleContext<DeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(TinyCellParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PinStatusExpressionContext pinStatusExpression() {
			return GetRuleContext<PinStatusExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentContext assignment() {
			return GetRuleContext<AssignmentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITinyCellVisitor<TResult> typedVisitor = visitor as ITinyCellVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 28, RULE_statement);
		try {
			State = 221;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,17,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 203;
				ifStatement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 204;
				loopStatement();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 205;
				jumpStatement();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 206;
				declaration();
				State = 207;
				Match(SEMI);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 209;
				functionCall();
				State = 210;
				Match(SEMI);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 212;
				pinStatusExpression();
				State = 213;
				Match(SEMI);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 215;
				assignment();
				State = 216;
				Match(SEMI);
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 218;
				expression();
				State = 219;
				Match(SEMI);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(TinyCellParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAR() { return GetToken(TinyCellParser.LPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAR() { return GetToken(TinyCellParser.RPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CompoundStatementContext[] compoundStatement() {
			return GetRuleContexts<CompoundStatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CompoundStatementContext compoundStatement(int i) {
			return GetRuleContext<CompoundStatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(TinyCellParser.ELSE, 0); }
		public IfStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITinyCellVisitor<TResult> typedVisitor = visitor as ITinyCellVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfStatementContext ifStatement() {
		IfStatementContext _localctx = new IfStatementContext(Context, State);
		EnterRule(_localctx, 30, RULE_ifStatement);
		try {
			State = 237;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,18,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 223;
				Match(IF);
				State = 224;
				Match(LPAR);
				State = 225;
				expression();
				State = 226;
				Match(RPAR);
				State = 227;
				compoundStatement();
				State = 228;
				Match(ELSE);
				State = 229;
				compoundStatement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 231;
				Match(IF);
				State = 232;
				Match(LPAR);
				State = 233;
				expression();
				State = 234;
				Match(RPAR);
				State = 235;
				compoundStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LoopStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHILE() { return GetToken(TinyCellParser.WHILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAR() { return GetToken(TinyCellParser.LPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAR() { return GetToken(TinyCellParser.RPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CompoundStatementContext compoundStatement() {
			return GetRuleContext<CompoundStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(TinyCellParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SEMI() { return GetTokens(TinyCellParser.SEMI); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI(int i) {
			return GetToken(TinyCellParser.SEMI, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationContext declaration() {
			return GetRuleContext<DeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentContext assignment() {
			return GetRuleContext<AssignmentContext>(0);
		}
		public LoopStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loopStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITinyCellVisitor<TResult> typedVisitor = visitor as ITinyCellVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoopStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LoopStatementContext loopStatement() {
		LoopStatementContext _localctx = new LoopStatementContext(Context, State);
		EnterRule(_localctx, 32, RULE_loopStatement);
		try {
			State = 261;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case WHILE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 239;
				Match(WHILE);
				State = 240;
				Match(LPAR);
				State = 241;
				expression();
				State = 242;
				Match(RPAR);
				State = 243;
				compoundStatement();
				}
				break;
			case FOR:
				EnterOuterAlt(_localctx, 2);
				{
				State = 245;
				Match(FOR);
				State = 246;
				Match(LPAR);
				State = 249;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case Bool:
				case LPAR:
				case LCURLY:
				case MINUS:
				case NOT:
				case UNARYPLUS:
				case UNARYMINUS:
				case Identifier:
				case String:
				case Numeral:
					{
					State = 247;
					expression();
					}
					break;
				case DPIN:
				case APIN:
				case INT:
				case FLOAT:
				case STRING:
				case BOOL:
				case VOID:
					{
					State = 248;
					declaration();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 251;
				Match(SEMI);
				State = 252;
				expression();
				State = 253;
				Match(SEMI);
				State = 256;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,20,Context) ) {
				case 1:
					{
					State = 254;
					expression();
					}
					break;
				case 2:
					{
					State = 255;
					assignment();
					}
					break;
				}
				State = 258;
				Match(RPAR);
				State = 259;
				compoundStatement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class JumpStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONTINUE() { return GetToken(TinyCellParser.CONTINUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(TinyCellParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BREAK() { return GetToken(TinyCellParser.BREAK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURN() { return GetToken(TinyCellParser.RETURN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public JumpStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_jumpStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITinyCellVisitor<TResult> typedVisitor = visitor as ITinyCellVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJumpStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public JumpStatementContext jumpStatement() {
		JumpStatementContext _localctx = new JumpStatementContext(Context, State);
		EnterRule(_localctx, 34, RULE_jumpStatement);
		int _la;
		try {
			State = 272;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CONTINUE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 263;
				Match(CONTINUE);
				State = 264;
				Match(SEMI);
				}
				break;
			case BREAK:
				EnterOuterAlt(_localctx, 2);
				{
				State = 265;
				Match(BREAK);
				State = 266;
				Match(SEMI);
				}
				break;
			case RETURN:
				EnterOuterAlt(_localctx, 3);
				{
				State = 267;
				Match(RETURN);
				State = 269;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -9214364832231325694L) != 0) || ((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & 55L) != 0)) {
					{
					State = 268;
					expression();
					}
				}

				State = 271;
				Match(SEMI);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentOperatorContext assignmentOperator() {
			return GetRuleContext<AssignmentOperatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACKET() { return GetToken(TinyCellParser.LBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACKET() { return GetToken(TinyCellParser.RBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IntNumeral() { return GetToken(TinyCellParser.IntNumeral, 0); }
		public AssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITinyCellVisitor<TResult> typedVisitor = visitor as ITinyCellVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentContext assignment() {
		AssignmentContext _localctx = new AssignmentContext(Context, State);
		EnterRule(_localctx, 36, RULE_assignment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 274;
			identifier();
			{
			State = 275;
			Match(LBRACKET);
			State = 278;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IntNumeral:
				{
				State = 276;
				Match(IntNumeral);
				}
				break;
			case Identifier:
				{
				State = 277;
				identifier();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 280;
			Match(RBRACKET);
			}
			State = 282;
			assignmentOperator();
			State = 283;
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionCallContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAR() { return GetToken(TinyCellParser.LPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAR() { return GetToken(TinyCellParser.RPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentListContext[] argumentList() {
			return GetRuleContexts<ArgumentListContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentListContext argumentList(int i) {
			return GetRuleContext<ArgumentListContext>(i);
		}
		public FunctionCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionCall; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITinyCellVisitor<TResult> typedVisitor = visitor as ITinyCellVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionCallContext functionCall() {
		FunctionCallContext _localctx = new FunctionCallContext(Context, State);
		EnterRule(_localctx, 38, RULE_functionCall);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 285;
			identifier();
			State = 286;
			Match(LPAR);
			State = 290;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Bool || ((((_la - 68)) & ~0x3f) == 0 && ((1L << (_la - 68)) & 13L) != 0)) {
				{
				{
				State = 287;
				argumentList(0);
				}
				}
				State = 292;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 293;
			Match(RPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayContentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Numeral() { return GetToken(TinyCellParser.Numeral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode String() { return GetToken(TinyCellParser.String, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ArrayContentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayContent; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITinyCellVisitor<TResult> typedVisitor = visitor as ITinyCellVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayContent(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayContentContext arrayContent() {
		ArrayContentContext _localctx = new ArrayContentContext(Context, State);
		EnterRule(_localctx, 40, RULE_arrayContent);
		try {
			State = 298;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Numeral:
				EnterOuterAlt(_localctx, 1);
				{
				State = 295;
				Match(Numeral);
				}
				break;
			case String:
				EnterOuterAlt(_localctx, 2);
				{
				State = 296;
				Match(String);
				}
				break;
			case Identifier:
				EnterOuterAlt(_localctx, 3);
				{
				State = 297;
				identifier();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrimitiveExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Numeral() { return GetToken(TinyCellParser.Numeral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Bool() { return GetToken(TinyCellParser.Bool, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode String() { return GetToken(TinyCellParser.String, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LCURLY() { return GetToken(TinyCellParser.LCURLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArrayContentContext[] arrayContent() {
			return GetRuleContexts<ArrayContentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayContentContext arrayContent(int i) {
			return GetRuleContext<ArrayContentContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RCURLY() { return GetToken(TinyCellParser.RCURLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(TinyCellParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(TinyCellParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAR() { return GetToken(TinyCellParser.LPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAR() { return GetToken(TinyCellParser.RPAR, 0); }
		public PrimitiveExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primitiveExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITinyCellVisitor<TResult> typedVisitor = visitor as ITinyCellVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimitiveExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrimitiveExpressionContext primitiveExpression() {
		PrimitiveExpressionContext _localctx = new PrimitiveExpressionContext(Context, State);
		EnterRule(_localctx, 42, RULE_primitiveExpression);
		try {
			int _alt;
			State = 321;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,28,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 300;
				Match(Numeral);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 301;
				Match(Bool);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 302;
				Match(String);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 303;
				identifier();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 304;
				functionCall();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 305;
				Match(LCURLY);
				State = 311;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,27,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 306;
						arrayContent();
						State = 307;
						Match(COMMA);
						}
						} 
					}
					State = 313;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,27,Context);
				}
				State = 314;
				arrayContent();
				State = 315;
				Match(RCURLY);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 317;
				Match(LPAR);
				State = 318;
				expression();
				State = 319;
				Match(RPAR);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NegativeExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PrimitiveExpressionContext primitiveExpression() {
			return GetRuleContext<PrimitiveExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(TinyCellParser.MINUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Numeral() { return GetToken(TinyCellParser.Numeral, 0); }
		public NegativeExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_negativeExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITinyCellVisitor<TResult> typedVisitor = visitor as ITinyCellVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNegativeExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NegativeExpressionContext negativeExpression() {
		NegativeExpressionContext _localctx = new NegativeExpressionContext(Context, State);
		EnterRule(_localctx, 44, RULE_negativeExpression);
		try {
			State = 326;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Bool:
			case LPAR:
			case LCURLY:
			case Identifier:
			case String:
			case Numeral:
				EnterOuterAlt(_localctx, 1);
				{
				State = 323;
				primitiveExpression();
				}
				break;
			case MINUS:
				EnterOuterAlt(_localctx, 2);
				{
				State = 324;
				Match(MINUS);
				State = 325;
				Match(Numeral);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnaryExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NegativeExpressionContext negativeExpression() {
			return GetRuleContext<NegativeExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNARYPLUS() { return GetToken(TinyCellParser.UNARYPLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNARYMINUS() { return GetToken(TinyCellParser.UNARYMINUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(TinyCellParser.NOT, 0); }
		public UnaryExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unaryExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITinyCellVisitor<TResult> typedVisitor = visitor as ITinyCellVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnaryExpressionContext unaryExpression() {
		UnaryExpressionContext _localctx = new UnaryExpressionContext(Context, State);
		EnterRule(_localctx, 46, RULE_unaryExpression);
		try {
			State = 341;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,30,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 328;
				negativeExpression();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 329;
				identifier();
				State = 330;
				Match(UNARYPLUS);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 332;
				identifier();
				State = 333;
				Match(UNARYMINUS);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 335;
				Match(UNARYPLUS);
				State = 336;
				identifier();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 337;
				Match(UNARYMINUS);
				State = 338;
				identifier();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 339;
				Match(NOT);
				State = 340;
				negativeExpression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MultiplicativeExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public UnaryExpressionContext unaryExpression() {
			return GetRuleContext<UnaryExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MultiplicativeExpressionContext multiplicativeExpression() {
			return GetRuleContext<MultiplicativeExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULT() { return GetToken(TinyCellParser.MULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PrimitiveExpressionContext primitiveExpression() {
			return GetRuleContext<PrimitiveExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIV() { return GetToken(TinyCellParser.DIV, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MOD() { return GetToken(TinyCellParser.MOD, 0); }
		public MultiplicativeExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multiplicativeExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITinyCellVisitor<TResult> typedVisitor = visitor as ITinyCellVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiplicativeExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MultiplicativeExpressionContext multiplicativeExpression() {
		return multiplicativeExpression(0);
	}

	private MultiplicativeExpressionContext multiplicativeExpression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		MultiplicativeExpressionContext _localctx = new MultiplicativeExpressionContext(Context, _parentState);
		MultiplicativeExpressionContext _prevctx = _localctx;
		int _startState = 48;
		EnterRecursionRule(_localctx, 48, RULE_multiplicativeExpression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 344;
			unaryExpression();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 357;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,32,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 355;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,31,Context) ) {
					case 1:
						{
						_localctx = new MultiplicativeExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_multiplicativeExpression);
						State = 346;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 347;
						Match(MULT);
						State = 348;
						primitiveExpression();
						}
						break;
					case 2:
						{
						_localctx = new MultiplicativeExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_multiplicativeExpression);
						State = 349;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 350;
						Match(DIV);
						State = 351;
						primitiveExpression();
						}
						break;
					case 3:
						{
						_localctx = new MultiplicativeExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_multiplicativeExpression);
						State = 352;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 353;
						Match(MOD);
						State = 354;
						primitiveExpression();
						}
						break;
					}
					} 
				}
				State = 359;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,32,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class AdditiveExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public MultiplicativeExpressionContext multiplicativeExpression() {
			return GetRuleContext<MultiplicativeExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AdditiveExpressionContext additiveExpression() {
			return GetRuleContext<AdditiveExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(TinyCellParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(TinyCellParser.MINUS, 0); }
		public AdditiveExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_additiveExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITinyCellVisitor<TResult> typedVisitor = visitor as ITinyCellVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAdditiveExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AdditiveExpressionContext additiveExpression() {
		return additiveExpression(0);
	}

	private AdditiveExpressionContext additiveExpression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		AdditiveExpressionContext _localctx = new AdditiveExpressionContext(Context, _parentState);
		AdditiveExpressionContext _prevctx = _localctx;
		int _startState = 50;
		EnterRecursionRule(_localctx, 50, RULE_additiveExpression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 361;
			multiplicativeExpression(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 371;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,34,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 369;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,33,Context) ) {
					case 1:
						{
						_localctx = new AdditiveExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_additiveExpression);
						State = 363;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 364;
						Match(PLUS);
						State = 365;
						multiplicativeExpression(0);
						}
						break;
					case 2:
						{
						_localctx = new AdditiveExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_additiveExpression);
						State = 366;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 367;
						Match(MINUS);
						State = 368;
						multiplicativeExpression(0);
						}
						break;
					}
					} 
				}
				State = 373;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,34,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class BitshiftExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AdditiveExpressionContext additiveExpression() {
			return GetRuleContext<AdditiveExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BitshiftExpressionContext bitshiftExpression() {
			return GetRuleContext<BitshiftExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BITSHIFTL() { return GetToken(TinyCellParser.BITSHIFTL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BITSHIFTR() { return GetToken(TinyCellParser.BITSHIFTR, 0); }
		public BitshiftExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bitshiftExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITinyCellVisitor<TResult> typedVisitor = visitor as ITinyCellVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBitshiftExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BitshiftExpressionContext bitshiftExpression() {
		return bitshiftExpression(0);
	}

	private BitshiftExpressionContext bitshiftExpression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		BitshiftExpressionContext _localctx = new BitshiftExpressionContext(Context, _parentState);
		BitshiftExpressionContext _prevctx = _localctx;
		int _startState = 52;
		EnterRecursionRule(_localctx, 52, RULE_bitshiftExpression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 375;
			additiveExpression(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 385;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,36,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 383;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,35,Context) ) {
					case 1:
						{
						_localctx = new BitshiftExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_bitshiftExpression);
						State = 377;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 378;
						Match(BITSHIFTL);
						State = 379;
						additiveExpression(0);
						}
						break;
					case 2:
						{
						_localctx = new BitshiftExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_bitshiftExpression);
						State = 380;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 381;
						Match(BITSHIFTR);
						State = 382;
						additiveExpression(0);
						}
						break;
					}
					} 
				}
				State = 387;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,36,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ComparisonExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BitshiftExpressionContext bitshiftExpression() {
			return GetRuleContext<BitshiftExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ComparisonExpressionContext comparisonExpression() {
			return GetRuleContext<ComparisonExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT() { return GetToken(TinyCellParser.LT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT() { return GetToken(TinyCellParser.GT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LTE() { return GetToken(TinyCellParser.LTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GTE() { return GetToken(TinyCellParser.GTE, 0); }
		public ComparisonExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comparisonExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITinyCellVisitor<TResult> typedVisitor = visitor as ITinyCellVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComparisonExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ComparisonExpressionContext comparisonExpression() {
		return comparisonExpression(0);
	}

	private ComparisonExpressionContext comparisonExpression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ComparisonExpressionContext _localctx = new ComparisonExpressionContext(Context, _parentState);
		ComparisonExpressionContext _prevctx = _localctx;
		int _startState = 54;
		EnterRecursionRule(_localctx, 54, RULE_comparisonExpression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 389;
			bitshiftExpression(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 405;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,38,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 403;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,37,Context) ) {
					case 1:
						{
						_localctx = new ComparisonExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_comparisonExpression);
						State = 391;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 392;
						Match(LT);
						State = 393;
						bitshiftExpression(0);
						}
						break;
					case 2:
						{
						_localctx = new ComparisonExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_comparisonExpression);
						State = 394;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 395;
						Match(GT);
						State = 396;
						bitshiftExpression(0);
						}
						break;
					case 3:
						{
						_localctx = new ComparisonExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_comparisonExpression);
						State = 397;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 398;
						Match(LTE);
						State = 399;
						bitshiftExpression(0);
						}
						break;
					case 4:
						{
						_localctx = new ComparisonExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_comparisonExpression);
						State = 400;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 401;
						Match(GTE);
						State = 402;
						bitshiftExpression(0);
						}
						break;
					}
					} 
				}
				State = 407;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,38,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class EqualityExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ComparisonExpressionContext comparisonExpression() {
			return GetRuleContext<ComparisonExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EqualityExpressionContext equalityExpression() {
			return GetRuleContext<EqualityExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQ() { return GetToken(TinyCellParser.EQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEQ() { return GetToken(TinyCellParser.NEQ, 0); }
		public EqualityExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_equalityExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITinyCellVisitor<TResult> typedVisitor = visitor as ITinyCellVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEqualityExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EqualityExpressionContext equalityExpression() {
		return equalityExpression(0);
	}

	private EqualityExpressionContext equalityExpression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		EqualityExpressionContext _localctx = new EqualityExpressionContext(Context, _parentState);
		EqualityExpressionContext _prevctx = _localctx;
		int _startState = 56;
		EnterRecursionRule(_localctx, 56, RULE_equalityExpression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 409;
			comparisonExpression(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 419;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,40,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 417;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,39,Context) ) {
					case 1:
						{
						_localctx = new EqualityExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_equalityExpression);
						State = 411;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 412;
						Match(EQ);
						State = 413;
						comparisonExpression(0);
						}
						break;
					case 2:
						{
						_localctx = new EqualityExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_equalityExpression);
						State = 414;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 415;
						Match(NEQ);
						State = 416;
						comparisonExpression(0);
						}
						break;
					}
					} 
				}
				State = 421;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,40,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class AndExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public EqualityExpressionContext equalityExpression() {
			return GetRuleContext<EqualityExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AndExpressionContext andExpression() {
			return GetRuleContext<AndExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND() { return GetToken(TinyCellParser.AND, 0); }
		public AndExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_andExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITinyCellVisitor<TResult> typedVisitor = visitor as ITinyCellVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAndExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AndExpressionContext andExpression() {
		return andExpression(0);
	}

	private AndExpressionContext andExpression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		AndExpressionContext _localctx = new AndExpressionContext(Context, _parentState);
		AndExpressionContext _prevctx = _localctx;
		int _startState = 58;
		EnterRecursionRule(_localctx, 58, RULE_andExpression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 423;
			equalityExpression(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 430;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,41,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new AndExpressionContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_andExpression);
					State = 425;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 426;
					Match(AND);
					State = 427;
					equalityExpression(0);
					}
					} 
				}
				State = 432;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,41,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class OrExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AndExpressionContext andExpression() {
			return GetRuleContext<AndExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OrExpressionContext orExpression() {
			return GetRuleContext<OrExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR() { return GetToken(TinyCellParser.OR, 0); }
		public OrExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_orExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITinyCellVisitor<TResult> typedVisitor = visitor as ITinyCellVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOrExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OrExpressionContext orExpression() {
		return orExpression(0);
	}

	private OrExpressionContext orExpression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		OrExpressionContext _localctx = new OrExpressionContext(Context, _parentState);
		OrExpressionContext _prevctx = _localctx;
		int _startState = 60;
		EnterRecursionRule(_localctx, 60, RULE_orExpression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 434;
			andExpression(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 441;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,42,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new OrExpressionContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_orExpression);
					State = 436;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 437;
					Match(OR);
					State = 438;
					andExpression(0);
					}
					} 
				}
				State = 443;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,42,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class TernaryExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public OrExpressionContext orExpression() {
			return GetRuleContext<OrExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUESTION() { return GetToken(TinyCellParser.QUESTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(TinyCellParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallContext[] functionCall() {
			return GetRuleContexts<FunctionCallContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallContext functionCall(int i) {
			return GetRuleContext<FunctionCallContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentContext[] assignment() {
			return GetRuleContexts<AssignmentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentContext assignment(int i) {
			return GetRuleContext<AssignmentContext>(i);
		}
		public TernaryExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ternaryExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITinyCellVisitor<TResult> typedVisitor = visitor as ITinyCellVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTernaryExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TernaryExpressionContext ternaryExpression() {
		TernaryExpressionContext _localctx = new TernaryExpressionContext(Context, State);
		EnterRule(_localctx, 62, RULE_ternaryExpression);
		try {
			State = 458;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,45,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 444;
				orExpression(0);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 445;
				orExpression(0);
				State = 446;
				Match(QUESTION);
				State = 450;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,43,Context) ) {
				case 1:
					{
					State = 447;
					expression();
					}
					break;
				case 2:
					{
					State = 448;
					functionCall();
					}
					break;
				case 3:
					{
					State = 449;
					assignment();
					}
					break;
				}
				State = 452;
				Match(COLON);
				State = 456;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,44,Context) ) {
				case 1:
					{
					State = 453;
					expression();
					}
					break;
				case 2:
					{
					State = 454;
					functionCall();
					}
					break;
				case 3:
					{
					State = 455;
					assignment();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TernaryExpressionContext ternaryExpression() {
			return GetRuleContext<TernaryExpressionContext>(0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITinyCellVisitor<TResult> typedVisitor = visitor as ITinyCellVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(Context, State);
		EnterRule(_localctx, 64, RULE_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 460;
			ternaryExpression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PinAssignmentExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WRITE() { return GetToken(TinyCellParser.WRITE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(TinyCellParser.TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PinVoltageContext pinVoltage() {
			return GetRuleContext<PinVoltageContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Bool() { return GetToken(TinyCellParser.Bool, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Numeral() { return GetTokens(TinyCellParser.Numeral); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Numeral(int i) {
			return GetToken(TinyCellParser.Numeral, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode READ() { return GetToken(TinyCellParser.READ, 0); }
		public PinAssignmentExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pinAssignmentExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITinyCellVisitor<TResult> typedVisitor = visitor as ITinyCellVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPinAssignmentExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PinAssignmentExpressionContext pinAssignmentExpression() {
		PinAssignmentExpressionContext _localctx = new PinAssignmentExpressionContext(Context, State);
		EnterRule(_localctx, 66, RULE_pinAssignmentExpression);
		try {
			State = 481;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case WRITE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 462;
				Match(WRITE);
				State = 467;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case VOLHIGH:
				case VOLLOW:
					{
					State = 463;
					pinVoltage();
					}
					break;
				case Bool:
					{
					State = 464;
					Match(Bool);
					}
					break;
				case Identifier:
					{
					State = 465;
					identifier();
					}
					break;
				case Numeral:
					{
					State = 466;
					Match(Numeral);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 469;
				Match(TO);
				State = 472;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case Identifier:
					{
					State = 470;
					identifier();
					}
					break;
				case Numeral:
					{
					State = 471;
					Match(Numeral);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case READ:
				EnterOuterAlt(_localctx, 2);
				{
				State = 474;
				Match(READ);
				State = 477;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case Identifier:
					{
					State = 475;
					identifier();
					}
					break;
				case Numeral:
					{
					State = 476;
					Match(Numeral);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 479;
				Match(TO);
				State = 480;
				identifier();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PinStatusExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PinAssignmentExpressionContext pinAssignmentExpression() {
			return GetRuleContext<PinAssignmentExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(TinyCellParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(TinyCellParser.TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PinStatusContext pinStatus() {
			return GetRuleContext<PinStatusContext>(0);
		}
		public PinStatusExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pinStatusExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITinyCellVisitor<TResult> typedVisitor = visitor as ITinyCellVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPinStatusExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PinStatusExpressionContext pinStatusExpression() {
		PinStatusExpressionContext _localctx = new PinStatusExpressionContext(Context, State);
		EnterRule(_localctx, 68, RULE_pinStatusExpression);
		try {
			State = 489;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case READ:
			case WRITE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 483;
				pinAssignmentExpression();
				}
				break;
			case SET:
				EnterOuterAlt(_localctx, 2);
				{
				State = 484;
				Match(SET);
				State = 485;
				identifier();
				State = 486;
				Match(TO);
				State = 487;
				pinStatus();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(TinyCellParser.Identifier, 0); }
		public IdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITinyCellVisitor<TResult> typedVisitor = visitor as ITinyCellVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierContext identifier() {
		IdentifierContext _localctx = new IdentifierContext(Context, State);
		EnterRule(_localctx, 70, RULE_identifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 491;
			Match(Identifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TclibContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LibraryIdent() { return GetToken(TinyCellParser.LibraryIdent, 0); }
		public TclibContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tclib; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITinyCellVisitor<TResult> typedVisitor = visitor as ITinyCellVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTclib(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TclibContext tclib() {
		TclibContext _localctx = new TclibContext(Context, State);
		EnterRule(_localctx, 72, RULE_tclib);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 493;
			Match(LibraryIdent);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentOperatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(TinyCellParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULTASSIGN() { return GetToken(TinyCellParser.MULTASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIVASSIGN() { return GetToken(TinyCellParser.DIVASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MODASSIGN() { return GetToken(TinyCellParser.MODASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUSASSIGN() { return GetToken(TinyCellParser.PLUSASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUSASSIGN() { return GetToken(TinyCellParser.MINUSASSIGN, 0); }
		public AssignmentOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignmentOperator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITinyCellVisitor<TResult> typedVisitor = visitor as ITinyCellVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignmentOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentOperatorContext assignmentOperator() {
		AssignmentOperatorContext _localctx = new AssignmentOperatorContext(Context, State);
		EnterRule(_localctx, 74, RULE_assignmentOperator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 495;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 554153860399104L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PinVoltageContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VOLHIGH() { return GetToken(TinyCellParser.VOLHIGH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VOLLOW() { return GetToken(TinyCellParser.VOLLOW, 0); }
		public PinVoltageContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pinVoltage; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITinyCellVisitor<TResult> typedVisitor = visitor as ITinyCellVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPinVoltage(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PinVoltageContext pinVoltage() {
		PinVoltageContext _localctx = new PinVoltageContext(Context, State);
		EnterRule(_localctx, 76, RULE_pinVoltage);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 497;
			_la = TokenStream.LA(1);
			if ( !(_la==VOLHIGH || _la==VOLLOW) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PinStatusContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PININ() { return GetToken(TinyCellParser.PININ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PINOUT() { return GetToken(TinyCellParser.PINOUT, 0); }
		public PinStatusContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pinStatus; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITinyCellVisitor<TResult> typedVisitor = visitor as ITinyCellVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPinStatus(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PinStatusContext pinStatus() {
		PinStatusContext _localctx = new PinStatusContext(Context, State);
		EnterRule(_localctx, 78, RULE_pinStatus);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 499;
			_la = TokenStream.LA(1);
			if ( !(_la==PININ || _la==PINOUT) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 7: return parameterList_sempred((ParameterListContext)_localctx, predIndex);
		case 9: return argumentList_sempred((ArgumentListContext)_localctx, predIndex);
		case 24: return multiplicativeExpression_sempred((MultiplicativeExpressionContext)_localctx, predIndex);
		case 25: return additiveExpression_sempred((AdditiveExpressionContext)_localctx, predIndex);
		case 26: return bitshiftExpression_sempred((BitshiftExpressionContext)_localctx, predIndex);
		case 27: return comparisonExpression_sempred((ComparisonExpressionContext)_localctx, predIndex);
		case 28: return equalityExpression_sempred((EqualityExpressionContext)_localctx, predIndex);
		case 29: return andExpression_sempred((AndExpressionContext)_localctx, predIndex);
		case 30: return orExpression_sempred((OrExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool parameterList_sempred(ParameterListContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 1);
		}
		return true;
	}
	private bool argumentList_sempred(ArgumentListContext _localctx, int predIndex) {
		switch (predIndex) {
		case 1: return Precpred(Context, 1);
		}
		return true;
	}
	private bool multiplicativeExpression_sempred(MultiplicativeExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 2: return Precpred(Context, 3);
		case 3: return Precpred(Context, 2);
		case 4: return Precpred(Context, 1);
		}
		return true;
	}
	private bool additiveExpression_sempred(AdditiveExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 5: return Precpred(Context, 2);
		case 6: return Precpred(Context, 1);
		}
		return true;
	}
	private bool bitshiftExpression_sempred(BitshiftExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 7: return Precpred(Context, 2);
		case 8: return Precpred(Context, 1);
		}
		return true;
	}
	private bool comparisonExpression_sempred(ComparisonExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 9: return Precpred(Context, 4);
		case 10: return Precpred(Context, 3);
		case 11: return Precpred(Context, 2);
		case 12: return Precpred(Context, 1);
		}
		return true;
	}
	private bool equalityExpression_sempred(EqualityExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 13: return Precpred(Context, 2);
		case 14: return Precpred(Context, 1);
		}
		return true;
	}
	private bool andExpression_sempred(AndExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 15: return Precpred(Context, 1);
		}
		return true;
	}
	private bool orExpression_sempred(OrExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 16: return Precpred(Context, 1);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,75,502,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,
		2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,1,0,5,0,82,8,0,10,0,12,0,85,9,
		0,1,0,5,0,88,8,0,10,0,12,0,91,9,0,1,0,1,0,1,0,1,0,4,0,97,8,0,11,0,12,0,
		98,3,0,101,8,0,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,3,2,111,8,2,1,3,1,3,1,3,
		1,4,1,4,1,4,1,5,1,5,1,5,1,5,5,5,123,8,5,10,5,12,5,126,9,5,1,5,1,5,1,5,
		3,5,131,8,5,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,7,5,7,141,8,7,10,7,12,7,144,
		9,7,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,9,5,9,155,8,9,10,9,12,9,158,9,9,
		1,10,1,10,1,10,1,10,1,10,3,10,165,8,10,1,11,1,11,1,11,1,12,1,12,1,12,1,
		12,3,12,174,8,12,1,12,3,12,177,8,12,1,12,1,12,1,12,1,12,3,12,183,8,12,
		1,12,3,12,186,8,12,1,12,1,12,1,12,3,12,191,8,12,3,12,193,8,12,1,13,1,13,
		5,13,197,8,13,10,13,12,13,200,9,13,1,13,1,13,1,14,1,14,1,14,1,14,1,14,
		1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,3,14,
		222,8,14,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,
		15,1,15,3,15,238,8,15,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,
		3,16,250,8,16,1,16,1,16,1,16,1,16,1,16,3,16,257,8,16,1,16,1,16,1,16,3,
		16,262,8,16,1,17,1,17,1,17,1,17,1,17,1,17,3,17,270,8,17,1,17,3,17,273,
		8,17,1,18,1,18,1,18,1,18,3,18,279,8,18,1,18,1,18,1,18,1,18,1,18,1,19,1,
		19,1,19,5,19,289,8,19,10,19,12,19,292,9,19,1,19,1,19,1,20,1,20,1,20,3,
		20,299,8,20,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,5,21,310,8,21,
		10,21,12,21,313,9,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,3,21,322,8,21,
		1,22,1,22,1,22,3,22,327,8,22,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,
		23,1,23,1,23,1,23,1,23,3,23,342,8,23,1,24,1,24,1,24,1,24,1,24,1,24,1,24,
		1,24,1,24,1,24,1,24,1,24,5,24,356,8,24,10,24,12,24,359,9,24,1,25,1,25,
		1,25,1,25,1,25,1,25,1,25,1,25,1,25,5,25,370,8,25,10,25,12,25,373,9,25,
		1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,5,26,384,8,26,10,26,12,26,
		387,9,26,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,
		27,1,27,1,27,5,27,404,8,27,10,27,12,27,407,9,27,1,28,1,28,1,28,1,28,1,
		28,1,28,1,28,1,28,1,28,5,28,418,8,28,10,28,12,28,421,9,28,1,29,1,29,1,
		29,1,29,1,29,1,29,5,29,429,8,29,10,29,12,29,432,9,29,1,30,1,30,1,30,1,
		30,1,30,1,30,5,30,440,8,30,10,30,12,30,443,9,30,1,31,1,31,1,31,1,31,1,
		31,1,31,3,31,451,8,31,1,31,1,31,1,31,1,31,3,31,457,8,31,3,31,459,8,31,
		1,32,1,32,1,33,1,33,1,33,1,33,1,33,3,33,468,8,33,1,33,1,33,1,33,3,33,473,
		8,33,1,33,1,33,1,33,3,33,478,8,33,1,33,1,33,3,33,482,8,33,1,34,1,34,1,
		34,1,34,1,34,1,34,3,34,490,8,34,1,35,1,35,1,36,1,36,1,37,1,37,1,38,1,38,
		1,39,1,39,1,39,0,9,14,18,48,50,52,54,56,58,60,40,0,2,4,6,8,10,12,14,16,
		18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,
		66,68,70,72,74,76,78,0,4,1,0,7,13,1,0,43,48,1,0,3,4,1,0,5,6,539,0,100,
		1,0,0,0,2,102,1,0,0,0,4,110,1,0,0,0,6,112,1,0,0,0,8,115,1,0,0,0,10,118,
		1,0,0,0,12,132,1,0,0,0,14,134,1,0,0,0,16,145,1,0,0,0,18,148,1,0,0,0,20,
		164,1,0,0,0,22,166,1,0,0,0,24,192,1,0,0,0,26,194,1,0,0,0,28,221,1,0,0,
		0,30,237,1,0,0,0,32,261,1,0,0,0,34,272,1,0,0,0,36,274,1,0,0,0,38,285,1,
		0,0,0,40,298,1,0,0,0,42,321,1,0,0,0,44,326,1,0,0,0,46,341,1,0,0,0,48,343,
		1,0,0,0,50,360,1,0,0,0,52,374,1,0,0,0,54,388,1,0,0,0,56,408,1,0,0,0,58,
		422,1,0,0,0,60,433,1,0,0,0,62,458,1,0,0,0,64,460,1,0,0,0,66,481,1,0,0,
		0,68,489,1,0,0,0,70,491,1,0,0,0,72,493,1,0,0,0,74,495,1,0,0,0,76,497,1,
		0,0,0,78,499,1,0,0,0,80,82,3,2,1,0,81,80,1,0,0,0,82,85,1,0,0,0,83,81,1,
		0,0,0,83,84,1,0,0,0,84,89,1,0,0,0,85,83,1,0,0,0,86,88,3,4,2,0,87,86,1,
		0,0,0,88,91,1,0,0,0,89,87,1,0,0,0,89,90,1,0,0,0,90,92,1,0,0,0,91,89,1,
		0,0,0,92,93,3,6,3,0,93,94,3,8,4,0,94,101,1,0,0,0,95,97,3,10,5,0,96,95,
		1,0,0,0,97,98,1,0,0,0,98,96,1,0,0,0,98,99,1,0,0,0,99,101,1,0,0,0,100,83,
		1,0,0,0,100,96,1,0,0,0,101,1,1,0,0,0,102,103,5,28,0,0,103,104,3,72,36,
		0,104,105,5,36,0,0,105,3,1,0,0,0,106,111,3,10,5,0,107,108,3,22,11,0,108,
		109,5,36,0,0,109,111,1,0,0,0,110,106,1,0,0,0,110,107,1,0,0,0,111,5,1,0,
		0,0,112,113,5,16,0,0,113,114,3,26,13,0,114,7,1,0,0,0,115,116,5,15,0,0,
		116,117,3,26,13,0,117,9,1,0,0,0,118,119,3,12,6,0,119,120,3,70,35,0,120,
		124,5,30,0,0,121,123,3,14,7,0,122,121,1,0,0,0,123,126,1,0,0,0,124,122,
		1,0,0,0,124,125,1,0,0,0,125,127,1,0,0,0,126,124,1,0,0,0,127,130,5,31,0,
		0,128,131,3,26,13,0,129,131,5,36,0,0,130,128,1,0,0,0,130,129,1,0,0,0,131,
		11,1,0,0,0,132,133,7,0,0,0,133,13,1,0,0,0,134,135,6,7,-1,0,135,136,3,16,
		8,0,136,142,1,0,0,0,137,138,10,1,0,0,138,139,5,38,0,0,139,141,3,16,8,0,
		140,137,1,0,0,0,141,144,1,0,0,0,142,140,1,0,0,0,142,143,1,0,0,0,143,15,
		1,0,0,0,144,142,1,0,0,0,145,146,3,12,6,0,146,147,3,70,35,0,147,17,1,0,
		0,0,148,149,6,9,-1,0,149,150,3,20,10,0,150,156,1,0,0,0,151,152,10,1,0,
		0,152,153,5,38,0,0,153,155,3,20,10,0,154,151,1,0,0,0,155,158,1,0,0,0,156,
		154,1,0,0,0,156,157,1,0,0,0,157,19,1,0,0,0,158,156,1,0,0,0,159,165,3,70,
		35,0,160,165,3,38,19,0,161,165,5,71,0,0,162,165,5,70,0,0,163,165,5,1,0,
		0,164,159,1,0,0,0,164,160,1,0,0,0,164,161,1,0,0,0,164,162,1,0,0,0,164,
		163,1,0,0,0,165,21,1,0,0,0,166,167,3,12,6,0,167,168,3,24,12,0,168,23,1,
		0,0,0,169,176,3,70,35,0,170,173,5,34,0,0,171,174,5,72,0,0,172,174,3,70,
		35,0,173,171,1,0,0,0,173,172,1,0,0,0,174,175,1,0,0,0,175,177,5,35,0,0,
		176,170,1,0,0,0,176,177,1,0,0,0,177,193,1,0,0,0,178,185,3,70,35,0,179,
		182,5,34,0,0,180,183,5,72,0,0,181,183,3,70,35,0,182,180,1,0,0,0,182,181,
		1,0,0,0,183,184,1,0,0,0,184,186,5,35,0,0,185,179,1,0,0,0,185,186,1,0,0,
		0,186,187,1,0,0,0,187,190,5,43,0,0,188,191,3,64,32,0,189,191,3,38,19,0,
		190,188,1,0,0,0,190,189,1,0,0,0,191,193,1,0,0,0,192,169,1,0,0,0,192,178,
		1,0,0,0,193,25,1,0,0,0,194,198,5,32,0,0,195,197,3,28,14,0,196,195,1,0,
		0,0,197,200,1,0,0,0,198,196,1,0,0,0,198,199,1,0,0,0,199,201,1,0,0,0,200,
		198,1,0,0,0,201,202,5,33,0,0,202,27,1,0,0,0,203,222,3,30,15,0,204,222,
		3,32,16,0,205,222,3,34,17,0,206,207,3,22,11,0,207,208,5,36,0,0,208,222,
		1,0,0,0,209,210,3,38,19,0,210,211,5,36,0,0,211,222,1,0,0,0,212,213,3,68,
		34,0,213,214,5,36,0,0,214,222,1,0,0,0,215,216,3,36,18,0,216,217,5,36,0,
		0,217,222,1,0,0,0,218,219,3,64,32,0,219,220,5,36,0,0,220,222,1,0,0,0,221,
		203,1,0,0,0,221,204,1,0,0,0,221,205,1,0,0,0,221,206,1,0,0,0,221,209,1,
		0,0,0,221,212,1,0,0,0,221,215,1,0,0,0,221,218,1,0,0,0,222,29,1,0,0,0,223,
		224,5,21,0,0,224,225,5,30,0,0,225,226,3,64,32,0,226,227,5,31,0,0,227,228,
		3,26,13,0,228,229,5,22,0,0,229,230,3,26,13,0,230,238,1,0,0,0,231,232,5,
		21,0,0,232,233,5,30,0,0,233,234,3,64,32,0,234,235,5,31,0,0,235,236,3,26,
		13,0,236,238,1,0,0,0,237,223,1,0,0,0,237,231,1,0,0,0,238,31,1,0,0,0,239,
		240,5,23,0,0,240,241,5,30,0,0,241,242,3,64,32,0,242,243,5,31,0,0,243,244,
		3,26,13,0,244,262,1,0,0,0,245,246,5,24,0,0,246,249,5,30,0,0,247,250,3,
		64,32,0,248,250,3,22,11,0,249,247,1,0,0,0,249,248,1,0,0,0,250,251,1,0,
		0,0,251,252,5,36,0,0,252,253,3,64,32,0,253,256,5,36,0,0,254,257,3,64,32,
		0,255,257,3,36,18,0,256,254,1,0,0,0,256,255,1,0,0,0,257,258,1,0,0,0,258,
		259,5,31,0,0,259,260,3,26,13,0,260,262,1,0,0,0,261,239,1,0,0,0,261,245,
		1,0,0,0,262,33,1,0,0,0,263,264,5,25,0,0,264,273,5,36,0,0,265,266,5,26,
		0,0,266,273,5,36,0,0,267,269,5,27,0,0,268,270,3,64,32,0,269,268,1,0,0,
		0,269,270,1,0,0,0,270,271,1,0,0,0,271,273,5,36,0,0,272,263,1,0,0,0,272,
		265,1,0,0,0,272,267,1,0,0,0,273,35,1,0,0,0,274,275,3,70,35,0,275,278,5,
		34,0,0,276,279,5,72,0,0,277,279,3,70,35,0,278,276,1,0,0,0,278,277,1,0,
		0,0,279,280,1,0,0,0,280,281,5,35,0,0,281,282,1,0,0,0,282,283,3,74,37,0,
		283,284,3,64,32,0,284,37,1,0,0,0,285,286,3,70,35,0,286,290,5,30,0,0,287,
		289,3,18,9,0,288,287,1,0,0,0,289,292,1,0,0,0,290,288,1,0,0,0,290,291,1,
		0,0,0,291,293,1,0,0,0,292,290,1,0,0,0,293,294,5,31,0,0,294,39,1,0,0,0,
		295,299,5,71,0,0,296,299,5,70,0,0,297,299,3,70,35,0,298,295,1,0,0,0,298,
		296,1,0,0,0,298,297,1,0,0,0,299,41,1,0,0,0,300,322,5,71,0,0,301,322,5,
		1,0,0,302,322,5,70,0,0,303,322,3,70,35,0,304,322,3,38,19,0,305,311,5,32,
		0,0,306,307,3,40,20,0,307,308,5,38,0,0,308,310,1,0,0,0,309,306,1,0,0,0,
		310,313,1,0,0,0,311,309,1,0,0,0,311,312,1,0,0,0,312,314,1,0,0,0,313,311,
		1,0,0,0,314,315,3,40,20,0,315,316,5,33,0,0,316,322,1,0,0,0,317,318,5,30,
		0,0,318,319,3,64,32,0,319,320,5,31,0,0,320,322,1,0,0,0,321,300,1,0,0,0,
		321,301,1,0,0,0,321,302,1,0,0,0,321,303,1,0,0,0,321,304,1,0,0,0,321,305,
		1,0,0,0,321,317,1,0,0,0,322,43,1,0,0,0,323,327,3,42,21,0,324,325,5,53,
		0,0,325,327,5,71,0,0,326,323,1,0,0,0,326,324,1,0,0,0,327,45,1,0,0,0,328,
		342,3,44,22,0,329,330,3,70,35,0,330,331,5,66,0,0,331,342,1,0,0,0,332,333,
		3,70,35,0,333,334,5,67,0,0,334,342,1,0,0,0,335,336,5,66,0,0,336,342,3,
		70,35,0,337,338,5,67,0,0,338,342,3,70,35,0,339,340,5,63,0,0,340,342,3,
		44,22,0,341,328,1,0,0,0,341,329,1,0,0,0,341,332,1,0,0,0,341,335,1,0,0,
		0,341,337,1,0,0,0,341,339,1,0,0,0,342,47,1,0,0,0,343,344,6,24,-1,0,344,
		345,3,46,23,0,345,357,1,0,0,0,346,347,10,3,0,0,347,348,5,50,0,0,348,356,
		3,42,21,0,349,350,10,2,0,0,350,351,5,51,0,0,351,356,3,42,21,0,352,353,
		10,1,0,0,353,354,5,54,0,0,354,356,3,42,21,0,355,346,1,0,0,0,355,349,1,
		0,0,0,355,352,1,0,0,0,356,359,1,0,0,0,357,355,1,0,0,0,357,358,1,0,0,0,
		358,49,1,0,0,0,359,357,1,0,0,0,360,361,6,25,-1,0,361,362,3,48,24,0,362,
		371,1,0,0,0,363,364,10,2,0,0,364,365,5,52,0,0,365,370,3,48,24,0,366,367,
		10,1,0,0,367,368,5,53,0,0,368,370,3,48,24,0,369,363,1,0,0,0,369,366,1,
		0,0,0,370,373,1,0,0,0,371,369,1,0,0,0,371,372,1,0,0,0,372,51,1,0,0,0,373,
		371,1,0,0,0,374,375,6,26,-1,0,375,376,3,50,25,0,376,385,1,0,0,0,377,378,
		10,2,0,0,378,379,5,64,0,0,379,384,3,50,25,0,380,381,10,1,0,0,381,382,5,
		65,0,0,382,384,3,50,25,0,383,377,1,0,0,0,383,380,1,0,0,0,384,387,1,0,0,
		0,385,383,1,0,0,0,385,386,1,0,0,0,386,53,1,0,0,0,387,385,1,0,0,0,388,389,
		6,27,-1,0,389,390,3,52,26,0,390,405,1,0,0,0,391,392,10,4,0,0,392,393,5,
		60,0,0,393,404,3,52,26,0,394,395,10,3,0,0,395,396,5,59,0,0,396,404,3,52,
		26,0,397,398,10,2,0,0,398,399,5,62,0,0,399,404,3,52,26,0,400,401,10,1,
		0,0,401,402,5,61,0,0,402,404,3,52,26,0,403,391,1,0,0,0,403,394,1,0,0,0,
		403,397,1,0,0,0,403,400,1,0,0,0,404,407,1,0,0,0,405,403,1,0,0,0,405,406,
		1,0,0,0,406,55,1,0,0,0,407,405,1,0,0,0,408,409,6,28,-1,0,409,410,3,54,
		27,0,410,419,1,0,0,0,411,412,10,2,0,0,412,413,5,57,0,0,413,418,3,54,27,
		0,414,415,10,1,0,0,415,416,5,58,0,0,416,418,3,54,27,0,417,411,1,0,0,0,
		417,414,1,0,0,0,418,421,1,0,0,0,419,417,1,0,0,0,419,420,1,0,0,0,420,57,
		1,0,0,0,421,419,1,0,0,0,422,423,6,29,-1,0,423,424,3,56,28,0,424,430,1,
		0,0,0,425,426,10,1,0,0,426,427,5,55,0,0,427,429,3,56,28,0,428,425,1,0,
		0,0,429,432,1,0,0,0,430,428,1,0,0,0,430,431,1,0,0,0,431,59,1,0,0,0,432,
		430,1,0,0,0,433,434,6,30,-1,0,434,435,3,58,29,0,435,441,1,0,0,0,436,437,
		10,1,0,0,437,438,5,56,0,0,438,440,3,58,29,0,439,436,1,0,0,0,440,443,1,
		0,0,0,441,439,1,0,0,0,441,442,1,0,0,0,442,61,1,0,0,0,443,441,1,0,0,0,444,
		459,3,60,30,0,445,446,3,60,30,0,446,450,5,29,0,0,447,451,3,64,32,0,448,
		451,3,38,19,0,449,451,3,36,18,0,450,447,1,0,0,0,450,448,1,0,0,0,450,449,
		1,0,0,0,451,452,1,0,0,0,452,456,5,39,0,0,453,457,3,64,32,0,454,457,3,38,
		19,0,455,457,3,36,18,0,456,453,1,0,0,0,456,454,1,0,0,0,456,455,1,0,0,0,
		457,459,1,0,0,0,458,444,1,0,0,0,458,445,1,0,0,0,459,63,1,0,0,0,460,461,
		3,62,31,0,461,65,1,0,0,0,462,467,5,20,0,0,463,468,3,76,38,0,464,468,5,
		1,0,0,465,468,3,70,35,0,466,468,5,71,0,0,467,463,1,0,0,0,467,464,1,0,0,
		0,467,465,1,0,0,0,467,466,1,0,0,0,468,469,1,0,0,0,469,472,5,18,0,0,470,
		473,3,70,35,0,471,473,5,71,0,0,472,470,1,0,0,0,472,471,1,0,0,0,473,482,
		1,0,0,0,474,477,5,19,0,0,475,478,3,70,35,0,476,478,5,71,0,0,477,475,1,
		0,0,0,477,476,1,0,0,0,478,479,1,0,0,0,479,480,5,18,0,0,480,482,3,70,35,
		0,481,462,1,0,0,0,481,474,1,0,0,0,482,67,1,0,0,0,483,490,3,66,33,0,484,
		485,5,17,0,0,485,486,3,70,35,0,486,487,5,18,0,0,487,488,3,78,39,0,488,
		490,1,0,0,0,489,483,1,0,0,0,489,484,1,0,0,0,490,69,1,0,0,0,491,492,5,68,
		0,0,492,71,1,0,0,0,493,494,5,69,0,0,494,73,1,0,0,0,495,496,7,1,0,0,496,
		75,1,0,0,0,497,498,7,2,0,0,498,77,1,0,0,0,499,500,7,3,0,0,500,79,1,0,0,
		0,51,83,89,98,100,110,124,130,142,156,164,173,176,182,185,190,192,198,
		221,237,249,256,261,269,272,278,290,298,311,321,326,341,355,357,369,371,
		383,385,403,405,417,419,430,441,450,456,458,467,472,477,481,489
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
