//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from /home/rasmus/Documents/GitHub/P4/P4.TinyCell.Shared/TinycellAntlr/TinyCell.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class TinyCellParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		Bool=1, Whitespace=2, VOLHIGH=3, VOLLOW=4, PININ=5, PINOUT=6, DPIN=7, 
		APIN=8, INT=9, FLOAT=10, STRING=11, BOOL=12, VOID=13, CHAR=14, UPDATE=15, 
		SETUP=16, SET=17, TO=18, READ=19, WRITE=20, IF=21, ELSE=22, WHILE=23, 
		FOR=24, CONTINUE=25, BREAK=26, RETURN=27, INCLUDE=28, QUESTION=29, LPAR=30, 
		RPAR=31, LCURLY=32, RCURLY=33, LBRACKET=34, RBRACKET=35, SEMI=36, DOT=37, 
		COMMA=38, COLON=39, TRUE=40, FALSE=41, NEWLINE=42, ASSIGN=43, PLUSASSIGN=44, 
		MULTASSIGN=45, DIVASSIGN=46, MODASSIGN=47, MINUSASSIGN=48, QUOTE=49, MULT=50, 
		DIV=51, PLUS=52, MINUS=53, MOD=54, AND=55, OR=56, EQ=57, NEQ=58, GT=59, 
		LT=60, GTE=61, LTE=62, NOT=63, BITSHIFTL=64, BITSHIFTR=65, UNARYPLUS=66, 
		UNARYMINUS=67, Identifier=68, LibraryIdent=69, String=70, FloatNumeral=71, 
		IntNumeral=72, BlockComment=73, LineComment=74, Newline=75;
	public const int
		RULE_document = 0, RULE_include = 1, RULE_generalDeclaration = 2, RULE_setupDefinition = 3, 
		RULE_updateDefinition = 4, RULE_functionDefinition = 5, RULE_type = 6, 
		RULE_parameterList = 7, RULE_parameter = 8, RULE_argumentList = 9, RULE_argument = 10, 
		RULE_declaration = 11, RULE_compoundStatement = 12, RULE_statement = 13, 
		RULE_ifStatement = 14, RULE_loopStatement = 15, RULE_jumpStatement = 16, 
		RULE_assignment = 17, RULE_functionCall = 18, RULE_arrayContent = 19, 
		RULE_arrayIndex = 20, RULE_primitiveExpression = 21, RULE_negativeExpression = 22, 
		RULE_unaryExpression = 23, RULE_multiplicativeExpression = 24, RULE_additiveExpression = 25, 
		RULE_bitshiftExpression = 26, RULE_comparisonExpression = 27, RULE_equalityExpression = 28, 
		RULE_andExpression = 29, RULE_orExpression = 30, RULE_ternaryExpression = 31, 
		RULE_expression = 32, RULE_pinAssignmentExpression = 33, RULE_pinStatusExpression = 34, 
		RULE_identifier = 35, RULE_tclib = 36, RULE_assignmentOperator = 37, RULE_pinVoltage = 38, 
		RULE_pinStatus = 39, RULE_numeral = 40;
	public static readonly string[] ruleNames = {
		"document", "include", "generalDeclaration", "setupDefinition", "updateDefinition", 
		"functionDefinition", "type", "parameterList", "parameter", "argumentList", 
		"argument", "declaration", "compoundStatement", "statement", "ifStatement", 
		"loopStatement", "jumpStatement", "assignment", "functionCall", "arrayContent", 
		"arrayIndex", "primitiveExpression", "negativeExpression", "unaryExpression", 
		"multiplicativeExpression", "additiveExpression", "bitshiftExpression", 
		"comparisonExpression", "equalityExpression", "andExpression", "orExpression", 
		"ternaryExpression", "expression", "pinAssignmentExpression", "pinStatusExpression", 
		"identifier", "tclib", "assignmentOperator", "pinVoltage", "pinStatus", 
		"numeral"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, "'HIGH'", "'LOW'", "'INPUT'", "'OUTPUT'", "'dpin'", 
		"'apin'", "'int'", "'float'", "'string'", "'bool'", "'void'", "'char'", 
		"'update'", "'setup'", "'set'", "'to'", "'read'", "'write'", "'if'", "'else'", 
		"'while'", "'for'", "'continue'", "'break'", "'return'", "'include'", 
		"'?'", "'('", "')'", "'{'", "'}'", "'['", "']'", "';'", "'.'", "','", 
		"':'", "'true'", "'false'", "'\\n'", "'='", "'+='", "'*='", "'/='", "'%='", 
		"'-='", "'\"'", "'*'", "'/'", "'+'", "'-'", "'%'", "'&&'", "'||'", "'=='", 
		"'!='", "'>'", "'<'", "'>='", "'<='", "'!'", "'<<'", "'>>'", "'++'", "'--'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "Bool", "Whitespace", "VOLHIGH", "VOLLOW", "PININ", "PINOUT", "DPIN", 
		"APIN", "INT", "FLOAT", "STRING", "BOOL", "VOID", "CHAR", "UPDATE", "SETUP", 
		"SET", "TO", "READ", "WRITE", "IF", "ELSE", "WHILE", "FOR", "CONTINUE", 
		"BREAK", "RETURN", "INCLUDE", "QUESTION", "LPAR", "RPAR", "LCURLY", "RCURLY", 
		"LBRACKET", "RBRACKET", "SEMI", "DOT", "COMMA", "COLON", "TRUE", "FALSE", 
		"NEWLINE", "ASSIGN", "PLUSASSIGN", "MULTASSIGN", "DIVASSIGN", "MODASSIGN", 
		"MINUSASSIGN", "QUOTE", "MULT", "DIV", "PLUS", "MINUS", "MOD", "AND", 
		"OR", "EQ", "NEQ", "GT", "LT", "GTE", "LTE", "NOT", "BITSHIFTL", "BITSHIFTR", 
		"UNARYPLUS", "UNARYMINUS", "Identifier", "LibraryIdent", "String", "FloatNumeral", 
		"IntNumeral", "BlockComment", "LineComment", "Newline"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "TinyCell.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static TinyCellParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public TinyCellParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public TinyCellParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class DocumentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SetupDefinitionContext setupDefinition() {
			return GetRuleContext<SetupDefinitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UpdateDefinitionContext updateDefinition() {
			return GetRuleContext<UpdateDefinitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IncludeContext[] include() {
			return GetRuleContexts<IncludeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IncludeContext include(int i) {
			return GetRuleContext<IncludeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GeneralDeclarationContext[] generalDeclaration() {
			return GetRuleContexts<GeneralDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public GeneralDeclarationContext generalDeclaration(int i) {
			return GetRuleContext<GeneralDeclarationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionDefinitionContext[] functionDefinition() {
			return GetRuleContexts<FunctionDefinitionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionDefinitionContext functionDefinition(int i) {
			return GetRuleContext<FunctionDefinitionContext>(i);
		}
		public DocumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_document; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITinyCellVisitor<TResult> typedVisitor = visitor as ITinyCellVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDocument(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DocumentContext document() {
		DocumentContext _localctx = new DocumentContext(Context, State);
		EnterRule(_localctx, 0, RULE_document);
		int _la;
		try {
			State = 108;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				{
				State = 85;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==INCLUDE) {
					{
					{
					State = 82;
					include();
					}
					}
					State = 87;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 91;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 16256L) != 0)) {
					{
					{
					State = 88;
					generalDeclaration();
					}
					}
					State = 93;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 94;
				setupDefinition();
				State = 95;
				updateDefinition();
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 100;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==INCLUDE) {
					{
					{
					State = 97;
					include();
					}
					}
					State = 102;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 104;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 103;
					functionDefinition();
					}
					}
					State = 106;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 16256L) != 0) );
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IncludeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INCLUDE() { return GetToken(TinyCellParser.INCLUDE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TclibContext tclib() {
			return GetRuleContext<TclibContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(TinyCellParser.SEMI, 0); }
		public IncludeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_include; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITinyCellVisitor<TResult> typedVisitor = visitor as ITinyCellVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInclude(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IncludeContext include() {
		IncludeContext _localctx = new IncludeContext(Context, State);
		EnterRule(_localctx, 2, RULE_include);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 110;
			Match(INCLUDE);
			State = 111;
			tclib();
			State = 112;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GeneralDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunctionDefinitionContext functionDefinition() {
			return GetRuleContext<FunctionDefinitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationContext declaration() {
			return GetRuleContext<DeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(TinyCellParser.SEMI, 0); }
		public GeneralDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_generalDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITinyCellVisitor<TResult> typedVisitor = visitor as ITinyCellVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGeneralDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GeneralDeclarationContext generalDeclaration() {
		GeneralDeclarationContext _localctx = new GeneralDeclarationContext(Context, State);
		EnterRule(_localctx, 4, RULE_generalDeclaration);
		try {
			State = 118;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,5,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 114;
				functionDefinition();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 115;
				declaration();
				State = 116;
				Match(SEMI);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SetupDefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SETUP() { return GetToken(TinyCellParser.SETUP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CompoundStatementContext compoundStatement() {
			return GetRuleContext<CompoundStatementContext>(0);
		}
		public SetupDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_setupDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITinyCellVisitor<TResult> typedVisitor = visitor as ITinyCellVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSetupDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SetupDefinitionContext setupDefinition() {
		SetupDefinitionContext _localctx = new SetupDefinitionContext(Context, State);
		EnterRule(_localctx, 6, RULE_setupDefinition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 120;
			Match(SETUP);
			State = 121;
			compoundStatement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UpdateDefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UPDATE() { return GetToken(TinyCellParser.UPDATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CompoundStatementContext compoundStatement() {
			return GetRuleContext<CompoundStatementContext>(0);
		}
		public UpdateDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_updateDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITinyCellVisitor<TResult> typedVisitor = visitor as ITinyCellVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUpdateDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UpdateDefinitionContext updateDefinition() {
		UpdateDefinitionContext _localctx = new UpdateDefinitionContext(Context, State);
		EnterRule(_localctx, 8, RULE_updateDefinition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 123;
			Match(UPDATE);
			State = 124;
			compoundStatement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionDefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAR() { return GetToken(TinyCellParser.LPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAR() { return GetToken(TinyCellParser.RPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CompoundStatementContext compoundStatement() {
			return GetRuleContext<CompoundStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(TinyCellParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ParameterListContext[] parameterList() {
			return GetRuleContexts<ParameterListContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParameterListContext parameterList(int i) {
			return GetRuleContext<ParameterListContext>(i);
		}
		public FunctionDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITinyCellVisitor<TResult> typedVisitor = visitor as ITinyCellVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionDefinitionContext functionDefinition() {
		FunctionDefinitionContext _localctx = new FunctionDefinitionContext(Context, State);
		EnterRule(_localctx, 10, RULE_functionDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 126;
			type();
			State = 127;
			identifier();
			State = 128;
			Match(LPAR);
			State = 132;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 16256L) != 0)) {
				{
				{
				State = 129;
				parameterList(0);
				}
				}
				State = 134;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 135;
			Match(RPAR);
			State = 138;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LCURLY:
				{
				State = 136;
				compoundStatement();
				}
				break;
			case SEMI:
				{
				State = 137;
				Match(SEMI);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VOID() { return GetToken(TinyCellParser.VOID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(TinyCellParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(TinyCellParser.INT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT() { return GetToken(TinyCellParser.FLOAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOL() { return GetToken(TinyCellParser.BOOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DPIN() { return GetToken(TinyCellParser.DPIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode APIN() { return GetToken(TinyCellParser.APIN, 0); }
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITinyCellVisitor<TResult> typedVisitor = visitor as ITinyCellVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(Context, State);
		EnterRule(_localctx, 12, RULE_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 140;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 16256L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ParameterContext parameter() {
			return GetRuleContext<ParameterContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParameterListContext parameterList() {
			return GetRuleContext<ParameterListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(TinyCellParser.COMMA, 0); }
		public ParameterListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameterList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITinyCellVisitor<TResult> typedVisitor = visitor as ITinyCellVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameterList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParameterListContext parameterList() {
		return parameterList(0);
	}

	private ParameterListContext parameterList(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ParameterListContext _localctx = new ParameterListContext(Context, _parentState);
		ParameterListContext _prevctx = _localctx;
		int _startState = 14;
		EnterRecursionRule(_localctx, 14, RULE_parameterList, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 143;
			parameter();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 150;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,8,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new ParameterListContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_parameterList);
					State = 145;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 146;
					Match(COMMA);
					State = 147;
					parameter();
					}
					} 
				}
				State = 152;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,8,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ParameterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACKET() { return GetToken(TinyCellParser.LBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACKET() { return GetToken(TinyCellParser.RBRACKET, 0); }
		public ParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITinyCellVisitor<TResult> typedVisitor = visitor as ITinyCellVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParameterContext parameter() {
		ParameterContext _localctx = new ParameterContext(Context, State);
		EnterRule(_localctx, 16, RULE_parameter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 153;
			type();
			State = 154;
			identifier();
			State = 157;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,9,Context) ) {
			case 1:
				{
				State = 155;
				Match(LBRACKET);
				State = 156;
				Match(RBRACKET);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentContext argument() {
			return GetRuleContext<ArgumentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(TinyCellParser.COMMA, 0); }
		public ArgumentListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argumentList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITinyCellVisitor<TResult> typedVisitor = visitor as ITinyCellVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgumentList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentListContext argumentList() {
		return argumentList(0);
	}

	private ArgumentListContext argumentList(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ArgumentListContext _localctx = new ArgumentListContext(Context, _parentState);
		ArgumentListContext _prevctx = _localctx;
		int _startState = 18;
		EnterRecursionRule(_localctx, 18, RULE_argumentList, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 160;
			argument();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 167;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,10,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new ArgumentListContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_argumentList);
					State = 162;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 163;
					Match(COMMA);
					State = 164;
					argument();
					}
					} 
				}
				State = 169;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,10,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ArgumentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACKET() { return GetToken(TinyCellParser.LBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArrayIndexContext arrayIndex() {
			return GetRuleContext<ArrayIndexContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACKET() { return GetToken(TinyCellParser.RBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumeralContext numeral() {
			return GetRuleContext<NumeralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode String() { return GetToken(TinyCellParser.String, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Bool() { return GetToken(TinyCellParser.Bool, 0); }
		public ArgumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argument; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITinyCellVisitor<TResult> typedVisitor = visitor as ITinyCellVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgument(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentContext argument() {
		ArgumentContext _localctx = new ArgumentContext(Context, State);
		EnterRule(_localctx, 20, RULE_argument);
		try {
			State = 181;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,12,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 170;
				identifier();
				State = 175;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,11,Context) ) {
				case 1:
					{
					State = 171;
					Match(LBRACKET);
					State = 172;
					arrayIndex();
					State = 173;
					Match(RBRACKET);
					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 177;
				functionCall();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 178;
				numeral();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 179;
				Match(String);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 180;
				Match(Bool);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACKET() { return GetToken(TinyCellParser.LBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArrayIndexContext arrayIndex() {
			return GetRuleContext<ArrayIndexContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACKET() { return GetToken(TinyCellParser.RBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(TinyCellParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		public DeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITinyCellVisitor<TResult> typedVisitor = visitor as ITinyCellVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationContext declaration() {
		DeclarationContext _localctx = new DeclarationContext(Context, State);
		EnterRule(_localctx, 22, RULE_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 183;
			type();
			State = 184;
			identifier();
			State = 189;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LBRACKET) {
				{
				State = 185;
				Match(LBRACKET);
				State = 186;
				arrayIndex();
				State = 187;
				Match(RBRACKET);
				}
			}

			State = 196;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ASSIGN) {
				{
				State = 191;
				Match(ASSIGN);
				State = 194;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,14,Context) ) {
				case 1:
					{
					State = 192;
					expression();
					}
					break;
				case 2:
					{
					State = 193;
					functionCall();
					}
					break;
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CompoundStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LCURLY() { return GetToken(TinyCellParser.LCURLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RCURLY() { return GetToken(TinyCellParser.RCURLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public CompoundStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compoundStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITinyCellVisitor<TResult> typedVisitor = visitor as ITinyCellVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompoundStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompoundStatementContext compoundStatement() {
		CompoundStatementContext _localctx = new CompoundStatementContext(Context, State);
		EnterRule(_localctx, 24, RULE_compoundStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 198;
			Match(LCURLY);
			State = 202;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & -9214364831967461502L) != 0) || ((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & 119L) != 0)) {
				{
				{
				State = 199;
				statement();
				}
				}
				State = 204;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 205;
			Match(RCURLY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IfStatementContext ifStatement() {
			return GetRuleContext<IfStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LoopStatementContext loopStatement() {
			return GetRuleContext<LoopStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public JumpStatementContext jumpStatement() {
			return GetRuleContext<JumpStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationContext declaration() {
			return GetRuleContext<DeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(TinyCellParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PinStatusExpressionContext pinStatusExpression() {
			return GetRuleContext<PinStatusExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentContext assignment() {
			return GetRuleContext<AssignmentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITinyCellVisitor<TResult> typedVisitor = visitor as ITinyCellVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 26, RULE_statement);
		try {
			State = 225;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,17,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 207;
				ifStatement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 208;
				loopStatement();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 209;
				jumpStatement();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 210;
				declaration();
				State = 211;
				Match(SEMI);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 213;
				functionCall();
				State = 214;
				Match(SEMI);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 216;
				pinStatusExpression();
				State = 217;
				Match(SEMI);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 219;
				assignment();
				State = 220;
				Match(SEMI);
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 222;
				expression();
				State = 223;
				Match(SEMI);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(TinyCellParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAR() { return GetToken(TinyCellParser.LPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAR() { return GetToken(TinyCellParser.RPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CompoundStatementContext[] compoundStatement() {
			return GetRuleContexts<CompoundStatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CompoundStatementContext compoundStatement(int i) {
			return GetRuleContext<CompoundStatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(TinyCellParser.ELSE, 0); }
		public IfStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITinyCellVisitor<TResult> typedVisitor = visitor as ITinyCellVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfStatementContext ifStatement() {
		IfStatementContext _localctx = new IfStatementContext(Context, State);
		EnterRule(_localctx, 28, RULE_ifStatement);
		try {
			State = 241;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,18,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 227;
				Match(IF);
				State = 228;
				Match(LPAR);
				State = 229;
				expression();
				State = 230;
				Match(RPAR);
				State = 231;
				compoundStatement();
				State = 232;
				Match(ELSE);
				State = 233;
				compoundStatement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 235;
				Match(IF);
				State = 236;
				Match(LPAR);
				State = 237;
				expression();
				State = 238;
				Match(RPAR);
				State = 239;
				compoundStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LoopStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHILE() { return GetToken(TinyCellParser.WHILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAR() { return GetToken(TinyCellParser.LPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAR() { return GetToken(TinyCellParser.RPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CompoundStatementContext compoundStatement() {
			return GetRuleContext<CompoundStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(TinyCellParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SEMI() { return GetTokens(TinyCellParser.SEMI); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI(int i) {
			return GetToken(TinyCellParser.SEMI, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationContext declaration() {
			return GetRuleContext<DeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentContext assignment() {
			return GetRuleContext<AssignmentContext>(0);
		}
		public LoopStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loopStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITinyCellVisitor<TResult> typedVisitor = visitor as ITinyCellVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoopStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LoopStatementContext loopStatement() {
		LoopStatementContext _localctx = new LoopStatementContext(Context, State);
		EnterRule(_localctx, 30, RULE_loopStatement);
		try {
			State = 265;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case WHILE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 243;
				Match(WHILE);
				State = 244;
				Match(LPAR);
				State = 245;
				expression();
				State = 246;
				Match(RPAR);
				State = 247;
				compoundStatement();
				}
				break;
			case FOR:
				EnterOuterAlt(_localctx, 2);
				{
				State = 249;
				Match(FOR);
				State = 250;
				Match(LPAR);
				State = 253;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case Bool:
				case LPAR:
				case LCURLY:
				case MINUS:
				case NOT:
				case UNARYPLUS:
				case UNARYMINUS:
				case Identifier:
				case String:
				case FloatNumeral:
				case IntNumeral:
					{
					State = 251;
					expression();
					}
					break;
				case DPIN:
				case APIN:
				case INT:
				case FLOAT:
				case STRING:
				case BOOL:
				case VOID:
					{
					State = 252;
					declaration();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 255;
				Match(SEMI);
				State = 256;
				expression();
				State = 257;
				Match(SEMI);
				State = 260;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,20,Context) ) {
				case 1:
					{
					State = 258;
					expression();
					}
					break;
				case 2:
					{
					State = 259;
					assignment();
					}
					break;
				}
				State = 262;
				Match(RPAR);
				State = 263;
				compoundStatement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class JumpStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONTINUE() { return GetToken(TinyCellParser.CONTINUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(TinyCellParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BREAK() { return GetToken(TinyCellParser.BREAK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURN() { return GetToken(TinyCellParser.RETURN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public JumpStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_jumpStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITinyCellVisitor<TResult> typedVisitor = visitor as ITinyCellVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJumpStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public JumpStatementContext jumpStatement() {
		JumpStatementContext _localctx = new JumpStatementContext(Context, State);
		EnterRule(_localctx, 32, RULE_jumpStatement);
		int _la;
		try {
			State = 276;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CONTINUE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 267;
				Match(CONTINUE);
				State = 268;
				Match(SEMI);
				}
				break;
			case BREAK:
				EnterOuterAlt(_localctx, 2);
				{
				State = 269;
				Match(BREAK);
				State = 270;
				Match(SEMI);
				}
				break;
			case RETURN:
				EnterOuterAlt(_localctx, 3);
				{
				State = 271;
				Match(RETURN);
				State = 273;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -9214364832231325694L) != 0) || ((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & 119L) != 0)) {
					{
					State = 272;
					expression();
					}
				}

				State = 275;
				Match(SEMI);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentOperatorContext assignmentOperator() {
			return GetRuleContext<AssignmentOperatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACKET() { return GetToken(TinyCellParser.LBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArrayIndexContext arrayIndex() {
			return GetRuleContext<ArrayIndexContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACKET() { return GetToken(TinyCellParser.RBRACKET, 0); }
		public AssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITinyCellVisitor<TResult> typedVisitor = visitor as ITinyCellVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentContext assignment() {
		AssignmentContext _localctx = new AssignmentContext(Context, State);
		EnterRule(_localctx, 34, RULE_assignment);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 278;
			identifier();
			State = 283;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LBRACKET) {
				{
				State = 279;
				Match(LBRACKET);
				State = 280;
				arrayIndex();
				State = 281;
				Match(RBRACKET);
				}
			}

			State = 285;
			assignmentOperator();
			State = 286;
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionCallContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAR() { return GetToken(TinyCellParser.LPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAR() { return GetToken(TinyCellParser.RPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentListContext[] argumentList() {
			return GetRuleContexts<ArgumentListContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentListContext argumentList(int i) {
			return GetRuleContext<ArgumentListContext>(i);
		}
		public FunctionCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionCall; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITinyCellVisitor<TResult> typedVisitor = visitor as ITinyCellVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionCallContext functionCall() {
		FunctionCallContext _localctx = new FunctionCallContext(Context, State);
		EnterRule(_localctx, 36, RULE_functionCall);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 288;
			identifier();
			State = 289;
			Match(LPAR);
			State = 293;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Bool || ((((_la - 68)) & ~0x3f) == 0 && ((1L << (_la - 68)) & 29L) != 0)) {
				{
				{
				State = 290;
				argumentList(0);
				}
				}
				State = 295;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 296;
			Match(RPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayContentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NegativeExpressionContext negativeExpression() {
			return GetRuleContext<NegativeExpressionContext>(0);
		}
		public ArrayContentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayContent; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITinyCellVisitor<TResult> typedVisitor = visitor as ITinyCellVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayContent(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayContentContext arrayContent() {
		ArrayContentContext _localctx = new ArrayContentContext(Context, State);
		EnterRule(_localctx, 38, RULE_arrayContent);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 298;
			negativeExpression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayIndexContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IntNumeral() { return GetToken(TinyCellParser.IntNumeral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ArrayIndexContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayIndex; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITinyCellVisitor<TResult> typedVisitor = visitor as ITinyCellVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayIndex(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayIndexContext arrayIndex() {
		ArrayIndexContext _localctx = new ArrayIndexContext(Context, State);
		EnterRule(_localctx, 40, RULE_arrayIndex);
		try {
			State = 302;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IntNumeral:
				EnterOuterAlt(_localctx, 1);
				{
				State = 300;
				Match(IntNumeral);
				}
				break;
			case Identifier:
				EnterOuterAlt(_localctx, 2);
				{
				State = 301;
				identifier();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrimitiveExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NumeralContext numeral() {
			return GetRuleContext<NumeralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Bool() { return GetToken(TinyCellParser.Bool, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode String() { return GetToken(TinyCellParser.String, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACKET() { return GetToken(TinyCellParser.LBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArrayIndexContext arrayIndex() {
			return GetRuleContext<ArrayIndexContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACKET() { return GetToken(TinyCellParser.RBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LCURLY() { return GetToken(TinyCellParser.LCURLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArrayContentContext[] arrayContent() {
			return GetRuleContexts<ArrayContentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayContentContext arrayContent(int i) {
			return GetRuleContext<ArrayContentContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RCURLY() { return GetToken(TinyCellParser.RCURLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(TinyCellParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(TinyCellParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAR() { return GetToken(TinyCellParser.LPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAR() { return GetToken(TinyCellParser.RPAR, 0); }
		public PrimitiveExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primitiveExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITinyCellVisitor<TResult> typedVisitor = visitor as ITinyCellVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimitiveExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrimitiveExpressionContext primitiveExpression() {
		PrimitiveExpressionContext _localctx = new PrimitiveExpressionContext(Context, State);
		EnterRule(_localctx, 42, RULE_primitiveExpression);
		try {
			int _alt;
			State = 331;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,29,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 304;
				numeral();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 305;
				Match(Bool);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 306;
				Match(String);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 307;
				identifier();
				State = 312;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,27,Context) ) {
				case 1:
					{
					State = 308;
					Match(LBRACKET);
					State = 309;
					arrayIndex();
					State = 310;
					Match(RBRACKET);
					}
					break;
				}
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 314;
				functionCall();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 315;
				Match(LCURLY);
				State = 321;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,28,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 316;
						arrayContent();
						State = 317;
						Match(COMMA);
						}
						} 
					}
					State = 323;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,28,Context);
				}
				State = 324;
				arrayContent();
				State = 325;
				Match(RCURLY);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 327;
				Match(LPAR);
				State = 328;
				expression();
				State = 329;
				Match(RPAR);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NegativeExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PrimitiveExpressionContext primitiveExpression() {
			return GetRuleContext<PrimitiveExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(TinyCellParser.MINUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NumeralContext numeral() {
			return GetRuleContext<NumeralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACKET() { return GetToken(TinyCellParser.LBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArrayIndexContext arrayIndex() {
			return GetRuleContext<ArrayIndexContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACKET() { return GetToken(TinyCellParser.RBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAR() { return GetToken(TinyCellParser.LPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAR() { return GetToken(TinyCellParser.RPAR, 0); }
		public NegativeExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_negativeExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITinyCellVisitor<TResult> typedVisitor = visitor as ITinyCellVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNegativeExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NegativeExpressionContext negativeExpression() {
		NegativeExpressionContext _localctx = new NegativeExpressionContext(Context, State);
		EnterRule(_localctx, 44, RULE_negativeExpression);
		try {
			State = 351;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,32,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 333;
				primitiveExpression();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 334;
				Match(MINUS);
				State = 344;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,31,Context) ) {
				case 1:
					{
					State = 335;
					numeral();
					}
					break;
				case 2:
					{
					State = 336;
					identifier();
					State = 341;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,30,Context) ) {
					case 1:
						{
						State = 337;
						Match(LBRACKET);
						State = 338;
						arrayIndex();
						State = 339;
						Match(RBRACKET);
						}
						break;
					}
					}
					break;
				case 3:
					{
					State = 343;
					functionCall();
					}
					break;
				}
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 346;
				Match(MINUS);
				State = 347;
				Match(LPAR);
				State = 348;
				expression();
				State = 349;
				Match(RPAR);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnaryExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NegativeExpressionContext negativeExpression() {
			return GetRuleContext<NegativeExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNARYPLUS() { return GetToken(TinyCellParser.UNARYPLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNARYMINUS() { return GetToken(TinyCellParser.UNARYMINUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(TinyCellParser.NOT, 0); }
		public UnaryExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unaryExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITinyCellVisitor<TResult> typedVisitor = visitor as ITinyCellVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnaryExpressionContext unaryExpression() {
		UnaryExpressionContext _localctx = new UnaryExpressionContext(Context, State);
		EnterRule(_localctx, 46, RULE_unaryExpression);
		try {
			State = 366;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,33,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 353;
				negativeExpression();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 354;
				identifier();
				State = 355;
				Match(UNARYPLUS);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 357;
				identifier();
				State = 358;
				Match(UNARYMINUS);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 360;
				Match(UNARYPLUS);
				State = 361;
				identifier();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 362;
				Match(UNARYMINUS);
				State = 363;
				identifier();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 364;
				Match(NOT);
				State = 365;
				negativeExpression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MultiplicativeExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public UnaryExpressionContext unaryExpression() {
			return GetRuleContext<UnaryExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MultiplicativeExpressionContext multiplicativeExpression() {
			return GetRuleContext<MultiplicativeExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULT() { return GetToken(TinyCellParser.MULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PrimitiveExpressionContext primitiveExpression() {
			return GetRuleContext<PrimitiveExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIV() { return GetToken(TinyCellParser.DIV, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MOD() { return GetToken(TinyCellParser.MOD, 0); }
		public MultiplicativeExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multiplicativeExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITinyCellVisitor<TResult> typedVisitor = visitor as ITinyCellVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiplicativeExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MultiplicativeExpressionContext multiplicativeExpression() {
		return multiplicativeExpression(0);
	}

	private MultiplicativeExpressionContext multiplicativeExpression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		MultiplicativeExpressionContext _localctx = new MultiplicativeExpressionContext(Context, _parentState);
		MultiplicativeExpressionContext _prevctx = _localctx;
		int _startState = 48;
		EnterRecursionRule(_localctx, 48, RULE_multiplicativeExpression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 369;
			unaryExpression();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 382;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,35,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 380;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,34,Context) ) {
					case 1:
						{
						_localctx = new MultiplicativeExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_multiplicativeExpression);
						State = 371;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 372;
						Match(MULT);
						State = 373;
						primitiveExpression();
						}
						break;
					case 2:
						{
						_localctx = new MultiplicativeExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_multiplicativeExpression);
						State = 374;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 375;
						Match(DIV);
						State = 376;
						primitiveExpression();
						}
						break;
					case 3:
						{
						_localctx = new MultiplicativeExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_multiplicativeExpression);
						State = 377;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 378;
						Match(MOD);
						State = 379;
						primitiveExpression();
						}
						break;
					}
					} 
				}
				State = 384;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,35,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class AdditiveExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public MultiplicativeExpressionContext multiplicativeExpression() {
			return GetRuleContext<MultiplicativeExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AdditiveExpressionContext additiveExpression() {
			return GetRuleContext<AdditiveExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(TinyCellParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(TinyCellParser.MINUS, 0); }
		public AdditiveExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_additiveExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITinyCellVisitor<TResult> typedVisitor = visitor as ITinyCellVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAdditiveExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AdditiveExpressionContext additiveExpression() {
		return additiveExpression(0);
	}

	private AdditiveExpressionContext additiveExpression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		AdditiveExpressionContext _localctx = new AdditiveExpressionContext(Context, _parentState);
		AdditiveExpressionContext _prevctx = _localctx;
		int _startState = 50;
		EnterRecursionRule(_localctx, 50, RULE_additiveExpression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 386;
			multiplicativeExpression(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 396;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,37,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 394;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,36,Context) ) {
					case 1:
						{
						_localctx = new AdditiveExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_additiveExpression);
						State = 388;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 389;
						Match(PLUS);
						State = 390;
						multiplicativeExpression(0);
						}
						break;
					case 2:
						{
						_localctx = new AdditiveExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_additiveExpression);
						State = 391;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 392;
						Match(MINUS);
						State = 393;
						multiplicativeExpression(0);
						}
						break;
					}
					} 
				}
				State = 398;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,37,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class BitshiftExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AdditiveExpressionContext additiveExpression() {
			return GetRuleContext<AdditiveExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BitshiftExpressionContext bitshiftExpression() {
			return GetRuleContext<BitshiftExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BITSHIFTL() { return GetToken(TinyCellParser.BITSHIFTL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BITSHIFTR() { return GetToken(TinyCellParser.BITSHIFTR, 0); }
		public BitshiftExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bitshiftExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITinyCellVisitor<TResult> typedVisitor = visitor as ITinyCellVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBitshiftExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BitshiftExpressionContext bitshiftExpression() {
		return bitshiftExpression(0);
	}

	private BitshiftExpressionContext bitshiftExpression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		BitshiftExpressionContext _localctx = new BitshiftExpressionContext(Context, _parentState);
		BitshiftExpressionContext _prevctx = _localctx;
		int _startState = 52;
		EnterRecursionRule(_localctx, 52, RULE_bitshiftExpression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 400;
			additiveExpression(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 410;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,39,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 408;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,38,Context) ) {
					case 1:
						{
						_localctx = new BitshiftExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_bitshiftExpression);
						State = 402;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 403;
						Match(BITSHIFTL);
						State = 404;
						additiveExpression(0);
						}
						break;
					case 2:
						{
						_localctx = new BitshiftExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_bitshiftExpression);
						State = 405;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 406;
						Match(BITSHIFTR);
						State = 407;
						additiveExpression(0);
						}
						break;
					}
					} 
				}
				State = 412;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,39,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ComparisonExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BitshiftExpressionContext bitshiftExpression() {
			return GetRuleContext<BitshiftExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ComparisonExpressionContext comparisonExpression() {
			return GetRuleContext<ComparisonExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT() { return GetToken(TinyCellParser.LT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT() { return GetToken(TinyCellParser.GT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LTE() { return GetToken(TinyCellParser.LTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GTE() { return GetToken(TinyCellParser.GTE, 0); }
		public ComparisonExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comparisonExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITinyCellVisitor<TResult> typedVisitor = visitor as ITinyCellVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComparisonExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ComparisonExpressionContext comparisonExpression() {
		return comparisonExpression(0);
	}

	private ComparisonExpressionContext comparisonExpression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ComparisonExpressionContext _localctx = new ComparisonExpressionContext(Context, _parentState);
		ComparisonExpressionContext _prevctx = _localctx;
		int _startState = 54;
		EnterRecursionRule(_localctx, 54, RULE_comparisonExpression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 414;
			bitshiftExpression(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 430;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,41,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 428;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,40,Context) ) {
					case 1:
						{
						_localctx = new ComparisonExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_comparisonExpression);
						State = 416;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 417;
						Match(LT);
						State = 418;
						bitshiftExpression(0);
						}
						break;
					case 2:
						{
						_localctx = new ComparisonExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_comparisonExpression);
						State = 419;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 420;
						Match(GT);
						State = 421;
						bitshiftExpression(0);
						}
						break;
					case 3:
						{
						_localctx = new ComparisonExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_comparisonExpression);
						State = 422;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 423;
						Match(LTE);
						State = 424;
						bitshiftExpression(0);
						}
						break;
					case 4:
						{
						_localctx = new ComparisonExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_comparisonExpression);
						State = 425;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 426;
						Match(GTE);
						State = 427;
						bitshiftExpression(0);
						}
						break;
					}
					} 
				}
				State = 432;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,41,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class EqualityExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ComparisonExpressionContext comparisonExpression() {
			return GetRuleContext<ComparisonExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EqualityExpressionContext equalityExpression() {
			return GetRuleContext<EqualityExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQ() { return GetToken(TinyCellParser.EQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEQ() { return GetToken(TinyCellParser.NEQ, 0); }
		public EqualityExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_equalityExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITinyCellVisitor<TResult> typedVisitor = visitor as ITinyCellVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEqualityExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EqualityExpressionContext equalityExpression() {
		return equalityExpression(0);
	}

	private EqualityExpressionContext equalityExpression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		EqualityExpressionContext _localctx = new EqualityExpressionContext(Context, _parentState);
		EqualityExpressionContext _prevctx = _localctx;
		int _startState = 56;
		EnterRecursionRule(_localctx, 56, RULE_equalityExpression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 434;
			comparisonExpression(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 444;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,43,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 442;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,42,Context) ) {
					case 1:
						{
						_localctx = new EqualityExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_equalityExpression);
						State = 436;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 437;
						Match(EQ);
						State = 438;
						comparisonExpression(0);
						}
						break;
					case 2:
						{
						_localctx = new EqualityExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_equalityExpression);
						State = 439;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 440;
						Match(NEQ);
						State = 441;
						comparisonExpression(0);
						}
						break;
					}
					} 
				}
				State = 446;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,43,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class AndExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public EqualityExpressionContext equalityExpression() {
			return GetRuleContext<EqualityExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AndExpressionContext andExpression() {
			return GetRuleContext<AndExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND() { return GetToken(TinyCellParser.AND, 0); }
		public AndExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_andExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITinyCellVisitor<TResult> typedVisitor = visitor as ITinyCellVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAndExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AndExpressionContext andExpression() {
		return andExpression(0);
	}

	private AndExpressionContext andExpression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		AndExpressionContext _localctx = new AndExpressionContext(Context, _parentState);
		AndExpressionContext _prevctx = _localctx;
		int _startState = 58;
		EnterRecursionRule(_localctx, 58, RULE_andExpression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 448;
			equalityExpression(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 455;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,44,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new AndExpressionContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_andExpression);
					State = 450;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 451;
					Match(AND);
					State = 452;
					equalityExpression(0);
					}
					} 
				}
				State = 457;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,44,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class OrExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AndExpressionContext andExpression() {
			return GetRuleContext<AndExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OrExpressionContext orExpression() {
			return GetRuleContext<OrExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR() { return GetToken(TinyCellParser.OR, 0); }
		public OrExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_orExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITinyCellVisitor<TResult> typedVisitor = visitor as ITinyCellVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOrExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OrExpressionContext orExpression() {
		return orExpression(0);
	}

	private OrExpressionContext orExpression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		OrExpressionContext _localctx = new OrExpressionContext(Context, _parentState);
		OrExpressionContext _prevctx = _localctx;
		int _startState = 60;
		EnterRecursionRule(_localctx, 60, RULE_orExpression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 459;
			andExpression(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 466;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,45,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new OrExpressionContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_orExpression);
					State = 461;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 462;
					Match(OR);
					State = 463;
					andExpression(0);
					}
					} 
				}
				State = 468;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,45,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class TernaryExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public OrExpressionContext orExpression() {
			return GetRuleContext<OrExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUESTION() { return GetToken(TinyCellParser.QUESTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(TinyCellParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallContext[] functionCall() {
			return GetRuleContexts<FunctionCallContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallContext functionCall(int i) {
			return GetRuleContext<FunctionCallContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentContext[] assignment() {
			return GetRuleContexts<AssignmentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentContext assignment(int i) {
			return GetRuleContext<AssignmentContext>(i);
		}
		public TernaryExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ternaryExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITinyCellVisitor<TResult> typedVisitor = visitor as ITinyCellVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTernaryExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TernaryExpressionContext ternaryExpression() {
		TernaryExpressionContext _localctx = new TernaryExpressionContext(Context, State);
		EnterRule(_localctx, 62, RULE_ternaryExpression);
		try {
			State = 483;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,48,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 469;
				orExpression(0);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 470;
				orExpression(0);
				State = 471;
				Match(QUESTION);
				State = 475;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,46,Context) ) {
				case 1:
					{
					State = 472;
					expression();
					}
					break;
				case 2:
					{
					State = 473;
					functionCall();
					}
					break;
				case 3:
					{
					State = 474;
					assignment();
					}
					break;
				}
				State = 477;
				Match(COLON);
				State = 481;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,47,Context) ) {
				case 1:
					{
					State = 478;
					expression();
					}
					break;
				case 2:
					{
					State = 479;
					functionCall();
					}
					break;
				case 3:
					{
					State = 480;
					assignment();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TernaryExpressionContext ternaryExpression() {
			return GetRuleContext<TernaryExpressionContext>(0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITinyCellVisitor<TResult> typedVisitor = visitor as ITinyCellVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(Context, State);
		EnterRule(_localctx, 64, RULE_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 485;
			ternaryExpression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PinAssignmentExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WRITE() { return GetToken(TinyCellParser.WRITE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(TinyCellParser.TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PinVoltageContext pinVoltage() {
			return GetRuleContext<PinVoltageContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Bool() { return GetToken(TinyCellParser.Bool, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IntNumeral() { return GetToken(TinyCellParser.IntNumeral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode READ() { return GetToken(TinyCellParser.READ, 0); }
		public PinAssignmentExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pinAssignmentExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITinyCellVisitor<TResult> typedVisitor = visitor as ITinyCellVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPinAssignmentExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PinAssignmentExpressionContext pinAssignmentExpression() {
		PinAssignmentExpressionContext _localctx = new PinAssignmentExpressionContext(Context, State);
		EnterRule(_localctx, 66, RULE_pinAssignmentExpression);
		try {
			State = 501;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case WRITE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 487;
				Match(WRITE);
				State = 492;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case VOLHIGH:
				case VOLLOW:
					{
					State = 488;
					pinVoltage();
					}
					break;
				case Bool:
					{
					State = 489;
					Match(Bool);
					}
					break;
				case Identifier:
					{
					State = 490;
					identifier();
					}
					break;
				case IntNumeral:
					{
					State = 491;
					Match(IntNumeral);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 494;
				Match(TO);
				State = 495;
				identifier();
				}
				break;
			case READ:
				EnterOuterAlt(_localctx, 2);
				{
				State = 496;
				Match(READ);
				State = 497;
				identifier();
				State = 498;
				Match(TO);
				State = 499;
				identifier();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PinStatusExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PinAssignmentExpressionContext pinAssignmentExpression() {
			return GetRuleContext<PinAssignmentExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(TinyCellParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(TinyCellParser.TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PinStatusContext pinStatus() {
			return GetRuleContext<PinStatusContext>(0);
		}
		public PinStatusExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pinStatusExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITinyCellVisitor<TResult> typedVisitor = visitor as ITinyCellVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPinStatusExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PinStatusExpressionContext pinStatusExpression() {
		PinStatusExpressionContext _localctx = new PinStatusExpressionContext(Context, State);
		EnterRule(_localctx, 68, RULE_pinStatusExpression);
		try {
			State = 509;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case READ:
			case WRITE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 503;
				pinAssignmentExpression();
				}
				break;
			case SET:
				EnterOuterAlt(_localctx, 2);
				{
				State = 504;
				Match(SET);
				State = 505;
				identifier();
				State = 506;
				Match(TO);
				State = 507;
				pinStatus();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(TinyCellParser.Identifier, 0); }
		public IdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITinyCellVisitor<TResult> typedVisitor = visitor as ITinyCellVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierContext identifier() {
		IdentifierContext _localctx = new IdentifierContext(Context, State);
		EnterRule(_localctx, 70, RULE_identifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 511;
			Match(Identifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TclibContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LibraryIdent() { return GetToken(TinyCellParser.LibraryIdent, 0); }
		public TclibContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tclib; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITinyCellVisitor<TResult> typedVisitor = visitor as ITinyCellVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTclib(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TclibContext tclib() {
		TclibContext _localctx = new TclibContext(Context, State);
		EnterRule(_localctx, 72, RULE_tclib);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 513;
			Match(LibraryIdent);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentOperatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(TinyCellParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULTASSIGN() { return GetToken(TinyCellParser.MULTASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIVASSIGN() { return GetToken(TinyCellParser.DIVASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MODASSIGN() { return GetToken(TinyCellParser.MODASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUSASSIGN() { return GetToken(TinyCellParser.PLUSASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUSASSIGN() { return GetToken(TinyCellParser.MINUSASSIGN, 0); }
		public AssignmentOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignmentOperator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITinyCellVisitor<TResult> typedVisitor = visitor as ITinyCellVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignmentOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentOperatorContext assignmentOperator() {
		AssignmentOperatorContext _localctx = new AssignmentOperatorContext(Context, State);
		EnterRule(_localctx, 74, RULE_assignmentOperator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 515;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 554153860399104L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PinVoltageContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VOLHIGH() { return GetToken(TinyCellParser.VOLHIGH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VOLLOW() { return GetToken(TinyCellParser.VOLLOW, 0); }
		public PinVoltageContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pinVoltage; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITinyCellVisitor<TResult> typedVisitor = visitor as ITinyCellVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPinVoltage(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PinVoltageContext pinVoltage() {
		PinVoltageContext _localctx = new PinVoltageContext(Context, State);
		EnterRule(_localctx, 76, RULE_pinVoltage);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 517;
			_la = TokenStream.LA(1);
			if ( !(_la==VOLHIGH || _la==VOLLOW) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PinStatusContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PININ() { return GetToken(TinyCellParser.PININ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PINOUT() { return GetToken(TinyCellParser.PINOUT, 0); }
		public PinStatusContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pinStatus; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITinyCellVisitor<TResult> typedVisitor = visitor as ITinyCellVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPinStatus(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PinStatusContext pinStatus() {
		PinStatusContext _localctx = new PinStatusContext(Context, State);
		EnterRule(_localctx, 78, RULE_pinStatus);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 519;
			_la = TokenStream.LA(1);
			if ( !(_la==PININ || _la==PINOUT) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumeralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FloatNumeral() { return GetToken(TinyCellParser.FloatNumeral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IntNumeral() { return GetToken(TinyCellParser.IntNumeral, 0); }
		public NumeralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numeral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITinyCellVisitor<TResult> typedVisitor = visitor as ITinyCellVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumeral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumeralContext numeral() {
		NumeralContext _localctx = new NumeralContext(Context, State);
		EnterRule(_localctx, 80, RULE_numeral);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 521;
			_la = TokenStream.LA(1);
			if ( !(_la==FloatNumeral || _la==IntNumeral) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 7: return parameterList_sempred((ParameterListContext)_localctx, predIndex);
		case 9: return argumentList_sempred((ArgumentListContext)_localctx, predIndex);
		case 24: return multiplicativeExpression_sempred((MultiplicativeExpressionContext)_localctx, predIndex);
		case 25: return additiveExpression_sempred((AdditiveExpressionContext)_localctx, predIndex);
		case 26: return bitshiftExpression_sempred((BitshiftExpressionContext)_localctx, predIndex);
		case 27: return comparisonExpression_sempred((ComparisonExpressionContext)_localctx, predIndex);
		case 28: return equalityExpression_sempred((EqualityExpressionContext)_localctx, predIndex);
		case 29: return andExpression_sempred((AndExpressionContext)_localctx, predIndex);
		case 30: return orExpression_sempred((OrExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool parameterList_sempred(ParameterListContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 1);
		}
		return true;
	}
	private bool argumentList_sempred(ArgumentListContext _localctx, int predIndex) {
		switch (predIndex) {
		case 1: return Precpred(Context, 1);
		}
		return true;
	}
	private bool multiplicativeExpression_sempred(MultiplicativeExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 2: return Precpred(Context, 3);
		case 3: return Precpred(Context, 2);
		case 4: return Precpred(Context, 1);
		}
		return true;
	}
	private bool additiveExpression_sempred(AdditiveExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 5: return Precpred(Context, 2);
		case 6: return Precpred(Context, 1);
		}
		return true;
	}
	private bool bitshiftExpression_sempred(BitshiftExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 7: return Precpred(Context, 2);
		case 8: return Precpred(Context, 1);
		}
		return true;
	}
	private bool comparisonExpression_sempred(ComparisonExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 9: return Precpred(Context, 4);
		case 10: return Precpred(Context, 3);
		case 11: return Precpred(Context, 2);
		case 12: return Precpred(Context, 1);
		}
		return true;
	}
	private bool equalityExpression_sempred(EqualityExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 13: return Precpred(Context, 2);
		case 14: return Precpred(Context, 1);
		}
		return true;
	}
	private bool andExpression_sempred(AndExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 15: return Precpred(Context, 1);
		}
		return true;
	}
	private bool orExpression_sempred(OrExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 16: return Precpred(Context, 1);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,75,524,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,
		2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,1,0,5,0,84,8,0,10,0,
		12,0,87,9,0,1,0,5,0,90,8,0,10,0,12,0,93,9,0,1,0,1,0,1,0,1,0,5,0,99,8,0,
		10,0,12,0,102,9,0,1,0,4,0,105,8,0,11,0,12,0,106,3,0,109,8,0,1,1,1,1,1,
		1,1,1,1,2,1,2,1,2,1,2,3,2,119,8,2,1,3,1,3,1,3,1,4,1,4,1,4,1,5,1,5,1,5,
		1,5,5,5,131,8,5,10,5,12,5,134,9,5,1,5,1,5,1,5,3,5,139,8,5,1,6,1,6,1,7,
		1,7,1,7,1,7,1,7,1,7,5,7,149,8,7,10,7,12,7,152,9,7,1,8,1,8,1,8,1,8,3,8,
		158,8,8,1,9,1,9,1,9,1,9,1,9,1,9,5,9,166,8,9,10,9,12,9,169,9,9,1,10,1,10,
		1,10,1,10,1,10,3,10,176,8,10,1,10,1,10,1,10,1,10,3,10,182,8,10,1,11,1,
		11,1,11,1,11,1,11,1,11,3,11,190,8,11,1,11,1,11,1,11,3,11,195,8,11,3,11,
		197,8,11,1,12,1,12,5,12,201,8,12,10,12,12,12,204,9,12,1,12,1,12,1,13,1,
		13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,
		13,1,13,1,13,3,13,226,8,13,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,
		1,14,1,14,1,14,1,14,1,14,3,14,242,8,14,1,15,1,15,1,15,1,15,1,15,1,15,1,
		15,1,15,1,15,1,15,3,15,254,8,15,1,15,1,15,1,15,1,15,1,15,3,15,261,8,15,
		1,15,1,15,1,15,3,15,266,8,15,1,16,1,16,1,16,1,16,1,16,1,16,3,16,274,8,
		16,1,16,3,16,277,8,16,1,17,1,17,1,17,1,17,1,17,3,17,284,8,17,1,17,1,17,
		1,17,1,18,1,18,1,18,5,18,292,8,18,10,18,12,18,295,9,18,1,18,1,18,1,19,
		1,19,1,20,1,20,3,20,303,8,20,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,3,
		21,313,8,21,1,21,1,21,1,21,1,21,1,21,5,21,320,8,21,10,21,12,21,323,9,21,
		1,21,1,21,1,21,1,21,1,21,1,21,1,21,3,21,332,8,21,1,22,1,22,1,22,1,22,1,
		22,1,22,1,22,1,22,3,22,342,8,22,1,22,3,22,345,8,22,1,22,1,22,1,22,1,22,
		1,22,3,22,352,8,22,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,
		23,1,23,1,23,3,23,367,8,23,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,
		1,24,1,24,1,24,5,24,381,8,24,10,24,12,24,384,9,24,1,25,1,25,1,25,1,25,
		1,25,1,25,1,25,1,25,1,25,5,25,395,8,25,10,25,12,25,398,9,25,1,26,1,26,
		1,26,1,26,1,26,1,26,1,26,1,26,1,26,5,26,409,8,26,10,26,12,26,412,9,26,
		1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,
		1,27,5,27,429,8,27,10,27,12,27,432,9,27,1,28,1,28,1,28,1,28,1,28,1,28,
		1,28,1,28,1,28,5,28,443,8,28,10,28,12,28,446,9,28,1,29,1,29,1,29,1,29,
		1,29,1,29,5,29,454,8,29,10,29,12,29,457,9,29,1,30,1,30,1,30,1,30,1,30,
		1,30,5,30,465,8,30,10,30,12,30,468,9,30,1,31,1,31,1,31,1,31,1,31,1,31,
		3,31,476,8,31,1,31,1,31,1,31,1,31,3,31,482,8,31,3,31,484,8,31,1,32,1,32,
		1,33,1,33,1,33,1,33,1,33,3,33,493,8,33,1,33,1,33,1,33,1,33,1,33,1,33,1,
		33,3,33,502,8,33,1,34,1,34,1,34,1,34,1,34,1,34,3,34,510,8,34,1,35,1,35,
		1,36,1,36,1,37,1,37,1,38,1,38,1,39,1,39,1,40,1,40,1,40,0,9,14,18,48,50,
		52,54,56,58,60,41,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,
		38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,0,5,
		1,0,7,13,1,0,43,48,1,0,3,4,1,0,5,6,1,0,71,72,562,0,108,1,0,0,0,2,110,1,
		0,0,0,4,118,1,0,0,0,6,120,1,0,0,0,8,123,1,0,0,0,10,126,1,0,0,0,12,140,
		1,0,0,0,14,142,1,0,0,0,16,153,1,0,0,0,18,159,1,0,0,0,20,181,1,0,0,0,22,
		183,1,0,0,0,24,198,1,0,0,0,26,225,1,0,0,0,28,241,1,0,0,0,30,265,1,0,0,
		0,32,276,1,0,0,0,34,278,1,0,0,0,36,288,1,0,0,0,38,298,1,0,0,0,40,302,1,
		0,0,0,42,331,1,0,0,0,44,351,1,0,0,0,46,366,1,0,0,0,48,368,1,0,0,0,50,385,
		1,0,0,0,52,399,1,0,0,0,54,413,1,0,0,0,56,433,1,0,0,0,58,447,1,0,0,0,60,
		458,1,0,0,0,62,483,1,0,0,0,64,485,1,0,0,0,66,501,1,0,0,0,68,509,1,0,0,
		0,70,511,1,0,0,0,72,513,1,0,0,0,74,515,1,0,0,0,76,517,1,0,0,0,78,519,1,
		0,0,0,80,521,1,0,0,0,82,84,3,2,1,0,83,82,1,0,0,0,84,87,1,0,0,0,85,83,1,
		0,0,0,85,86,1,0,0,0,86,91,1,0,0,0,87,85,1,0,0,0,88,90,3,4,2,0,89,88,1,
		0,0,0,90,93,1,0,0,0,91,89,1,0,0,0,91,92,1,0,0,0,92,94,1,0,0,0,93,91,1,
		0,0,0,94,95,3,6,3,0,95,96,3,8,4,0,96,109,1,0,0,0,97,99,3,2,1,0,98,97,1,
		0,0,0,99,102,1,0,0,0,100,98,1,0,0,0,100,101,1,0,0,0,101,104,1,0,0,0,102,
		100,1,0,0,0,103,105,3,10,5,0,104,103,1,0,0,0,105,106,1,0,0,0,106,104,1,
		0,0,0,106,107,1,0,0,0,107,109,1,0,0,0,108,85,1,0,0,0,108,100,1,0,0,0,109,
		1,1,0,0,0,110,111,5,28,0,0,111,112,3,72,36,0,112,113,5,36,0,0,113,3,1,
		0,0,0,114,119,3,10,5,0,115,116,3,22,11,0,116,117,5,36,0,0,117,119,1,0,
		0,0,118,114,1,0,0,0,118,115,1,0,0,0,119,5,1,0,0,0,120,121,5,16,0,0,121,
		122,3,24,12,0,122,7,1,0,0,0,123,124,5,15,0,0,124,125,3,24,12,0,125,9,1,
		0,0,0,126,127,3,12,6,0,127,128,3,70,35,0,128,132,5,30,0,0,129,131,3,14,
		7,0,130,129,1,0,0,0,131,134,1,0,0,0,132,130,1,0,0,0,132,133,1,0,0,0,133,
		135,1,0,0,0,134,132,1,0,0,0,135,138,5,31,0,0,136,139,3,24,12,0,137,139,
		5,36,0,0,138,136,1,0,0,0,138,137,1,0,0,0,139,11,1,0,0,0,140,141,7,0,0,
		0,141,13,1,0,0,0,142,143,6,7,-1,0,143,144,3,16,8,0,144,150,1,0,0,0,145,
		146,10,1,0,0,146,147,5,38,0,0,147,149,3,16,8,0,148,145,1,0,0,0,149,152,
		1,0,0,0,150,148,1,0,0,0,150,151,1,0,0,0,151,15,1,0,0,0,152,150,1,0,0,0,
		153,154,3,12,6,0,154,157,3,70,35,0,155,156,5,34,0,0,156,158,5,35,0,0,157,
		155,1,0,0,0,157,158,1,0,0,0,158,17,1,0,0,0,159,160,6,9,-1,0,160,161,3,
		20,10,0,161,167,1,0,0,0,162,163,10,1,0,0,163,164,5,38,0,0,164,166,3,20,
		10,0,165,162,1,0,0,0,166,169,1,0,0,0,167,165,1,0,0,0,167,168,1,0,0,0,168,
		19,1,0,0,0,169,167,1,0,0,0,170,175,3,70,35,0,171,172,5,34,0,0,172,173,
		3,40,20,0,173,174,5,35,0,0,174,176,1,0,0,0,175,171,1,0,0,0,175,176,1,0,
		0,0,176,182,1,0,0,0,177,182,3,36,18,0,178,182,3,80,40,0,179,182,5,70,0,
		0,180,182,5,1,0,0,181,170,1,0,0,0,181,177,1,0,0,0,181,178,1,0,0,0,181,
		179,1,0,0,0,181,180,1,0,0,0,182,21,1,0,0,0,183,184,3,12,6,0,184,189,3,
		70,35,0,185,186,5,34,0,0,186,187,3,40,20,0,187,188,5,35,0,0,188,190,1,
		0,0,0,189,185,1,0,0,0,189,190,1,0,0,0,190,196,1,0,0,0,191,194,5,43,0,0,
		192,195,3,64,32,0,193,195,3,36,18,0,194,192,1,0,0,0,194,193,1,0,0,0,195,
		197,1,0,0,0,196,191,1,0,0,0,196,197,1,0,0,0,197,23,1,0,0,0,198,202,5,32,
		0,0,199,201,3,26,13,0,200,199,1,0,0,0,201,204,1,0,0,0,202,200,1,0,0,0,
		202,203,1,0,0,0,203,205,1,0,0,0,204,202,1,0,0,0,205,206,5,33,0,0,206,25,
		1,0,0,0,207,226,3,28,14,0,208,226,3,30,15,0,209,226,3,32,16,0,210,211,
		3,22,11,0,211,212,5,36,0,0,212,226,1,0,0,0,213,214,3,36,18,0,214,215,5,
		36,0,0,215,226,1,0,0,0,216,217,3,68,34,0,217,218,5,36,0,0,218,226,1,0,
		0,0,219,220,3,34,17,0,220,221,5,36,0,0,221,226,1,0,0,0,222,223,3,64,32,
		0,223,224,5,36,0,0,224,226,1,0,0,0,225,207,1,0,0,0,225,208,1,0,0,0,225,
		209,1,0,0,0,225,210,1,0,0,0,225,213,1,0,0,0,225,216,1,0,0,0,225,219,1,
		0,0,0,225,222,1,0,0,0,226,27,1,0,0,0,227,228,5,21,0,0,228,229,5,30,0,0,
		229,230,3,64,32,0,230,231,5,31,0,0,231,232,3,24,12,0,232,233,5,22,0,0,
		233,234,3,24,12,0,234,242,1,0,0,0,235,236,5,21,0,0,236,237,5,30,0,0,237,
		238,3,64,32,0,238,239,5,31,0,0,239,240,3,24,12,0,240,242,1,0,0,0,241,227,
		1,0,0,0,241,235,1,0,0,0,242,29,1,0,0,0,243,244,5,23,0,0,244,245,5,30,0,
		0,245,246,3,64,32,0,246,247,5,31,0,0,247,248,3,24,12,0,248,266,1,0,0,0,
		249,250,5,24,0,0,250,253,5,30,0,0,251,254,3,64,32,0,252,254,3,22,11,0,
		253,251,1,0,0,0,253,252,1,0,0,0,254,255,1,0,0,0,255,256,5,36,0,0,256,257,
		3,64,32,0,257,260,5,36,0,0,258,261,3,64,32,0,259,261,3,34,17,0,260,258,
		1,0,0,0,260,259,1,0,0,0,261,262,1,0,0,0,262,263,5,31,0,0,263,264,3,24,
		12,0,264,266,1,0,0,0,265,243,1,0,0,0,265,249,1,0,0,0,266,31,1,0,0,0,267,
		268,5,25,0,0,268,277,5,36,0,0,269,270,5,26,0,0,270,277,5,36,0,0,271,273,
		5,27,0,0,272,274,3,64,32,0,273,272,1,0,0,0,273,274,1,0,0,0,274,275,1,0,
		0,0,275,277,5,36,0,0,276,267,1,0,0,0,276,269,1,0,0,0,276,271,1,0,0,0,277,
		33,1,0,0,0,278,283,3,70,35,0,279,280,5,34,0,0,280,281,3,40,20,0,281,282,
		5,35,0,0,282,284,1,0,0,0,283,279,1,0,0,0,283,284,1,0,0,0,284,285,1,0,0,
		0,285,286,3,74,37,0,286,287,3,64,32,0,287,35,1,0,0,0,288,289,3,70,35,0,
		289,293,5,30,0,0,290,292,3,18,9,0,291,290,1,0,0,0,292,295,1,0,0,0,293,
		291,1,0,0,0,293,294,1,0,0,0,294,296,1,0,0,0,295,293,1,0,0,0,296,297,5,
		31,0,0,297,37,1,0,0,0,298,299,3,44,22,0,299,39,1,0,0,0,300,303,5,72,0,
		0,301,303,3,70,35,0,302,300,1,0,0,0,302,301,1,0,0,0,303,41,1,0,0,0,304,
		332,3,80,40,0,305,332,5,1,0,0,306,332,5,70,0,0,307,312,3,70,35,0,308,309,
		5,34,0,0,309,310,3,40,20,0,310,311,5,35,0,0,311,313,1,0,0,0,312,308,1,
		0,0,0,312,313,1,0,0,0,313,332,1,0,0,0,314,332,3,36,18,0,315,321,5,32,0,
		0,316,317,3,38,19,0,317,318,5,38,0,0,318,320,1,0,0,0,319,316,1,0,0,0,320,
		323,1,0,0,0,321,319,1,0,0,0,321,322,1,0,0,0,322,324,1,0,0,0,323,321,1,
		0,0,0,324,325,3,38,19,0,325,326,5,33,0,0,326,332,1,0,0,0,327,328,5,30,
		0,0,328,329,3,64,32,0,329,330,5,31,0,0,330,332,1,0,0,0,331,304,1,0,0,0,
		331,305,1,0,0,0,331,306,1,0,0,0,331,307,1,0,0,0,331,314,1,0,0,0,331,315,
		1,0,0,0,331,327,1,0,0,0,332,43,1,0,0,0,333,352,3,42,21,0,334,344,5,53,
		0,0,335,345,3,80,40,0,336,341,3,70,35,0,337,338,5,34,0,0,338,339,3,40,
		20,0,339,340,5,35,0,0,340,342,1,0,0,0,341,337,1,0,0,0,341,342,1,0,0,0,
		342,345,1,0,0,0,343,345,3,36,18,0,344,335,1,0,0,0,344,336,1,0,0,0,344,
		343,1,0,0,0,345,352,1,0,0,0,346,347,5,53,0,0,347,348,5,30,0,0,348,349,
		3,64,32,0,349,350,5,31,0,0,350,352,1,0,0,0,351,333,1,0,0,0,351,334,1,0,
		0,0,351,346,1,0,0,0,352,45,1,0,0,0,353,367,3,44,22,0,354,355,3,70,35,0,
		355,356,5,66,0,0,356,367,1,0,0,0,357,358,3,70,35,0,358,359,5,67,0,0,359,
		367,1,0,0,0,360,361,5,66,0,0,361,367,3,70,35,0,362,363,5,67,0,0,363,367,
		3,70,35,0,364,365,5,63,0,0,365,367,3,44,22,0,366,353,1,0,0,0,366,354,1,
		0,0,0,366,357,1,0,0,0,366,360,1,0,0,0,366,362,1,0,0,0,366,364,1,0,0,0,
		367,47,1,0,0,0,368,369,6,24,-1,0,369,370,3,46,23,0,370,382,1,0,0,0,371,
		372,10,3,0,0,372,373,5,50,0,0,373,381,3,42,21,0,374,375,10,2,0,0,375,376,
		5,51,0,0,376,381,3,42,21,0,377,378,10,1,0,0,378,379,5,54,0,0,379,381,3,
		42,21,0,380,371,1,0,0,0,380,374,1,0,0,0,380,377,1,0,0,0,381,384,1,0,0,
		0,382,380,1,0,0,0,382,383,1,0,0,0,383,49,1,0,0,0,384,382,1,0,0,0,385,386,
		6,25,-1,0,386,387,3,48,24,0,387,396,1,0,0,0,388,389,10,2,0,0,389,390,5,
		52,0,0,390,395,3,48,24,0,391,392,10,1,0,0,392,393,5,53,0,0,393,395,3,48,
		24,0,394,388,1,0,0,0,394,391,1,0,0,0,395,398,1,0,0,0,396,394,1,0,0,0,396,
		397,1,0,0,0,397,51,1,0,0,0,398,396,1,0,0,0,399,400,6,26,-1,0,400,401,3,
		50,25,0,401,410,1,0,0,0,402,403,10,2,0,0,403,404,5,64,0,0,404,409,3,50,
		25,0,405,406,10,1,0,0,406,407,5,65,0,0,407,409,3,50,25,0,408,402,1,0,0,
		0,408,405,1,0,0,0,409,412,1,0,0,0,410,408,1,0,0,0,410,411,1,0,0,0,411,
		53,1,0,0,0,412,410,1,0,0,0,413,414,6,27,-1,0,414,415,3,52,26,0,415,430,
		1,0,0,0,416,417,10,4,0,0,417,418,5,60,0,0,418,429,3,52,26,0,419,420,10,
		3,0,0,420,421,5,59,0,0,421,429,3,52,26,0,422,423,10,2,0,0,423,424,5,62,
		0,0,424,429,3,52,26,0,425,426,10,1,0,0,426,427,5,61,0,0,427,429,3,52,26,
		0,428,416,1,0,0,0,428,419,1,0,0,0,428,422,1,0,0,0,428,425,1,0,0,0,429,
		432,1,0,0,0,430,428,1,0,0,0,430,431,1,0,0,0,431,55,1,0,0,0,432,430,1,0,
		0,0,433,434,6,28,-1,0,434,435,3,54,27,0,435,444,1,0,0,0,436,437,10,2,0,
		0,437,438,5,57,0,0,438,443,3,54,27,0,439,440,10,1,0,0,440,441,5,58,0,0,
		441,443,3,54,27,0,442,436,1,0,0,0,442,439,1,0,0,0,443,446,1,0,0,0,444,
		442,1,0,0,0,444,445,1,0,0,0,445,57,1,0,0,0,446,444,1,0,0,0,447,448,6,29,
		-1,0,448,449,3,56,28,0,449,455,1,0,0,0,450,451,10,1,0,0,451,452,5,55,0,
		0,452,454,3,56,28,0,453,450,1,0,0,0,454,457,1,0,0,0,455,453,1,0,0,0,455,
		456,1,0,0,0,456,59,1,0,0,0,457,455,1,0,0,0,458,459,6,30,-1,0,459,460,3,
		58,29,0,460,466,1,0,0,0,461,462,10,1,0,0,462,463,5,56,0,0,463,465,3,58,
		29,0,464,461,1,0,0,0,465,468,1,0,0,0,466,464,1,0,0,0,466,467,1,0,0,0,467,
		61,1,0,0,0,468,466,1,0,0,0,469,484,3,60,30,0,470,471,3,60,30,0,471,475,
		5,29,0,0,472,476,3,64,32,0,473,476,3,36,18,0,474,476,3,34,17,0,475,472,
		1,0,0,0,475,473,1,0,0,0,475,474,1,0,0,0,476,477,1,0,0,0,477,481,5,39,0,
		0,478,482,3,64,32,0,479,482,3,36,18,0,480,482,3,34,17,0,481,478,1,0,0,
		0,481,479,1,0,0,0,481,480,1,0,0,0,482,484,1,0,0,0,483,469,1,0,0,0,483,
		470,1,0,0,0,484,63,1,0,0,0,485,486,3,62,31,0,486,65,1,0,0,0,487,492,5,
		20,0,0,488,493,3,76,38,0,489,493,5,1,0,0,490,493,3,70,35,0,491,493,5,72,
		0,0,492,488,1,0,0,0,492,489,1,0,0,0,492,490,1,0,0,0,492,491,1,0,0,0,493,
		494,1,0,0,0,494,495,5,18,0,0,495,502,3,70,35,0,496,497,5,19,0,0,497,498,
		3,70,35,0,498,499,5,18,0,0,499,500,3,70,35,0,500,502,1,0,0,0,501,487,1,
		0,0,0,501,496,1,0,0,0,502,67,1,0,0,0,503,510,3,66,33,0,504,505,5,17,0,
		0,505,506,3,70,35,0,506,507,5,18,0,0,507,508,3,78,39,0,508,510,1,0,0,0,
		509,503,1,0,0,0,509,504,1,0,0,0,510,69,1,0,0,0,511,512,5,68,0,0,512,71,
		1,0,0,0,513,514,5,69,0,0,514,73,1,0,0,0,515,516,7,1,0,0,516,75,1,0,0,0,
		517,518,7,2,0,0,518,77,1,0,0,0,519,520,7,3,0,0,520,79,1,0,0,0,521,522,
		7,4,0,0,522,81,1,0,0,0,52,85,91,100,106,108,118,132,138,150,157,167,175,
		181,189,194,196,202,225,241,253,260,265,273,276,283,293,302,312,321,331,
		341,344,351,366,380,382,394,396,408,410,428,430,442,444,455,466,475,481,
		483,492,501,509
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
