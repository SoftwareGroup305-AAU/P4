namespace P4.TinyCell.Shared.Utilities
{
    
    /// <summary>
    /// Represents an instruction in the liveliness analysis./// </summary>
    /// <typeparam name="T">The type of <see cref="ParserRuleContext"/> instruction  </typeparam>
    public class Instruction<T> : IInstruction
    {
        /// <summary>
        /// Gets or sets the instruction.
        /// </summary>
        public T? baseInstruction { get; set; }

        public Instruction(T instruction)
        {
            baseInstruction = instruction;
            gen = [];
            kill = [];
            succ = [];
            outs = new HashSet<string>();
            ins = new HashSet<string>();
        }

        /// <summary>
        /// Gets or sets the set of variables generated by this instruction.
        /// </summary>
        public HashSet<string>? gen { get; set; }

        /// <summary>
        /// Gets or sets the set of variables killed by this instruction.
        /// </summary>
        public HashSet<string>? kill { get; set; }

        /// <summary>
        /// Gets or sets the set of succeeding instructions
        /// </summary>
        public HashSet<IInstruction>? succ { get; set; }

        public HashSet<string>? outs { get; set; }

        public HashSet<string>? ins { get; set; }

        public void addGen(string id)
        {
            gen.Add(id);
        }

        public void addKill(string id)
        {
            kill.Add(id);
        }

        public void addSucc(IInstruction instruction)
        {
            succ.Add(instruction);

        }

        public HashSet<IInstruction> getSucc()
        {
            return succ;
        }

        public HashSet<string> getIns()
        {
            return ins;
        }

        public HashSet<string> getGen()
        {
            return gen;
        }

        public HashSet<string> getOuts()
        {
            return outs;
        }

        public HashSet<string> getKill()
        {
            return kill;
        }

        public void setIns(HashSet<string> newIns)
        {
            ins = newIns;
        }

        public void setOuts(HashSet<string> newOuts)
        {
            outs = newOuts;
        }

        public object Clone()
        {
            Instruction<T> clone = new Instruction<T>(baseInstruction);

            clone.gen = new HashSet<string>(gen);
            clone.kill = new HashSet<string>(kill);
            clone.succ = new HashSet<IInstruction>(succ);
            clone.outs = new HashSet<string>(outs);
            clone.ins = new HashSet<string>(ins);

            return clone;
        }

    }
    /// <summary>
    /// Interface to generalize instruction to generic
    /// </summary>
    public interface IInstruction : ICloneable
    {
        public void addGen(string id);

        public void addKill(string id);

        public void addSucc(IInstruction instruction);

        public HashSet<IInstruction> getSucc();

        public HashSet<string> getIns();

        public HashSet<string> getGen();

        public HashSet<string> getOuts();

        public HashSet<string> getKill();

        public void setIns(HashSet<string> newSet);
        public void setOuts(HashSet<string> newOuts);
    }
}