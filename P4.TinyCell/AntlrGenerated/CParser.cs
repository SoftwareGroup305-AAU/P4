//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from AntlrCSharp/Grammar/C.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

namespace P4.TinyCell.AntlrGenerated;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class CParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, T__26=27, T__27=28, T__28=29, T__29=30, T__30=31, 
		T__31=32, T__32=33, T__33=34, T__34=35, T__35=36, T__36=37, T__37=38, 
		T__38=39, T__39=40, T__40=41, T__41=42, T__42=43, T__43=44, T__44=45, 
		T__45=46, T__46=47, T__47=48, T__48=49, T__49=50, T__50=51, T__51=52, 
		T__52=53, T__53=54, T__54=55, T__55=56, T__56=57, T__57=58, T__58=59, 
		T__59=60;
	public const int
		RULE_document = 0, RULE_generaldeclaration = 1, RULE_functiondefinition = 2, 
		RULE_funcitondefinition = 3, RULE_type = 4, RULE_conditionalexpression = 5, 
		RULE_logicalorexpression = 6, RULE_logicalandexpression = 7, RULE_inclusiveorexpression = 8, 
		RULE_exclusiveorexpression = 9, RULE_andexpression = 10, RULE_equalityexpression = 11, 
		RULE_relationalexpression = 12, RULE_bitshiftexpression = 13, RULE_additiveexpression = 14, 
		RULE_multiplicativeexpression = 15, RULE_castexpression = 16, RULE_typename = 17, 
		RULE_unaryexpression = 18, RULE_postfixexpression = 19, RULE_primaryexpression = 20, 
		RULE_expression = 21, RULE_assignmentexpression = 22, RULE_assignmentoperator = 23, 
		RULE_unaryoperator = 24, RULE_parameterlist = 25, RULE_identifier = 26, 
		RULE_parameterdeclaration = 27, RULE_declaration = 28, RULE_initialdeclarator = 29, 
		RULE_initializer = 30, RULE_initializerlist = 31, RULE_compoundstatement = 32, 
		RULE_statement = 33, RULE_labeledstatement = 34, RULE_expressionstatement = 35, 
		RULE_selectionstatement = 36, RULE_iterationstatement = 37, RULE_jumpstatement = 38;
	public static readonly string[] ruleNames = {
		"document", "generaldeclaration", "functiondefinition", "funcitondefinition", 
		"type", "conditionalexpression", "logicalorexpression", "logicalandexpression", 
		"inclusiveorexpression", "exclusiveorexpression", "andexpression", "equalityexpression", 
		"relationalexpression", "bitshiftexpression", "additiveexpression", "multiplicativeexpression", 
		"castexpression", "typename", "unaryexpression", "postfixexpression", 
		"primaryexpression", "expression", "assignmentexpression", "assignmentoperator", 
		"unaryoperator", "parameterlist", "identifier", "parameterdeclaration", 
		"declaration", "initialdeclarator", "initializer", "initializerlist", 
		"compoundstatement", "statement", "labeledstatement", "expressionstatement", 
		"selectionstatement", "iterationstatement", "jumpstatement"
	};

	private static readonly string[] _LiteralNames = {
		null, "'('", "')'", "'void'", "'char'", "'identifier'", "'int'", "'float'", 
		"'signed'", "'unsigned'", "'bool'", "'pin'", "'?'", "':'", "'||'", "'&&'", 
		"'|'", "'^'", "'&'", "'=='", "'!='", "'<'", "'>'", "'='", "'<<'", "'>>'", 
		"'+'", "'-'", "'*'", "'/'", "'%'", "'typ'", "'++'", "'--'", "'sizeof'", 
		"'['", "']'", "'.'", "'->'", "','", "'*='", "'/='", "'%='", "'+='", "'!'", 
		"'a'", "';'", "'{'", "'}'", "'case'", "'default'", "'if'", "'else'", "'switch'", 
		"'while'", "'do'", "'for'", "'goto'", "'continue'", "'break'", "'return'"
	};
	private static readonly string[] _SymbolicNames = {
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "C.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static CParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public CParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public CParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class DocumentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public GeneraldeclarationContext generaldeclaration() {
			return GetRuleContext<GeneraldeclarationContext>(0);
		}
		public DocumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_document; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.EnterDocument(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.ExitDocument(this);
		}
	}

	[RuleVersion(0)]
	public DocumentContext document() {
		DocumentContext _localctx = new DocumentContext(Context, State);
		EnterRule(_localctx, 0, RULE_document);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 78;
			generaldeclaration();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GeneraldeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunctiondefinitionContext functiondefinition() {
			return GetRuleContext<FunctiondefinitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationContext declaration() {
			return GetRuleContext<DeclarationContext>(0);
		}
		public GeneraldeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_generaldeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.EnterGeneraldeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.ExitGeneraldeclaration(this);
		}
	}

	[RuleVersion(0)]
	public GeneraldeclarationContext generaldeclaration() {
		GeneraldeclarationContext _localctx = new GeneraldeclarationContext(Context, State);
		EnterRule(_localctx, 2, RULE_generaldeclaration);
		try {
			State = 82;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,0,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 80;
				functiondefinition();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 81;
				declaration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctiondefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationContext declaration() {
			return GetRuleContext<DeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CompoundstatementContext compoundstatement() {
			return GetRuleContext<CompoundstatementContext>(0);
		}
		public FunctiondefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functiondefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.EnterFunctiondefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.ExitFunctiondefinition(this);
		}
	}

	[RuleVersion(0)]
	public FunctiondefinitionContext functiondefinition() {
		FunctiondefinitionContext _localctx = new FunctiondefinitionContext(Context, State);
		EnterRule(_localctx, 4, RULE_functiondefinition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 84;
			type();
			State = 85;
			identifier();
			State = 86;
			declaration();
			State = 87;
			compoundstatement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FuncitondefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParameterlistContext parameterlist() {
			return GetRuleContext<ParameterlistContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CompoundstatementContext compoundstatement() {
			return GetRuleContext<CompoundstatementContext>(0);
		}
		public FuncitondefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funcitondefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.EnterFuncitondefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.ExitFuncitondefinition(this);
		}
	}

	[RuleVersion(0)]
	public FuncitondefinitionContext funcitondefinition() {
		FuncitondefinitionContext _localctx = new FuncitondefinitionContext(Context, State);
		EnterRule(_localctx, 6, RULE_funcitondefinition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 89;
			type();
			State = 90;
			identifier();
			State = 91;
			Match(T__0);
			State = 92;
			parameterlist(0);
			State = 93;
			Match(T__1);
			State = 94;
			compoundstatement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.EnterType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.ExitType(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(Context, State);
		EnterRule(_localctx, 8, RULE_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 96;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 4088L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConditionalexpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LogicalorexpressionContext logicalorexpression() {
			return GetRuleContext<LogicalorexpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConditionalexpressionContext conditionalexpression() {
			return GetRuleContext<ConditionalexpressionContext>(0);
		}
		public ConditionalexpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conditionalexpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.EnterConditionalexpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.ExitConditionalexpression(this);
		}
	}

	[RuleVersion(0)]
	public ConditionalexpressionContext conditionalexpression() {
		ConditionalexpressionContext _localctx = new ConditionalexpressionContext(Context, State);
		EnterRule(_localctx, 10, RULE_conditionalexpression);
		try {
			State = 105;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 98;
				logicalorexpression(0);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 99;
				logicalorexpression(0);
				State = 100;
				Match(T__11);
				State = 101;
				expression(0);
				State = 102;
				Match(T__12);
				State = 103;
				conditionalexpression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LogicalorexpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LogicalandexpressionContext logicalandexpression() {
			return GetRuleContext<LogicalandexpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LogicalorexpressionContext logicalorexpression() {
			return GetRuleContext<LogicalorexpressionContext>(0);
		}
		public LogicalorexpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_logicalorexpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.EnterLogicalorexpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.ExitLogicalorexpression(this);
		}
	}

	[RuleVersion(0)]
	public LogicalorexpressionContext logicalorexpression() {
		return logicalorexpression(0);
	}

	private LogicalorexpressionContext logicalorexpression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		LogicalorexpressionContext _localctx = new LogicalorexpressionContext(Context, _parentState);
		LogicalorexpressionContext _prevctx = _localctx;
		int _startState = 12;
		EnterRecursionRule(_localctx, 12, RULE_logicalorexpression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 108;
			logicalandexpression(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 115;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,2,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new LogicalorexpressionContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_logicalorexpression);
					State = 110;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 111;
					Match(T__13);
					State = 112;
					logicalandexpression(0);
					}
					} 
				}
				State = 117;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,2,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class LogicalandexpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public InclusiveorexpressionContext inclusiveorexpression() {
			return GetRuleContext<InclusiveorexpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LogicalandexpressionContext logicalandexpression() {
			return GetRuleContext<LogicalandexpressionContext>(0);
		}
		public LogicalandexpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_logicalandexpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.EnterLogicalandexpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.ExitLogicalandexpression(this);
		}
	}

	[RuleVersion(0)]
	public LogicalandexpressionContext logicalandexpression() {
		return logicalandexpression(0);
	}

	private LogicalandexpressionContext logicalandexpression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		LogicalandexpressionContext _localctx = new LogicalandexpressionContext(Context, _parentState);
		LogicalandexpressionContext _prevctx = _localctx;
		int _startState = 14;
		EnterRecursionRule(_localctx, 14, RULE_logicalandexpression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 119;
			inclusiveorexpression(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 126;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,3,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new LogicalandexpressionContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_logicalandexpression);
					State = 121;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 122;
					Match(T__14);
					State = 123;
					inclusiveorexpression(0);
					}
					} 
				}
				State = 128;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,3,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class InclusiveorexpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExclusiveorexpressionContext exclusiveorexpression() {
			return GetRuleContext<ExclusiveorexpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InclusiveorexpressionContext inclusiveorexpression() {
			return GetRuleContext<InclusiveorexpressionContext>(0);
		}
		public InclusiveorexpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inclusiveorexpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.EnterInclusiveorexpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.ExitInclusiveorexpression(this);
		}
	}

	[RuleVersion(0)]
	public InclusiveorexpressionContext inclusiveorexpression() {
		return inclusiveorexpression(0);
	}

	private InclusiveorexpressionContext inclusiveorexpression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		InclusiveorexpressionContext _localctx = new InclusiveorexpressionContext(Context, _parentState);
		InclusiveorexpressionContext _prevctx = _localctx;
		int _startState = 16;
		EnterRecursionRule(_localctx, 16, RULE_inclusiveorexpression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 130;
			exclusiveorexpression(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 137;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,4,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new InclusiveorexpressionContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_inclusiveorexpression);
					State = 132;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 133;
					Match(T__15);
					State = 134;
					exclusiveorexpression(0);
					}
					} 
				}
				State = 139;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,4,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ExclusiveorexpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AndexpressionContext andexpression() {
			return GetRuleContext<AndexpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExclusiveorexpressionContext exclusiveorexpression() {
			return GetRuleContext<ExclusiveorexpressionContext>(0);
		}
		public ExclusiveorexpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exclusiveorexpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.EnterExclusiveorexpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.ExitExclusiveorexpression(this);
		}
	}

	[RuleVersion(0)]
	public ExclusiveorexpressionContext exclusiveorexpression() {
		return exclusiveorexpression(0);
	}

	private ExclusiveorexpressionContext exclusiveorexpression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExclusiveorexpressionContext _localctx = new ExclusiveorexpressionContext(Context, _parentState);
		ExclusiveorexpressionContext _prevctx = _localctx;
		int _startState = 18;
		EnterRecursionRule(_localctx, 18, RULE_exclusiveorexpression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 141;
			andexpression(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 148;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,5,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new ExclusiveorexpressionContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_exclusiveorexpression);
					State = 143;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 144;
					Match(T__16);
					State = 145;
					andexpression(0);
					}
					} 
				}
				State = 150;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,5,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class AndexpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public EqualityexpressionContext equalityexpression() {
			return GetRuleContext<EqualityexpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AndexpressionContext andexpression() {
			return GetRuleContext<AndexpressionContext>(0);
		}
		public AndexpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_andexpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.EnterAndexpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.ExitAndexpression(this);
		}
	}

	[RuleVersion(0)]
	public AndexpressionContext andexpression() {
		return andexpression(0);
	}

	private AndexpressionContext andexpression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		AndexpressionContext _localctx = new AndexpressionContext(Context, _parentState);
		AndexpressionContext _prevctx = _localctx;
		int _startState = 20;
		EnterRecursionRule(_localctx, 20, RULE_andexpression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 152;
			equalityexpression(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 159;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,6,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new AndexpressionContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_andexpression);
					State = 154;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 155;
					Match(T__17);
					State = 156;
					equalityexpression(0);
					}
					} 
				}
				State = 161;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,6,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class EqualityexpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public RelationalexpressionContext relationalexpression() {
			return GetRuleContext<RelationalexpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EqualityexpressionContext equalityexpression() {
			return GetRuleContext<EqualityexpressionContext>(0);
		}
		public EqualityexpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_equalityexpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.EnterEqualityexpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.ExitEqualityexpression(this);
		}
	}

	[RuleVersion(0)]
	public EqualityexpressionContext equalityexpression() {
		return equalityexpression(0);
	}

	private EqualityexpressionContext equalityexpression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		EqualityexpressionContext _localctx = new EqualityexpressionContext(Context, _parentState);
		EqualityexpressionContext _prevctx = _localctx;
		int _startState = 22;
		EnterRecursionRule(_localctx, 22, RULE_equalityexpression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 163;
			relationalexpression(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 173;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,8,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 171;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
					case 1:
						{
						_localctx = new EqualityexpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_equalityexpression);
						State = 165;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 166;
						Match(T__18);
						State = 167;
						relationalexpression(0);
						}
						break;
					case 2:
						{
						_localctx = new EqualityexpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_equalityexpression);
						State = 168;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 169;
						Match(T__19);
						State = 170;
						relationalexpression(0);
						}
						break;
					}
					} 
				}
				State = 175;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,8,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class RelationalexpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BitshiftexpressionContext bitshiftexpression() {
			return GetRuleContext<BitshiftexpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RelationalexpressionContext relationalexpression() {
			return GetRuleContext<RelationalexpressionContext>(0);
		}
		public RelationalexpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_relationalexpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.EnterRelationalexpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.ExitRelationalexpression(this);
		}
	}

	[RuleVersion(0)]
	public RelationalexpressionContext relationalexpression() {
		return relationalexpression(0);
	}

	private RelationalexpressionContext relationalexpression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		RelationalexpressionContext _localctx = new RelationalexpressionContext(Context, _parentState);
		RelationalexpressionContext _prevctx = _localctx;
		int _startState = 24;
		EnterRecursionRule(_localctx, 24, RULE_relationalexpression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 177;
			bitshiftexpression(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 193;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,10,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 191;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,9,Context) ) {
					case 1:
						{
						_localctx = new RelationalexpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_relationalexpression);
						State = 179;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 180;
						Match(T__20);
						State = 181;
						bitshiftexpression(0);
						}
						break;
					case 2:
						{
						_localctx = new RelationalexpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_relationalexpression);
						State = 182;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 183;
						Match(T__21);
						State = 184;
						bitshiftexpression(0);
						}
						break;
					case 3:
						{
						_localctx = new RelationalexpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_relationalexpression);
						State = 185;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 186;
						Match(T__22);
						State = 187;
						bitshiftexpression(0);
						}
						break;
					case 4:
						{
						_localctx = new RelationalexpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_relationalexpression);
						State = 188;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 189;
						Match(T__22);
						State = 190;
						bitshiftexpression(0);
						}
						break;
					}
					} 
				}
				State = 195;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,10,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class BitshiftexpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AdditiveexpressionContext additiveexpression() {
			return GetRuleContext<AdditiveexpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BitshiftexpressionContext bitshiftexpression() {
			return GetRuleContext<BitshiftexpressionContext>(0);
		}
		public BitshiftexpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bitshiftexpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.EnterBitshiftexpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.ExitBitshiftexpression(this);
		}
	}

	[RuleVersion(0)]
	public BitshiftexpressionContext bitshiftexpression() {
		return bitshiftexpression(0);
	}

	private BitshiftexpressionContext bitshiftexpression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		BitshiftexpressionContext _localctx = new BitshiftexpressionContext(Context, _parentState);
		BitshiftexpressionContext _prevctx = _localctx;
		int _startState = 26;
		EnterRecursionRule(_localctx, 26, RULE_bitshiftexpression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 197;
			additiveexpression(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 207;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,12,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 205;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,11,Context) ) {
					case 1:
						{
						_localctx = new BitshiftexpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_bitshiftexpression);
						State = 199;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 200;
						Match(T__23);
						State = 201;
						additiveexpression(0);
						}
						break;
					case 2:
						{
						_localctx = new BitshiftexpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_bitshiftexpression);
						State = 202;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 203;
						Match(T__24);
						State = 204;
						additiveexpression(0);
						}
						break;
					}
					} 
				}
				State = 209;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,12,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class AdditiveexpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public MultiplicativeexpressionContext multiplicativeexpression() {
			return GetRuleContext<MultiplicativeexpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AdditiveexpressionContext additiveexpression() {
			return GetRuleContext<AdditiveexpressionContext>(0);
		}
		public AdditiveexpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_additiveexpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.EnterAdditiveexpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.ExitAdditiveexpression(this);
		}
	}

	[RuleVersion(0)]
	public AdditiveexpressionContext additiveexpression() {
		return additiveexpression(0);
	}

	private AdditiveexpressionContext additiveexpression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		AdditiveexpressionContext _localctx = new AdditiveexpressionContext(Context, _parentState);
		AdditiveexpressionContext _prevctx = _localctx;
		int _startState = 28;
		EnterRecursionRule(_localctx, 28, RULE_additiveexpression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 211;
			multiplicativeexpression(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 221;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,14,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 219;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,13,Context) ) {
					case 1:
						{
						_localctx = new AdditiveexpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_additiveexpression);
						State = 213;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 214;
						Match(T__25);
						State = 215;
						multiplicativeexpression(0);
						}
						break;
					case 2:
						{
						_localctx = new AdditiveexpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_additiveexpression);
						State = 216;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 217;
						Match(T__26);
						State = 218;
						multiplicativeexpression(0);
						}
						break;
					}
					} 
				}
				State = 223;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,14,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class MultiplicativeexpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CastexpressionContext[] castexpression() {
			return GetRuleContexts<CastexpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CastexpressionContext castexpression(int i) {
			return GetRuleContext<CastexpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MultiplicativeexpressionContext multiplicativeexpression() {
			return GetRuleContext<MultiplicativeexpressionContext>(0);
		}
		public MultiplicativeexpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multiplicativeexpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.EnterMultiplicativeexpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.ExitMultiplicativeexpression(this);
		}
	}

	[RuleVersion(0)]
	public MultiplicativeexpressionContext multiplicativeexpression() {
		return multiplicativeexpression(0);
	}

	private MultiplicativeexpressionContext multiplicativeexpression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		MultiplicativeexpressionContext _localctx = new MultiplicativeexpressionContext(Context, _parentState);
		MultiplicativeexpressionContext _prevctx = _localctx;
		int _startState = 30;
		EnterRecursionRule(_localctx, 30, RULE_multiplicativeexpression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 225;
			castexpression();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 243;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,17,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 241;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,16,Context) ) {
					case 1:
						{
						_localctx = new MultiplicativeexpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_multiplicativeexpression);
						State = 227;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 228;
						Match(T__27);
						State = 229;
						castexpression();
						}
						break;
					case 2:
						{
						_localctx = new MultiplicativeexpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_multiplicativeexpression);
						State = 230;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 231;
						Match(T__28);
						State = 232;
						castexpression();
						}
						break;
					case 3:
						{
						_localctx = new MultiplicativeexpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_multiplicativeexpression);
						State = 233;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 234;
						Match(T__29);
						State = 238;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream,15,Context);
						while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
							if ( _alt==1 ) {
								{
								{
								State = 235;
								castexpression();
								}
								} 
							}
							State = 240;
							ErrorHandler.Sync(this);
							_alt = Interpreter.AdaptivePredict(TokenStream,15,Context);
						}
						}
						break;
					}
					} 
				}
				State = 245;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,17,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class CastexpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public UnaryexpressionContext unaryexpression() {
			return GetRuleContext<UnaryexpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypenameContext typename() {
			return GetRuleContext<TypenameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CastexpressionContext castexpression() {
			return GetRuleContext<CastexpressionContext>(0);
		}
		public CastexpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_castexpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.EnterCastexpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.ExitCastexpression(this);
		}
	}

	[RuleVersion(0)]
	public CastexpressionContext castexpression() {
		CastexpressionContext _localctx = new CastexpressionContext(Context, State);
		EnterRule(_localctx, 32, RULE_castexpression);
		try {
			State = 252;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,18,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 246;
				unaryexpression();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 247;
				Match(T__0);
				State = 248;
				typename();
				State = 249;
				Match(T__1);
				State = 250;
				castexpression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypenameContext : ParserRuleContext {
		public TypenameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typename; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.EnterTypename(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.ExitTypename(this);
		}
	}

	[RuleVersion(0)]
	public TypenameContext typename() {
		TypenameContext _localctx = new TypenameContext(Context, State);
		EnterRule(_localctx, 34, RULE_typename);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 254;
			Match(T__30);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnaryexpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PostfixexpressionContext postfixexpression() {
			return GetRuleContext<PostfixexpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UnaryexpressionContext unaryexpression() {
			return GetRuleContext<UnaryexpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UnaryoperatorContext unaryoperator() {
			return GetRuleContext<UnaryoperatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CastexpressionContext castexpression() {
			return GetRuleContext<CastexpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypenameContext typename() {
			return GetRuleContext<TypenameContext>(0);
		}
		public UnaryexpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unaryexpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.EnterUnaryexpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.ExitUnaryexpression(this);
		}
	}

	[RuleVersion(0)]
	public UnaryexpressionContext unaryexpression() {
		UnaryexpressionContext _localctx = new UnaryexpressionContext(Context, State);
		EnterRule(_localctx, 36, RULE_unaryexpression);
		try {
			State = 268;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,19,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 256;
				postfixexpression(0);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 257;
				Match(T__31);
				State = 258;
				unaryexpression();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 259;
				Match(T__32);
				State = 260;
				unaryexpression();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 261;
				unaryoperator();
				State = 262;
				castexpression();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 264;
				Match(T__33);
				State = 265;
				unaryexpression();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 266;
				Match(T__33);
				State = 267;
				typename();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PostfixexpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PrimaryexpressionContext primaryexpression() {
			return GetRuleContext<PrimaryexpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PostfixexpressionContext postfixexpression() {
			return GetRuleContext<PostfixexpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentexpressionContext assignmentexpression() {
			return GetRuleContext<AssignmentexpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public PostfixexpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_postfixexpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.EnterPostfixexpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.ExitPostfixexpression(this);
		}
	}

	[RuleVersion(0)]
	public PostfixexpressionContext postfixexpression() {
		return postfixexpression(0);
	}

	private PostfixexpressionContext postfixexpression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		PostfixexpressionContext _localctx = new PostfixexpressionContext(Context, _parentState);
		PostfixexpressionContext _prevctx = _localctx;
		int _startState = 38;
		EnterRecursionRule(_localctx, 38, RULE_postfixexpression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 271;
			primaryexpression();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 295;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,21,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 293;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,20,Context) ) {
					case 1:
						{
						_localctx = new PostfixexpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_postfixexpression);
						State = 273;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 274;
						Match(T__34);
						State = 275;
						expression(0);
						State = 276;
						Match(T__35);
						}
						break;
					case 2:
						{
						_localctx = new PostfixexpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_postfixexpression);
						State = 278;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 279;
						Match(T__0);
						State = 280;
						assignmentexpression();
						State = 281;
						Match(T__1);
						}
						break;
					case 3:
						{
						_localctx = new PostfixexpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_postfixexpression);
						State = 283;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 284;
						Match(T__36);
						State = 285;
						identifier();
						}
						break;
					case 4:
						{
						_localctx = new PostfixexpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_postfixexpression);
						State = 286;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 287;
						Match(T__37);
						State = 288;
						identifier();
						}
						break;
					case 5:
						{
						_localctx = new PostfixexpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_postfixexpression);
						State = 289;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 290;
						Match(T__31);
						}
						break;
					case 6:
						{
						_localctx = new PostfixexpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_postfixexpression);
						State = 291;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 292;
						Match(T__32);
						}
						break;
					}
					} 
				}
				State = 297;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,21,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class PrimaryexpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public PrimaryexpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primaryexpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.EnterPrimaryexpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.ExitPrimaryexpression(this);
		}
	}

	[RuleVersion(0)]
	public PrimaryexpressionContext primaryexpression() {
		PrimaryexpressionContext _localctx = new PrimaryexpressionContext(Context, State);
		EnterRule(_localctx, 40, RULE_primaryexpression);
		try {
			State = 303;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__44:
				EnterOuterAlt(_localctx, 1);
				{
				State = 298;
				identifier();
				}
				break;
			case T__0:
				EnterOuterAlt(_localctx, 2);
				{
				State = 299;
				Match(T__0);
				State = 300;
				expression(0);
				State = 301;
				Match(T__1);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentexpressionContext assignmentexpression() {
			return GetRuleContext<AssignmentexpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 42;
		EnterRecursionRule(_localctx, 42, RULE_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 306;
			assignmentexpression();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 313;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,23,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new ExpressionContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_expression);
					State = 308;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 309;
					Match(T__38);
					State = 310;
					assignmentexpression();
					}
					} 
				}
				State = 315;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,23,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class AssignmentexpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ConditionalexpressionContext conditionalexpression() {
			return GetRuleContext<ConditionalexpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UnaryexpressionContext unaryexpression() {
			return GetRuleContext<UnaryexpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentoperatorContext assignmentoperator() {
			return GetRuleContext<AssignmentoperatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentexpressionContext assignmentexpression() {
			return GetRuleContext<AssignmentexpressionContext>(0);
		}
		public AssignmentexpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignmentexpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.EnterAssignmentexpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.ExitAssignmentexpression(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentexpressionContext assignmentexpression() {
		AssignmentexpressionContext _localctx = new AssignmentexpressionContext(Context, State);
		EnterRule(_localctx, 44, RULE_assignmentexpression);
		try {
			State = 321;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,24,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 316;
				conditionalexpression();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 317;
				unaryexpression();
				State = 318;
				assignmentoperator();
				State = 319;
				assignmentexpression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentoperatorContext : ParserRuleContext {
		public AssignmentoperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignmentoperator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.EnterAssignmentoperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.ExitAssignmentoperator(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentoperatorContext assignmentoperator() {
		AssignmentoperatorContext _localctx = new AssignmentoperatorContext(Context, State);
		EnterRule(_localctx, 46, RULE_assignmentoperator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 323;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 16492682805248L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnaryoperatorContext : ParserRuleContext {
		public UnaryoperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unaryoperator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.EnterUnaryoperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.ExitUnaryoperator(this);
		}
	}

	[RuleVersion(0)]
	public UnaryoperatorContext unaryoperator() {
		UnaryoperatorContext _localctx = new UnaryoperatorContext(Context, State);
		EnterRule(_localctx, 48, RULE_unaryoperator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 325;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 17592656068608L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterlistContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ParameterdeclarationContext parameterdeclaration() {
			return GetRuleContext<ParameterdeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParameterlistContext parameterlist() {
			return GetRuleContext<ParameterlistContext>(0);
		}
		public ParameterlistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameterlist; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.EnterParameterlist(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.ExitParameterlist(this);
		}
	}

	[RuleVersion(0)]
	public ParameterlistContext parameterlist() {
		return parameterlist(0);
	}

	private ParameterlistContext parameterlist(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ParameterlistContext _localctx = new ParameterlistContext(Context, _parentState);
		ParameterlistContext _prevctx = _localctx;
		int _startState = 50;
		EnterRecursionRule(_localctx, 50, RULE_parameterlist, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 328;
			parameterdeclaration();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 335;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,25,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new ParameterlistContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_parameterlist);
					State = 330;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 331;
					Match(T__38);
					State = 332;
					parameterdeclaration();
					}
					} 
				}
				State = 337;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,25,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class IdentifierContext : ParserRuleContext {
		public IdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.EnterIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.ExitIdentifier(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierContext identifier() {
		IdentifierContext _localctx = new IdentifierContext(Context, State);
		EnterRule(_localctx, 52, RULE_identifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 338;
			Match(T__44);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterdeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ParameterdeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameterdeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.EnterParameterdeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.ExitParameterdeclaration(this);
		}
	}

	[RuleVersion(0)]
	public ParameterdeclarationContext parameterdeclaration() {
		ParameterdeclarationContext _localctx = new ParameterdeclarationContext(Context, State);
		EnterRule(_localctx, 54, RULE_parameterdeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 340;
			type();
			State = 341;
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InitialdeclaratorContext initialdeclarator() {
			return GetRuleContext<InitialdeclaratorContext>(0);
		}
		public DeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.EnterDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.ExitDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationContext declaration() {
		DeclarationContext _localctx = new DeclarationContext(Context, State);
		EnterRule(_localctx, 56, RULE_declaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 343;
			type();
			State = 344;
			initialdeclarator();
			State = 345;
			Match(T__45);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InitialdeclaratorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InitializerContext initializer() {
			return GetRuleContext<InitializerContext>(0);
		}
		public InitialdeclaratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_initialdeclarator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.EnterInitialdeclarator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.ExitInitialdeclarator(this);
		}
	}

	[RuleVersion(0)]
	public InitialdeclaratorContext initialdeclarator() {
		InitialdeclaratorContext _localctx = new InitialdeclaratorContext(Context, State);
		EnterRule(_localctx, 58, RULE_initialdeclarator);
		try {
			State = 352;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,26,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 347;
				identifier();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 348;
				identifier();
				State = 349;
				Match(T__22);
				State = 350;
				initializer();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InitializerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentexpressionContext assignmentexpression() {
			return GetRuleContext<AssignmentexpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InitializerlistContext initializerlist() {
			return GetRuleContext<InitializerlistContext>(0);
		}
		public InitializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_initializer; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.EnterInitializer(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.ExitInitializer(this);
		}
	}

	[RuleVersion(0)]
	public InitializerContext initializer() {
		InitializerContext _localctx = new InitializerContext(Context, State);
		EnterRule(_localctx, 60, RULE_initializer);
		try {
			State = 364;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,27,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 354;
				assignmentexpression();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 355;
				Match(T__46);
				State = 356;
				initializerlist(0);
				State = 357;
				Match(T__47);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 359;
				Match(T__46);
				State = 360;
				initializerlist(0);
				State = 361;
				Match(T__38);
				State = 362;
				Match(T__47);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InitializerlistContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public InitializerContext initializer() {
			return GetRuleContext<InitializerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InitializerlistContext initializerlist() {
			return GetRuleContext<InitializerlistContext>(0);
		}
		public InitializerlistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_initializerlist; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.EnterInitializerlist(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.ExitInitializerlist(this);
		}
	}

	[RuleVersion(0)]
	public InitializerlistContext initializerlist() {
		return initializerlist(0);
	}

	private InitializerlistContext initializerlist(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		InitializerlistContext _localctx = new InitializerlistContext(Context, _parentState);
		InitializerlistContext _prevctx = _localctx;
		int _startState = 62;
		EnterRecursionRule(_localctx, 62, RULE_initializerlist, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 367;
			initializer();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 374;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,28,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new InitializerlistContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_initializerlist);
					State = 369;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 370;
					Match(T__38);
					State = 371;
					initializer();
					}
					} 
				}
				State = 376;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,28,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class CompoundstatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationContext declaration() {
			return GetRuleContext<DeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public CompoundstatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compoundstatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.EnterCompoundstatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.ExitCompoundstatement(this);
		}
	}

	[RuleVersion(0)]
	public CompoundstatementContext compoundstatement() {
		CompoundstatementContext _localctx = new CompoundstatementContext(Context, State);
		EnterRule(_localctx, 64, RULE_compoundstatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 377;
			Match(T__46);
			State = 378;
			declaration();
			State = 379;
			statement();
			State = 380;
			Match(T__47);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LabeledstatementContext labeledstatement() {
			return GetRuleContext<LabeledstatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionstatementContext expressionstatement() {
			return GetRuleContext<ExpressionstatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CompoundstatementContext compoundstatement() {
			return GetRuleContext<CompoundstatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectionstatementContext selectionstatement() {
			return GetRuleContext<SelectionstatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IterationstatementContext iterationstatement() {
			return GetRuleContext<IterationstatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public JumpstatementContext jumpstatement() {
			return GetRuleContext<JumpstatementContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 66, RULE_statement);
		try {
			State = 388;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,29,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 382;
				labeledstatement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 383;
				expressionstatement();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 384;
				compoundstatement();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 385;
				selectionstatement();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 386;
				iterationstatement();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 387;
				jumpstatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LabeledstatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public JumpstatementContext jumpstatement() {
			return GetRuleContext<JumpstatementContext>(0);
		}
		public LabeledstatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_labeledstatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.EnterLabeledstatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.ExitLabeledstatement(this);
		}
	}

	[RuleVersion(0)]
	public LabeledstatementContext labeledstatement() {
		LabeledstatementContext _localctx = new LabeledstatementContext(Context, State);
		EnterRule(_localctx, 68, RULE_labeledstatement);
		try {
			State = 402;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__44:
				EnterOuterAlt(_localctx, 1);
				{
				State = 390;
				identifier();
				State = 391;
				Match(T__12);
				State = 392;
				statement();
				}
				break;
			case T__48:
				EnterOuterAlt(_localctx, 2);
				{
				State = 394;
				Match(T__48);
				State = 395;
				jumpstatement();
				State = 396;
				Match(T__12);
				State = 397;
				statement();
				}
				break;
			case T__49:
				EnterOuterAlt(_localctx, 3);
				{
				State = 399;
				Match(T__49);
				State = 400;
				Match(T__12);
				State = 401;
				statement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionstatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ExpressionstatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionstatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.EnterExpressionstatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.ExitExpressionstatement(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionstatementContext expressionstatement() {
		ExpressionstatementContext _localctx = new ExpressionstatementContext(Context, State);
		EnterRule(_localctx, 70, RULE_expressionstatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 404;
			expression(0);
			State = 405;
			Match(T__45);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectionstatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public SelectionstatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectionstatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.EnterSelectionstatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.ExitSelectionstatement(this);
		}
	}

	[RuleVersion(0)]
	public SelectionstatementContext selectionstatement() {
		SelectionstatementContext _localctx = new SelectionstatementContext(Context, State);
		EnterRule(_localctx, 72, RULE_selectionstatement);
		try {
			State = 427;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,31,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 407;
				Match(T__50);
				State = 408;
				Match(T__0);
				State = 409;
				expression(0);
				State = 410;
				Match(T__1);
				State = 411;
				statement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 413;
				Match(T__50);
				State = 414;
				Match(T__0);
				State = 415;
				expression(0);
				State = 416;
				Match(T__1);
				State = 417;
				statement();
				State = 418;
				Match(T__51);
				State = 419;
				statement();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 421;
				Match(T__52);
				State = 422;
				Match(T__0);
				State = 423;
				expression(0);
				State = 424;
				Match(T__1);
				State = 425;
				statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IterationstatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public IterationstatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_iterationstatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.EnterIterationstatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.ExitIterationstatement(this);
		}
	}

	[RuleVersion(0)]
	public IterationstatementContext iterationstatement() {
		IterationstatementContext _localctx = new IterationstatementContext(Context, State);
		EnterRule(_localctx, 74, RULE_iterationstatement);
		try {
			State = 453;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__53:
				EnterOuterAlt(_localctx, 1);
				{
				State = 429;
				Match(T__53);
				State = 430;
				Match(T__0);
				State = 431;
				expression(0);
				State = 432;
				Match(T__1);
				State = 433;
				statement();
				}
				break;
			case T__54:
				EnterOuterAlt(_localctx, 2);
				{
				State = 435;
				Match(T__54);
				State = 436;
				statement();
				State = 437;
				Match(T__53);
				State = 438;
				Match(T__0);
				State = 439;
				expression(0);
				State = 440;
				Match(T__1);
				State = 441;
				Match(T__45);
				}
				break;
			case T__55:
				EnterOuterAlt(_localctx, 3);
				{
				State = 443;
				Match(T__55);
				State = 444;
				Match(T__0);
				State = 445;
				expression(0);
				State = 446;
				Match(T__45);
				State = 447;
				expression(0);
				State = 448;
				Match(T__45);
				State = 449;
				expression(0);
				State = 450;
				Match(T__1);
				State = 451;
				statement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class JumpstatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public JumpstatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_jumpstatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.EnterJumpstatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.ExitJumpstatement(this);
		}
	}

	[RuleVersion(0)]
	public JumpstatementContext jumpstatement() {
		JumpstatementContext _localctx = new JumpstatementContext(Context, State);
		EnterRule(_localctx, 76, RULE_jumpstatement);
		try {
			State = 467;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__56:
				EnterOuterAlt(_localctx, 1);
				{
				State = 455;
				Match(T__56);
				State = 456;
				identifier();
				State = 457;
				Match(T__45);
				}
				break;
			case T__57:
				EnterOuterAlt(_localctx, 2);
				{
				State = 459;
				Match(T__57);
				State = 460;
				Match(T__45);
				}
				break;
			case T__58:
				EnterOuterAlt(_localctx, 3);
				{
				State = 461;
				Match(T__58);
				State = 462;
				Match(T__45);
				}
				break;
			case T__59:
				EnterOuterAlt(_localctx, 4);
				{
				State = 463;
				Match(T__59);
				State = 464;
				expression(0);
				State = 465;
				Match(T__45);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 6: return logicalorexpression_sempred((LogicalorexpressionContext)_localctx, predIndex);
		case 7: return logicalandexpression_sempred((LogicalandexpressionContext)_localctx, predIndex);
		case 8: return inclusiveorexpression_sempred((InclusiveorexpressionContext)_localctx, predIndex);
		case 9: return exclusiveorexpression_sempred((ExclusiveorexpressionContext)_localctx, predIndex);
		case 10: return andexpression_sempred((AndexpressionContext)_localctx, predIndex);
		case 11: return equalityexpression_sempred((EqualityexpressionContext)_localctx, predIndex);
		case 12: return relationalexpression_sempred((RelationalexpressionContext)_localctx, predIndex);
		case 13: return bitshiftexpression_sempred((BitshiftexpressionContext)_localctx, predIndex);
		case 14: return additiveexpression_sempred((AdditiveexpressionContext)_localctx, predIndex);
		case 15: return multiplicativeexpression_sempred((MultiplicativeexpressionContext)_localctx, predIndex);
		case 19: return postfixexpression_sempred((PostfixexpressionContext)_localctx, predIndex);
		case 21: return expression_sempred((ExpressionContext)_localctx, predIndex);
		case 25: return parameterlist_sempred((ParameterlistContext)_localctx, predIndex);
		case 31: return initializerlist_sempred((InitializerlistContext)_localctx, predIndex);
		}
		return true;
	}
	private bool logicalorexpression_sempred(LogicalorexpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 1);
		}
		return true;
	}
	private bool logicalandexpression_sempred(LogicalandexpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 1: return Precpred(Context, 1);
		}
		return true;
	}
	private bool inclusiveorexpression_sempred(InclusiveorexpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 2: return Precpred(Context, 1);
		}
		return true;
	}
	private bool exclusiveorexpression_sempred(ExclusiveorexpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 3: return Precpred(Context, 1);
		}
		return true;
	}
	private bool andexpression_sempred(AndexpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 4: return Precpred(Context, 1);
		}
		return true;
	}
	private bool equalityexpression_sempred(EqualityexpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 5: return Precpred(Context, 2);
		case 6: return Precpred(Context, 1);
		}
		return true;
	}
	private bool relationalexpression_sempred(RelationalexpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 7: return Precpred(Context, 4);
		case 8: return Precpred(Context, 3);
		case 9: return Precpred(Context, 2);
		case 10: return Precpred(Context, 1);
		}
		return true;
	}
	private bool bitshiftexpression_sempred(BitshiftexpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 11: return Precpred(Context, 2);
		case 12: return Precpred(Context, 1);
		}
		return true;
	}
	private bool additiveexpression_sempred(AdditiveexpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 13: return Precpred(Context, 2);
		case 14: return Precpred(Context, 1);
		}
		return true;
	}
	private bool multiplicativeexpression_sempred(MultiplicativeexpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 15: return Precpred(Context, 3);
		case 16: return Precpred(Context, 2);
		case 17: return Precpred(Context, 1);
		}
		return true;
	}
	private bool postfixexpression_sempred(PostfixexpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 18: return Precpred(Context, 6);
		case 19: return Precpred(Context, 5);
		case 20: return Precpred(Context, 4);
		case 21: return Precpred(Context, 3);
		case 22: return Precpred(Context, 2);
		case 23: return Precpred(Context, 1);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 24: return Precpred(Context, 1);
		}
		return true;
	}
	private bool parameterlist_sempred(ParameterlistContext _localctx, int predIndex) {
		switch (predIndex) {
		case 25: return Precpred(Context, 1);
		}
		return true;
	}
	private bool initializerlist_sempred(InitializerlistContext _localctx, int predIndex) {
		switch (predIndex) {
		case 26: return Precpred(Context, 1);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,60,470,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,
		2,36,7,36,2,37,7,37,2,38,7,38,1,0,1,0,1,1,1,1,3,1,83,8,1,1,2,1,2,1,2,1,
		2,1,2,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,5,1,5,
		3,5,106,8,5,1,6,1,6,1,6,1,6,1,6,1,6,5,6,114,8,6,10,6,12,6,117,9,6,1,7,
		1,7,1,7,1,7,1,7,1,7,5,7,125,8,7,10,7,12,7,128,9,7,1,8,1,8,1,8,1,8,1,8,
		1,8,5,8,136,8,8,10,8,12,8,139,9,8,1,9,1,9,1,9,1,9,1,9,1,9,5,9,147,8,9,
		10,9,12,9,150,9,9,1,10,1,10,1,10,1,10,1,10,1,10,5,10,158,8,10,10,10,12,
		10,161,9,10,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,5,11,172,8,11,
		10,11,12,11,175,9,11,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,
		1,12,1,12,1,12,1,12,1,12,5,12,192,8,12,10,12,12,12,195,9,12,1,13,1,13,
		1,13,1,13,1,13,1,13,1,13,1,13,1,13,5,13,206,8,13,10,13,12,13,209,9,13,
		1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,5,14,220,8,14,10,14,12,14,
		223,9,14,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,5,
		15,237,8,15,10,15,12,15,240,9,15,5,15,242,8,15,10,15,12,15,245,9,15,1,
		16,1,16,1,16,1,16,1,16,1,16,3,16,253,8,16,1,17,1,17,1,18,1,18,1,18,1,18,
		1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,3,18,269,8,18,1,19,1,19,1,19,1,
		19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,
		19,1,19,1,19,1,19,1,19,1,19,5,19,294,8,19,10,19,12,19,297,9,19,1,20,1,
		20,1,20,1,20,1,20,3,20,304,8,20,1,21,1,21,1,21,1,21,1,21,1,21,5,21,312,
		8,21,10,21,12,21,315,9,21,1,22,1,22,1,22,1,22,1,22,3,22,322,8,22,1,23,
		1,23,1,24,1,24,1,25,1,25,1,25,1,25,1,25,1,25,5,25,334,8,25,10,25,12,25,
		337,9,25,1,26,1,26,1,27,1,27,1,27,1,28,1,28,1,28,1,28,1,29,1,29,1,29,1,
		29,1,29,3,29,353,8,29,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,
		3,30,365,8,30,1,31,1,31,1,31,1,31,1,31,1,31,5,31,373,8,31,10,31,12,31,
		376,9,31,1,32,1,32,1,32,1,32,1,32,1,33,1,33,1,33,1,33,1,33,1,33,3,33,389,
		8,33,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,3,34,
		403,8,34,1,35,1,35,1,35,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,
		36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,3,36,428,8,36,1,37,
		1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,
		1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,3,37,454,8,37,1,38,1,38,1,
		38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,3,38,468,8,38,1,38,0,14,
		12,14,16,18,20,22,24,26,28,30,38,42,50,62,39,0,2,4,6,8,10,12,14,16,18,
		20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,
		68,70,72,74,76,0,3,1,0,3,11,2,0,23,23,40,43,3,0,18,18,26,28,44,44,485,
		0,78,1,0,0,0,2,82,1,0,0,0,4,84,1,0,0,0,6,89,1,0,0,0,8,96,1,0,0,0,10,105,
		1,0,0,0,12,107,1,0,0,0,14,118,1,0,0,0,16,129,1,0,0,0,18,140,1,0,0,0,20,
		151,1,0,0,0,22,162,1,0,0,0,24,176,1,0,0,0,26,196,1,0,0,0,28,210,1,0,0,
		0,30,224,1,0,0,0,32,252,1,0,0,0,34,254,1,0,0,0,36,268,1,0,0,0,38,270,1,
		0,0,0,40,303,1,0,0,0,42,305,1,0,0,0,44,321,1,0,0,0,46,323,1,0,0,0,48,325,
		1,0,0,0,50,327,1,0,0,0,52,338,1,0,0,0,54,340,1,0,0,0,56,343,1,0,0,0,58,
		352,1,0,0,0,60,364,1,0,0,0,62,366,1,0,0,0,64,377,1,0,0,0,66,388,1,0,0,
		0,68,402,1,0,0,0,70,404,1,0,0,0,72,427,1,0,0,0,74,453,1,0,0,0,76,467,1,
		0,0,0,78,79,3,2,1,0,79,1,1,0,0,0,80,83,3,4,2,0,81,83,3,56,28,0,82,80,1,
		0,0,0,82,81,1,0,0,0,83,3,1,0,0,0,84,85,3,8,4,0,85,86,3,52,26,0,86,87,3,
		56,28,0,87,88,3,64,32,0,88,5,1,0,0,0,89,90,3,8,4,0,90,91,3,52,26,0,91,
		92,5,1,0,0,92,93,3,50,25,0,93,94,5,2,0,0,94,95,3,64,32,0,95,7,1,0,0,0,
		96,97,7,0,0,0,97,9,1,0,0,0,98,106,3,12,6,0,99,100,3,12,6,0,100,101,5,12,
		0,0,101,102,3,42,21,0,102,103,5,13,0,0,103,104,3,10,5,0,104,106,1,0,0,
		0,105,98,1,0,0,0,105,99,1,0,0,0,106,11,1,0,0,0,107,108,6,6,-1,0,108,109,
		3,14,7,0,109,115,1,0,0,0,110,111,10,1,0,0,111,112,5,14,0,0,112,114,3,14,
		7,0,113,110,1,0,0,0,114,117,1,0,0,0,115,113,1,0,0,0,115,116,1,0,0,0,116,
		13,1,0,0,0,117,115,1,0,0,0,118,119,6,7,-1,0,119,120,3,16,8,0,120,126,1,
		0,0,0,121,122,10,1,0,0,122,123,5,15,0,0,123,125,3,16,8,0,124,121,1,0,0,
		0,125,128,1,0,0,0,126,124,1,0,0,0,126,127,1,0,0,0,127,15,1,0,0,0,128,126,
		1,0,0,0,129,130,6,8,-1,0,130,131,3,18,9,0,131,137,1,0,0,0,132,133,10,1,
		0,0,133,134,5,16,0,0,134,136,3,18,9,0,135,132,1,0,0,0,136,139,1,0,0,0,
		137,135,1,0,0,0,137,138,1,0,0,0,138,17,1,0,0,0,139,137,1,0,0,0,140,141,
		6,9,-1,0,141,142,3,20,10,0,142,148,1,0,0,0,143,144,10,1,0,0,144,145,5,
		17,0,0,145,147,3,20,10,0,146,143,1,0,0,0,147,150,1,0,0,0,148,146,1,0,0,
		0,148,149,1,0,0,0,149,19,1,0,0,0,150,148,1,0,0,0,151,152,6,10,-1,0,152,
		153,3,22,11,0,153,159,1,0,0,0,154,155,10,1,0,0,155,156,5,18,0,0,156,158,
		3,22,11,0,157,154,1,0,0,0,158,161,1,0,0,0,159,157,1,0,0,0,159,160,1,0,
		0,0,160,21,1,0,0,0,161,159,1,0,0,0,162,163,6,11,-1,0,163,164,3,24,12,0,
		164,173,1,0,0,0,165,166,10,2,0,0,166,167,5,19,0,0,167,172,3,24,12,0,168,
		169,10,1,0,0,169,170,5,20,0,0,170,172,3,24,12,0,171,165,1,0,0,0,171,168,
		1,0,0,0,172,175,1,0,0,0,173,171,1,0,0,0,173,174,1,0,0,0,174,23,1,0,0,0,
		175,173,1,0,0,0,176,177,6,12,-1,0,177,178,3,26,13,0,178,193,1,0,0,0,179,
		180,10,4,0,0,180,181,5,21,0,0,181,192,3,26,13,0,182,183,10,3,0,0,183,184,
		5,22,0,0,184,192,3,26,13,0,185,186,10,2,0,0,186,187,5,23,0,0,187,192,3,
		26,13,0,188,189,10,1,0,0,189,190,5,23,0,0,190,192,3,26,13,0,191,179,1,
		0,0,0,191,182,1,0,0,0,191,185,1,0,0,0,191,188,1,0,0,0,192,195,1,0,0,0,
		193,191,1,0,0,0,193,194,1,0,0,0,194,25,1,0,0,0,195,193,1,0,0,0,196,197,
		6,13,-1,0,197,198,3,28,14,0,198,207,1,0,0,0,199,200,10,2,0,0,200,201,5,
		24,0,0,201,206,3,28,14,0,202,203,10,1,0,0,203,204,5,25,0,0,204,206,3,28,
		14,0,205,199,1,0,0,0,205,202,1,0,0,0,206,209,1,0,0,0,207,205,1,0,0,0,207,
		208,1,0,0,0,208,27,1,0,0,0,209,207,1,0,0,0,210,211,6,14,-1,0,211,212,3,
		30,15,0,212,221,1,0,0,0,213,214,10,2,0,0,214,215,5,26,0,0,215,220,3,30,
		15,0,216,217,10,1,0,0,217,218,5,27,0,0,218,220,3,30,15,0,219,213,1,0,0,
		0,219,216,1,0,0,0,220,223,1,0,0,0,221,219,1,0,0,0,221,222,1,0,0,0,222,
		29,1,0,0,0,223,221,1,0,0,0,224,225,6,15,-1,0,225,226,3,32,16,0,226,243,
		1,0,0,0,227,228,10,3,0,0,228,229,5,28,0,0,229,242,3,32,16,0,230,231,10,
		2,0,0,231,232,5,29,0,0,232,242,3,32,16,0,233,234,10,1,0,0,234,238,5,30,
		0,0,235,237,3,32,16,0,236,235,1,0,0,0,237,240,1,0,0,0,238,236,1,0,0,0,
		238,239,1,0,0,0,239,242,1,0,0,0,240,238,1,0,0,0,241,227,1,0,0,0,241,230,
		1,0,0,0,241,233,1,0,0,0,242,245,1,0,0,0,243,241,1,0,0,0,243,244,1,0,0,
		0,244,31,1,0,0,0,245,243,1,0,0,0,246,253,3,36,18,0,247,248,5,1,0,0,248,
		249,3,34,17,0,249,250,5,2,0,0,250,251,3,32,16,0,251,253,1,0,0,0,252,246,
		1,0,0,0,252,247,1,0,0,0,253,33,1,0,0,0,254,255,5,31,0,0,255,35,1,0,0,0,
		256,269,3,38,19,0,257,258,5,32,0,0,258,269,3,36,18,0,259,260,5,33,0,0,
		260,269,3,36,18,0,261,262,3,48,24,0,262,263,3,32,16,0,263,269,1,0,0,0,
		264,265,5,34,0,0,265,269,3,36,18,0,266,267,5,34,0,0,267,269,3,34,17,0,
		268,256,1,0,0,0,268,257,1,0,0,0,268,259,1,0,0,0,268,261,1,0,0,0,268,264,
		1,0,0,0,268,266,1,0,0,0,269,37,1,0,0,0,270,271,6,19,-1,0,271,272,3,40,
		20,0,272,295,1,0,0,0,273,274,10,6,0,0,274,275,5,35,0,0,275,276,3,42,21,
		0,276,277,5,36,0,0,277,294,1,0,0,0,278,279,10,5,0,0,279,280,5,1,0,0,280,
		281,3,44,22,0,281,282,5,2,0,0,282,294,1,0,0,0,283,284,10,4,0,0,284,285,
		5,37,0,0,285,294,3,52,26,0,286,287,10,3,0,0,287,288,5,38,0,0,288,294,3,
		52,26,0,289,290,10,2,0,0,290,294,5,32,0,0,291,292,10,1,0,0,292,294,5,33,
		0,0,293,273,1,0,0,0,293,278,1,0,0,0,293,283,1,0,0,0,293,286,1,0,0,0,293,
		289,1,0,0,0,293,291,1,0,0,0,294,297,1,0,0,0,295,293,1,0,0,0,295,296,1,
		0,0,0,296,39,1,0,0,0,297,295,1,0,0,0,298,304,3,52,26,0,299,300,5,1,0,0,
		300,301,3,42,21,0,301,302,5,2,0,0,302,304,1,0,0,0,303,298,1,0,0,0,303,
		299,1,0,0,0,304,41,1,0,0,0,305,306,6,21,-1,0,306,307,3,44,22,0,307,313,
		1,0,0,0,308,309,10,1,0,0,309,310,5,39,0,0,310,312,3,44,22,0,311,308,1,
		0,0,0,312,315,1,0,0,0,313,311,1,0,0,0,313,314,1,0,0,0,314,43,1,0,0,0,315,
		313,1,0,0,0,316,322,3,10,5,0,317,318,3,36,18,0,318,319,3,46,23,0,319,320,
		3,44,22,0,320,322,1,0,0,0,321,316,1,0,0,0,321,317,1,0,0,0,322,45,1,0,0,
		0,323,324,7,1,0,0,324,47,1,0,0,0,325,326,7,2,0,0,326,49,1,0,0,0,327,328,
		6,25,-1,0,328,329,3,54,27,0,329,335,1,0,0,0,330,331,10,1,0,0,331,332,5,
		39,0,0,332,334,3,54,27,0,333,330,1,0,0,0,334,337,1,0,0,0,335,333,1,0,0,
		0,335,336,1,0,0,0,336,51,1,0,0,0,337,335,1,0,0,0,338,339,5,45,0,0,339,
		53,1,0,0,0,340,341,3,8,4,0,341,342,3,52,26,0,342,55,1,0,0,0,343,344,3,
		8,4,0,344,345,3,58,29,0,345,346,5,46,0,0,346,57,1,0,0,0,347,353,3,52,26,
		0,348,349,3,52,26,0,349,350,5,23,0,0,350,351,3,60,30,0,351,353,1,0,0,0,
		352,347,1,0,0,0,352,348,1,0,0,0,353,59,1,0,0,0,354,365,3,44,22,0,355,356,
		5,47,0,0,356,357,3,62,31,0,357,358,5,48,0,0,358,365,1,0,0,0,359,360,5,
		47,0,0,360,361,3,62,31,0,361,362,5,39,0,0,362,363,5,48,0,0,363,365,1,0,
		0,0,364,354,1,0,0,0,364,355,1,0,0,0,364,359,1,0,0,0,365,61,1,0,0,0,366,
		367,6,31,-1,0,367,368,3,60,30,0,368,374,1,0,0,0,369,370,10,1,0,0,370,371,
		5,39,0,0,371,373,3,60,30,0,372,369,1,0,0,0,373,376,1,0,0,0,374,372,1,0,
		0,0,374,375,1,0,0,0,375,63,1,0,0,0,376,374,1,0,0,0,377,378,5,47,0,0,378,
		379,3,56,28,0,379,380,3,66,33,0,380,381,5,48,0,0,381,65,1,0,0,0,382,389,
		3,68,34,0,383,389,3,70,35,0,384,389,3,64,32,0,385,389,3,72,36,0,386,389,
		3,74,37,0,387,389,3,76,38,0,388,382,1,0,0,0,388,383,1,0,0,0,388,384,1,
		0,0,0,388,385,1,0,0,0,388,386,1,0,0,0,388,387,1,0,0,0,389,67,1,0,0,0,390,
		391,3,52,26,0,391,392,5,13,0,0,392,393,3,66,33,0,393,403,1,0,0,0,394,395,
		5,49,0,0,395,396,3,76,38,0,396,397,5,13,0,0,397,398,3,66,33,0,398,403,
		1,0,0,0,399,400,5,50,0,0,400,401,5,13,0,0,401,403,3,66,33,0,402,390,1,
		0,0,0,402,394,1,0,0,0,402,399,1,0,0,0,403,69,1,0,0,0,404,405,3,42,21,0,
		405,406,5,46,0,0,406,71,1,0,0,0,407,408,5,51,0,0,408,409,5,1,0,0,409,410,
		3,42,21,0,410,411,5,2,0,0,411,412,3,66,33,0,412,428,1,0,0,0,413,414,5,
		51,0,0,414,415,5,1,0,0,415,416,3,42,21,0,416,417,5,2,0,0,417,418,3,66,
		33,0,418,419,5,52,0,0,419,420,3,66,33,0,420,428,1,0,0,0,421,422,5,53,0,
		0,422,423,5,1,0,0,423,424,3,42,21,0,424,425,5,2,0,0,425,426,3,66,33,0,
		426,428,1,0,0,0,427,407,1,0,0,0,427,413,1,0,0,0,427,421,1,0,0,0,428,73,
		1,0,0,0,429,430,5,54,0,0,430,431,5,1,0,0,431,432,3,42,21,0,432,433,5,2,
		0,0,433,434,3,66,33,0,434,454,1,0,0,0,435,436,5,55,0,0,436,437,3,66,33,
		0,437,438,5,54,0,0,438,439,5,1,0,0,439,440,3,42,21,0,440,441,5,2,0,0,441,
		442,5,46,0,0,442,454,1,0,0,0,443,444,5,56,0,0,444,445,5,1,0,0,445,446,
		3,42,21,0,446,447,5,46,0,0,447,448,3,42,21,0,448,449,5,46,0,0,449,450,
		3,42,21,0,450,451,5,2,0,0,451,452,3,66,33,0,452,454,1,0,0,0,453,429,1,
		0,0,0,453,435,1,0,0,0,453,443,1,0,0,0,454,75,1,0,0,0,455,456,5,57,0,0,
		456,457,3,52,26,0,457,458,5,46,0,0,458,468,1,0,0,0,459,460,5,58,0,0,460,
		468,5,46,0,0,461,462,5,59,0,0,462,468,5,46,0,0,463,464,5,60,0,0,464,465,
		3,42,21,0,465,466,5,46,0,0,466,468,1,0,0,0,467,455,1,0,0,0,467,459,1,0,
		0,0,467,461,1,0,0,0,467,463,1,0,0,0,468,77,1,0,0,0,34,82,105,115,126,137,
		148,159,171,173,191,193,205,207,219,221,238,241,243,252,268,293,295,303,
		313,321,335,352,364,374,388,402,427,453,467
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
