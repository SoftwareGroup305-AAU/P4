//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from P4.TinyCell/SimpleLang/SimpleLang.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419


using Antlr4.Runtime.Misc;
using IErrorNode = Antlr4.Runtime.Tree.IErrorNode;
using ITerminalNode = Antlr4.Runtime.Tree.ITerminalNode;
using IToken = Antlr4.Runtime.IToken;
using ParserRuleContext = Antlr4.Runtime.ParserRuleContext;

/// <summary>
/// This class provides an empty implementation of <see cref="ISimpleLangListener"/>,
/// which can be extended to create a listener which only needs to handle a subset
/// of the available methods.
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.Diagnostics.DebuggerNonUserCode]
[System.CLSCompliant(false)]
public partial class SimpleLangBaseListener : ISimpleLangListener {
	/// <summary>
	/// Enter a parse tree produced by <see cref="SimpleLangParser.prog"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterProg([NotNull] SimpleLangParser.ProgContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="SimpleLangParser.prog"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitProg([NotNull] SimpleLangParser.ProgContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="SimpleLangParser.decl"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterDecl([NotNull] SimpleLangParser.DeclContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="SimpleLangParser.decl"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitDecl([NotNull] SimpleLangParser.DeclContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="SimpleLangParser.varDecl"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterVarDecl([NotNull] SimpleLangParser.VarDeclContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="SimpleLangParser.varDecl"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitVarDecl([NotNull] SimpleLangParser.VarDeclContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="SimpleLangParser.functionDecl"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterFunctionDecl([NotNull] SimpleLangParser.FunctionDeclContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="SimpleLangParser.functionDecl"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitFunctionDecl([NotNull] SimpleLangParser.FunctionDeclContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="SimpleLangParser.stat"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterStat([NotNull] SimpleLangParser.StatContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="SimpleLangParser.stat"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitStat([NotNull] SimpleLangParser.StatContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="SimpleLangParser.exprStat"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterExprStat([NotNull] SimpleLangParser.ExprStatContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="SimpleLangParser.exprStat"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitExprStat([NotNull] SimpleLangParser.ExprStatContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="SimpleLangParser.ifStat"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterIfStat([NotNull] SimpleLangParser.IfStatContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="SimpleLangParser.ifStat"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitIfStat([NotNull] SimpleLangParser.IfStatContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="SimpleLangParser.whileStat"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterWhileStat([NotNull] SimpleLangParser.WhileStatContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="SimpleLangParser.whileStat"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitWhileStat([NotNull] SimpleLangParser.WhileStatContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="SimpleLangParser.returnStat"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterReturnStat([NotNull] SimpleLangParser.ReturnStatContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="SimpleLangParser.returnStat"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitReturnStat([NotNull] SimpleLangParser.ReturnStatContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="SimpleLangParser.pinWriteStat"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterPinWriteStat([NotNull] SimpleLangParser.PinWriteStatContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="SimpleLangParser.pinWriteStat"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitPinWriteStat([NotNull] SimpleLangParser.PinWriteStatContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>parens</c>
	/// labeled alternative in <see cref="SimpleLangParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterParens([NotNull] SimpleLangParser.ParensContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>parens</c>
	/// labeled alternative in <see cref="SimpleLangParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitParens([NotNull] SimpleLangParser.ParensContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>intLit</c>
	/// labeled alternative in <see cref="SimpleLangParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterIntLit([NotNull] SimpleLangParser.IntLitContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>intLit</c>
	/// labeled alternative in <see cref="SimpleLangParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitIntLit([NotNull] SimpleLangParser.IntLitContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>funcCall</c>
	/// labeled alternative in <see cref="SimpleLangParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterFuncCall([NotNull] SimpleLangParser.FuncCallContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>funcCall</c>
	/// labeled alternative in <see cref="SimpleLangParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitFuncCall([NotNull] SimpleLangParser.FuncCallContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>id</c>
	/// labeled alternative in <see cref="SimpleLangParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterId([NotNull] SimpleLangParser.IdContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>id</c>
	/// labeled alternative in <see cref="SimpleLangParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitId([NotNull] SimpleLangParser.IdContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>binOp</c>
	/// labeled alternative in <see cref="SimpleLangParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterBinOp([NotNull] SimpleLangParser.BinOpContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>binOp</c>
	/// labeled alternative in <see cref="SimpleLangParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitBinOp([NotNull] SimpleLangParser.BinOpContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>assign</c>
	/// labeled alternative in <see cref="SimpleLangParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterAssign([NotNull] SimpleLangParser.AssignContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>assign</c>
	/// labeled alternative in <see cref="SimpleLangParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitAssign([NotNull] SimpleLangParser.AssignContext context) { }

	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void EnterEveryRule([NotNull] ParserRuleContext context) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void ExitEveryRule([NotNull] ParserRuleContext context) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void VisitTerminal([NotNull] ITerminalNode node) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void VisitErrorNode([NotNull] IErrorNode node) { }
}
