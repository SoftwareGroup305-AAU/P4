//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from P4.TinyCell/SimpleLang/SimpleLang.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class SimpleLangParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, ID=19, INT=20, WS=21;
	public const int
		RULE_prog = 0, RULE_decl = 1, RULE_varDecl = 2, RULE_functionDecl = 3, 
		RULE_stat = 4, RULE_exprStat = 5, RULE_ifStat = 6, RULE_whileStat = 7, 
		RULE_returnStat = 8, RULE_pinWriteStat = 9, RULE_expr = 10;
	public static readonly string[] ruleNames = {
		"prog", "decl", "varDecl", "functionDecl", "stat", "exprStat", "ifStat", 
		"whileStat", "returnStat", "pinWriteStat", "expr"
	};

	private static readonly string[] _LiteralNames = {
		null, "'int'", "'='", "';'", "'('", "')'", "'{'", "'}'", "'if'", "'else'", 
		"'while'", "'return'", "'digitalWrite'", "'analogWrite'", "','", "'+'", 
		"'-'", "'*'", "'/'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, "ID", "INT", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "SimpleLang.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static SimpleLangParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public SimpleLangParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public SimpleLangParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DeclContext[] decl() {
			return GetRuleContexts<DeclContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclContext decl(int i) {
			return GetRuleContext<DeclContext>(i);
		}
		public ProgContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_prog; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISimpleLangListener typedListener = listener as ISimpleLangListener;
			if (typedListener != null) typedListener.EnterProg(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISimpleLangListener typedListener = listener as ISimpleLangListener;
			if (typedListener != null) typedListener.ExitProg(this);
		}
	}

	[RuleVersion(0)]
	public ProgContext prog() {
		ProgContext _localctx = new ProgContext(Context, State);
		EnterRule(_localctx, 0, RULE_prog);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 23;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 22;
				decl();
				}
				}
				State = 25;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==T__0 );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VarDeclContext varDecl() {
			return GetRuleContext<VarDeclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionDeclContext functionDecl() {
			return GetRuleContext<FunctionDeclContext>(0);
		}
		public DeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_decl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISimpleLangListener typedListener = listener as ISimpleLangListener;
			if (typedListener != null) typedListener.EnterDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISimpleLangListener typedListener = listener as ISimpleLangListener;
			if (typedListener != null) typedListener.ExitDecl(this);
		}
	}

	[RuleVersion(0)]
	public DeclContext decl() {
		DeclContext _localctx = new DeclContext(Context, State);
		EnterRule(_localctx, 2, RULE_decl);
		try {
			State = 29;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 27;
				varDecl();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 28;
				functionDecl();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(SimpleLangParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public VarDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISimpleLangListener typedListener = listener as ISimpleLangListener;
			if (typedListener != null) typedListener.EnterVarDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISimpleLangListener typedListener = listener as ISimpleLangListener;
			if (typedListener != null) typedListener.ExitVarDecl(this);
		}
	}

	[RuleVersion(0)]
	public VarDeclContext varDecl() {
		VarDeclContext _localctx = new VarDeclContext(Context, State);
		EnterRule(_localctx, 4, RULE_varDecl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 31;
			Match(T__0);
			State = 32;
			Match(ID);
			State = 35;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__1) {
				{
				State = 33;
				Match(T__1);
				State = 34;
				expr(0);
				}
			}

			State = 37;
			Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(SimpleLangParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatContext[] stat() {
			return GetRuleContexts<StatContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatContext stat(int i) {
			return GetRuleContext<StatContext>(i);
		}
		public FunctionDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISimpleLangListener typedListener = listener as ISimpleLangListener;
			if (typedListener != null) typedListener.EnterFunctionDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISimpleLangListener typedListener = listener as ISimpleLangListener;
			if (typedListener != null) typedListener.ExitFunctionDecl(this);
		}
	}

	[RuleVersion(0)]
	public FunctionDeclContext functionDecl() {
		FunctionDeclContext _localctx = new FunctionDeclContext(Context, State);
		EnterRule(_localctx, 6, RULE_functionDecl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 39;
			Match(T__0);
			State = 40;
			Match(ID);
			State = 41;
			Match(T__3);
			State = 42;
			Match(T__4);
			State = 43;
			Match(T__5);
			State = 47;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 1588498L) != 0)) {
				{
				{
				State = 44;
				stat();
				}
				}
				State = 49;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 50;
			Match(T__6);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VarDeclContext varDecl() {
			return GetRuleContext<VarDeclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprStatContext exprStat() {
			return GetRuleContext<ExprStatContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfStatContext ifStat() {
			return GetRuleContext<IfStatContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WhileStatContext whileStat() {
			return GetRuleContext<WhileStatContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReturnStatContext returnStat() {
			return GetRuleContext<ReturnStatContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PinWriteStatContext pinWriteStat() {
			return GetRuleContext<PinWriteStatContext>(0);
		}
		public StatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stat; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISimpleLangListener typedListener = listener as ISimpleLangListener;
			if (typedListener != null) typedListener.EnterStat(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISimpleLangListener typedListener = listener as ISimpleLangListener;
			if (typedListener != null) typedListener.ExitStat(this);
		}
	}

	[RuleVersion(0)]
	public StatContext stat() {
		StatContext _localctx = new StatContext(Context, State);
		EnterRule(_localctx, 8, RULE_stat);
		try {
			State = 58;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__0:
				EnterOuterAlt(_localctx, 1);
				{
				State = 52;
				varDecl();
				}
				break;
			case T__3:
			case ID:
			case INT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 53;
				exprStat();
				}
				break;
			case T__7:
				EnterOuterAlt(_localctx, 3);
				{
				State = 54;
				ifStat();
				}
				break;
			case T__9:
				EnterOuterAlt(_localctx, 4);
				{
				State = 55;
				whileStat();
				}
				break;
			case T__10:
				EnterOuterAlt(_localctx, 5);
				{
				State = 56;
				returnStat();
				}
				break;
			case T__11:
			case T__12:
				EnterOuterAlt(_localctx, 6);
				{
				State = 57;
				pinWriteStat();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprStatContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ExprStatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exprStat; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISimpleLangListener typedListener = listener as ISimpleLangListener;
			if (typedListener != null) typedListener.EnterExprStat(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISimpleLangListener typedListener = listener as ISimpleLangListener;
			if (typedListener != null) typedListener.ExitExprStat(this);
		}
	}

	[RuleVersion(0)]
	public ExprStatContext exprStat() {
		ExprStatContext _localctx = new ExprStatContext(Context, State);
		EnterRule(_localctx, 10, RULE_exprStat);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 60;
			expr(0);
			State = 61;
			Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfStatContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatContext[] stat() {
			return GetRuleContexts<StatContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatContext stat(int i) {
			return GetRuleContext<StatContext>(i);
		}
		public IfStatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifStat; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISimpleLangListener typedListener = listener as ISimpleLangListener;
			if (typedListener != null) typedListener.EnterIfStat(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISimpleLangListener typedListener = listener as ISimpleLangListener;
			if (typedListener != null) typedListener.ExitIfStat(this);
		}
	}

	[RuleVersion(0)]
	public IfStatContext ifStat() {
		IfStatContext _localctx = new IfStatContext(Context, State);
		EnterRule(_localctx, 12, RULE_ifStat);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 63;
			Match(T__7);
			State = 64;
			Match(T__3);
			State = 65;
			expr(0);
			State = 66;
			Match(T__4);
			State = 67;
			Match(T__5);
			State = 71;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 1588498L) != 0)) {
				{
				{
				State = 68;
				stat();
				}
				}
				State = 73;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 74;
			Match(T__6);
			State = 84;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__8) {
				{
				State = 75;
				Match(T__8);
				State = 76;
				Match(T__5);
				State = 80;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 1588498L) != 0)) {
					{
					{
					State = 77;
					stat();
					}
					}
					State = 82;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 83;
				Match(T__6);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileStatContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatContext[] stat() {
			return GetRuleContexts<StatContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatContext stat(int i) {
			return GetRuleContext<StatContext>(i);
		}
		public WhileStatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whileStat; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISimpleLangListener typedListener = listener as ISimpleLangListener;
			if (typedListener != null) typedListener.EnterWhileStat(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISimpleLangListener typedListener = listener as ISimpleLangListener;
			if (typedListener != null) typedListener.ExitWhileStat(this);
		}
	}

	[RuleVersion(0)]
	public WhileStatContext whileStat() {
		WhileStatContext _localctx = new WhileStatContext(Context, State);
		EnterRule(_localctx, 14, RULE_whileStat);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 86;
			Match(T__9);
			State = 87;
			Match(T__3);
			State = 88;
			expr(0);
			State = 89;
			Match(T__4);
			State = 90;
			Match(T__5);
			State = 94;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 1588498L) != 0)) {
				{
				{
				State = 91;
				stat();
				}
				}
				State = 96;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 97;
			Match(T__6);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnStatContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ReturnStatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnStat; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISimpleLangListener typedListener = listener as ISimpleLangListener;
			if (typedListener != null) typedListener.EnterReturnStat(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISimpleLangListener typedListener = listener as ISimpleLangListener;
			if (typedListener != null) typedListener.ExitReturnStat(this);
		}
	}

	[RuleVersion(0)]
	public ReturnStatContext returnStat() {
		ReturnStatContext _localctx = new ReturnStatContext(Context, State);
		EnterRule(_localctx, 16, RULE_returnStat);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 99;
			Match(T__10);
			State = 100;
			expr(0);
			State = 101;
			Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PinWriteStatContext : ParserRuleContext {
		public IToken pin;
		public ExprContext value;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(SimpleLangParser.INT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public PinWriteStatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pinWriteStat; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISimpleLangListener typedListener = listener as ISimpleLangListener;
			if (typedListener != null) typedListener.EnterPinWriteStat(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISimpleLangListener typedListener = listener as ISimpleLangListener;
			if (typedListener != null) typedListener.ExitPinWriteStat(this);
		}
	}

	[RuleVersion(0)]
	public PinWriteStatContext pinWriteStat() {
		PinWriteStatContext _localctx = new PinWriteStatContext(Context, State);
		EnterRule(_localctx, 18, RULE_pinWriteStat);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 103;
			_la = TokenStream.LA(1);
			if ( !(_la==T__11 || _la==T__12) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 104;
			Match(T__3);
			State = 105;
			_localctx.pin = Match(INT);
			State = 106;
			Match(T__13);
			State = 107;
			_localctx.value = expr(0);
			State = 108;
			Match(T__4);
			State = 109;
			Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprContext : ParserRuleContext {
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
	 
		public ExprContext() { }
		public virtual void CopyFrom(ExprContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ParensContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ParensContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISimpleLangListener typedListener = listener as ISimpleLangListener;
			if (typedListener != null) typedListener.EnterParens(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISimpleLangListener typedListener = listener as ISimpleLangListener;
			if (typedListener != null) typedListener.ExitParens(this);
		}
	}
	public partial class IntLitContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(SimpleLangParser.INT, 0); }
		public IntLitContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISimpleLangListener typedListener = listener as ISimpleLangListener;
			if (typedListener != null) typedListener.EnterIntLit(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISimpleLangListener typedListener = listener as ISimpleLangListener;
			if (typedListener != null) typedListener.ExitIntLit(this);
		}
	}
	public partial class FuncCallContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(SimpleLangParser.ID, 0); }
		public FuncCallContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISimpleLangListener typedListener = listener as ISimpleLangListener;
			if (typedListener != null) typedListener.EnterFuncCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISimpleLangListener typedListener = listener as ISimpleLangListener;
			if (typedListener != null) typedListener.ExitFuncCall(this);
		}
	}
	public partial class IdContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(SimpleLangParser.ID, 0); }
		public IdContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISimpleLangListener typedListener = listener as ISimpleLangListener;
			if (typedListener != null) typedListener.EnterId(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISimpleLangListener typedListener = listener as ISimpleLangListener;
			if (typedListener != null) typedListener.ExitId(this);
		}
	}
	public partial class BinOpContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public BinOpContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISimpleLangListener typedListener = listener as ISimpleLangListener;
			if (typedListener != null) typedListener.EnterBinOp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISimpleLangListener typedListener = listener as ISimpleLangListener;
			if (typedListener != null) typedListener.ExitBinOp(this);
		}
	}
	public partial class AssignContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(SimpleLangParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public AssignContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISimpleLangListener typedListener = listener as ISimpleLangListener;
			if (typedListener != null) typedListener.EnterAssign(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISimpleLangListener typedListener = listener as ISimpleLangListener;
			if (typedListener != null) typedListener.ExitAssign(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		return expr(0);
	}

	private ExprContext expr(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExprContext _localctx = new ExprContext(Context, _parentState);
		ExprContext _prevctx = _localctx;
		int _startState = 20;
		EnterRecursionRule(_localctx, 20, RULE_expr, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 124;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,9,Context) ) {
			case 1:
				{
				_localctx = new AssignContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 112;
				Match(ID);
				State = 113;
				Match(T__1);
				State = 114;
				expr(5);
				}
				break;
			case 2:
				{
				_localctx = new FuncCallContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 115;
				Match(ID);
				State = 116;
				Match(T__3);
				State = 117;
				Match(T__4);
				}
				break;
			case 3:
				{
				_localctx = new IntLitContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 118;
				Match(INT);
				}
				break;
			case 4:
				{
				_localctx = new IdContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 119;
				Match(ID);
				}
				break;
			case 5:
				{
				_localctx = new ParensContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 120;
				Match(T__3);
				State = 121;
				expr(0);
				State = 122;
				Match(T__4);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 131;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,10,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new BinOpContext(new ExprContext(_parentctx, _parentState));
					PushNewRecursionContext(_localctx, _startState, RULE_expr);
					State = 126;
					if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
					State = 127;
					_la = TokenStream.LA(1);
					if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 491520L) != 0)) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 128;
					expr(7);
					}
					} 
				}
				State = 133;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,10,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 10: return expr_sempred((ExprContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expr_sempred(ExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 6);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,21,135,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,1,0,4,0,24,8,0,11,0,12,0,25,1,1,1,1,3,1,
		30,8,1,1,2,1,2,1,2,1,2,3,2,36,8,2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,3,5,3,
		46,8,3,10,3,12,3,49,9,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,4,3,4,59,8,4,1,5,
		1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,6,5,6,70,8,6,10,6,12,6,73,9,6,1,6,1,6,1,
		6,1,6,5,6,79,8,6,10,6,12,6,82,9,6,1,6,3,6,85,8,6,1,7,1,7,1,7,1,7,1,7,1,
		7,5,7,93,8,7,10,7,12,7,96,9,7,1,7,1,7,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,
		1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,
		1,10,1,10,3,10,125,8,10,1,10,1,10,1,10,5,10,130,8,10,10,10,12,10,133,9,
		10,1,10,0,1,20,11,0,2,4,6,8,10,12,14,16,18,20,0,2,1,0,12,13,1,0,15,18,
		141,0,23,1,0,0,0,2,29,1,0,0,0,4,31,1,0,0,0,6,39,1,0,0,0,8,58,1,0,0,0,10,
		60,1,0,0,0,12,63,1,0,0,0,14,86,1,0,0,0,16,99,1,0,0,0,18,103,1,0,0,0,20,
		124,1,0,0,0,22,24,3,2,1,0,23,22,1,0,0,0,24,25,1,0,0,0,25,23,1,0,0,0,25,
		26,1,0,0,0,26,1,1,0,0,0,27,30,3,4,2,0,28,30,3,6,3,0,29,27,1,0,0,0,29,28,
		1,0,0,0,30,3,1,0,0,0,31,32,5,1,0,0,32,35,5,19,0,0,33,34,5,2,0,0,34,36,
		3,20,10,0,35,33,1,0,0,0,35,36,1,0,0,0,36,37,1,0,0,0,37,38,5,3,0,0,38,5,
		1,0,0,0,39,40,5,1,0,0,40,41,5,19,0,0,41,42,5,4,0,0,42,43,5,5,0,0,43,47,
		5,6,0,0,44,46,3,8,4,0,45,44,1,0,0,0,46,49,1,0,0,0,47,45,1,0,0,0,47,48,
		1,0,0,0,48,50,1,0,0,0,49,47,1,0,0,0,50,51,5,7,0,0,51,7,1,0,0,0,52,59,3,
		4,2,0,53,59,3,10,5,0,54,59,3,12,6,0,55,59,3,14,7,0,56,59,3,16,8,0,57,59,
		3,18,9,0,58,52,1,0,0,0,58,53,1,0,0,0,58,54,1,0,0,0,58,55,1,0,0,0,58,56,
		1,0,0,0,58,57,1,0,0,0,59,9,1,0,0,0,60,61,3,20,10,0,61,62,5,3,0,0,62,11,
		1,0,0,0,63,64,5,8,0,0,64,65,5,4,0,0,65,66,3,20,10,0,66,67,5,5,0,0,67,71,
		5,6,0,0,68,70,3,8,4,0,69,68,1,0,0,0,70,73,1,0,0,0,71,69,1,0,0,0,71,72,
		1,0,0,0,72,74,1,0,0,0,73,71,1,0,0,0,74,84,5,7,0,0,75,76,5,9,0,0,76,80,
		5,6,0,0,77,79,3,8,4,0,78,77,1,0,0,0,79,82,1,0,0,0,80,78,1,0,0,0,80,81,
		1,0,0,0,81,83,1,0,0,0,82,80,1,0,0,0,83,85,5,7,0,0,84,75,1,0,0,0,84,85,
		1,0,0,0,85,13,1,0,0,0,86,87,5,10,0,0,87,88,5,4,0,0,88,89,3,20,10,0,89,
		90,5,5,0,0,90,94,5,6,0,0,91,93,3,8,4,0,92,91,1,0,0,0,93,96,1,0,0,0,94,
		92,1,0,0,0,94,95,1,0,0,0,95,97,1,0,0,0,96,94,1,0,0,0,97,98,5,7,0,0,98,
		15,1,0,0,0,99,100,5,11,0,0,100,101,3,20,10,0,101,102,5,3,0,0,102,17,1,
		0,0,0,103,104,7,0,0,0,104,105,5,4,0,0,105,106,5,20,0,0,106,107,5,14,0,
		0,107,108,3,20,10,0,108,109,5,5,0,0,109,110,5,3,0,0,110,19,1,0,0,0,111,
		112,6,10,-1,0,112,113,5,19,0,0,113,114,5,2,0,0,114,125,3,20,10,5,115,116,
		5,19,0,0,116,117,5,4,0,0,117,125,5,5,0,0,118,125,5,20,0,0,119,125,5,19,
		0,0,120,121,5,4,0,0,121,122,3,20,10,0,122,123,5,5,0,0,123,125,1,0,0,0,
		124,111,1,0,0,0,124,115,1,0,0,0,124,118,1,0,0,0,124,119,1,0,0,0,124,120,
		1,0,0,0,125,131,1,0,0,0,126,127,10,6,0,0,127,128,7,1,0,0,128,130,3,20,
		10,7,129,126,1,0,0,0,130,133,1,0,0,0,131,129,1,0,0,0,131,132,1,0,0,0,132,
		21,1,0,0,0,133,131,1,0,0,0,11,25,29,35,47,58,71,80,84,94,124,131
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
