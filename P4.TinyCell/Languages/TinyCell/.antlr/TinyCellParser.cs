//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from /Users/emilpriv/Desktop/Git-Clones/P4/P4.TinyCell/Languages/TinyCell/TinyCell.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class TinyCellParser : Parser
{
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0 = 1, T__1 = 2, T__2 = 3, T__3 = 4, T__4 = 5, T__5 = 6, T__6 = 7, T__7 = 8, T__8 = 9,
		T__9 = 10, T__10 = 11, T__11 = 12, T__12 = 13, T__13 = 14, T__14 = 15, T__15 = 16, T__16 = 17,
		T__17 = 18, T__18 = 19, T__19 = 20, T__20 = 21, T__21 = 22, T__22 = 23, T__23 = 24,
		T__24 = 25, T__25 = 26, T__26 = 27, T__27 = 28, T__28 = 29, T__29 = 30, T__30 = 31,
		T__31 = 32, T__32 = 33, T__33 = 34, T__34 = 35, T__35 = 36, T__36 = 37, T__37 = 38,
		T__38 = 39, T__39 = 40, T__40 = 41, T__41 = 42, T__42 = 43, T__43 = 44, T__44 = 45,
		T__45 = 46, T__46 = 47, T__47 = 48, T__48 = 49, T__49 = 50, Identifier = 51, String = 52,
		Numeral = 53, Whitespace = 54, Newline = 55;
	public const int
		RULE_document = 0, RULE_generalDeclaration = 1, RULE_setupDefinition = 2,
		RULE_updateDefinition = 3, RULE_functionDefinition = 4, RULE_type = 5,
		RULE_parameterList = 6, RULE_parameter = 7, RULE_declaration = 8, RULE_initialDeclaration = 9,
		RULE_compoundStatement = 10, RULE_statement = 11, RULE_ifStatement = 12,
		RULE_loopStatement = 13, RULE_jumpStatement = 14, RULE_expression = 15,
		RULE_assignmentExpression = 16, RULE_ternaryExpression = 17, RULE_orExpression = 18,
		RULE_andExpression = 19, RULE_equalityExpression = 20, RULE_comparisonExpression = 21,
		RULE_bitshiftExpression = 22, RULE_additiveExpression = 23, RULE_multiplicativeExpression = 24,
		RULE_unaryExpression = 25, RULE_primitiveExpression = 26, RULE_pinExpression = 27,
		RULE_identifier = 28, RULE_assignmentOperator = 29, RULE_pinVoltage = 30;
	public static readonly string[] ruleNames = {
		"document", "generalDeclaration", "setupDefinition", "updateDefinition",
		"functionDefinition", "type", "parameterList", "parameter", "declaration",
		"initialDeclaration", "compoundStatement", "statement", "ifStatement",
		"loopStatement", "jumpStatement", "expression", "assignmentExpression",
		"ternaryExpression", "orExpression", "andExpression", "equalityExpression",
		"comparisonExpression", "bitshiftExpression", "additiveExpression", "multiplicativeExpression",
		"unaryExpression", "primitiveExpression", "pinExpression", "identifier",
		"assignmentOperator", "pinVoltage"
	};

	private static readonly string[] _LiteralNames = {
		null, "'setup'", "'update'", "'('", "')'", "'void'", "'char'", "'int'",
		"'float'", "'bool'", "'pin'", "','", "';'", "'='", "'{'", "'}'", "'if'",
		"'else'", "'while'", "'for'", "'continue'", "'break'", "'return'", "'?'",
		"':'", "'||'", "'&&'", "'=='", "'!='", "'<'", "'>'", "'<='", "'>='", "'<<'",
		"'>>'", "'+'", "'-'", "'*'", "'/'", "'%'", "'++'", "'--'", "'set'", "'to'",
		"'*='", "'/='", "'%='", "'+='", "'-='", "'high'", "'low'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null,
		null, null, null, null, null, null, null, null, null, null, null, null,
		null, null, null, null, null, null, null, null, null, null, null, null,
		null, null, null, null, null, null, null, null, null, null, null, null,
		null, null, null, "Identifier", "String", "Numeral", "Whitespace", "Newline"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "TinyCell.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static TinyCellParser()
	{
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++)
		{
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

	public TinyCellParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

	public TinyCellParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class DocumentContext : ParserRuleContext
	{
		[System.Diagnostics.DebuggerNonUserCode]
		public SetupDefinitionContext setupDefinition()
		{
			return GetRuleContext<SetupDefinitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public UpdateDefinitionContext updateDefinition()
		{
			return GetRuleContext<UpdateDefinitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public GeneralDeclarationContext[] generalDeclaration()
		{
			return GetRuleContexts<GeneralDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public GeneralDeclarationContext generalDeclaration(int i)
		{
			return GetRuleContext<GeneralDeclarationContext>(i);
		}
		public DocumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_document; } }
	}

	[RuleVersion(0)]
	public DocumentContext document()
	{
		DocumentContext _localctx = new DocumentContext(Context, State);
		EnterRule(_localctx, 0, RULE_document);
		int _la;
		try
		{
			EnterOuterAlt(_localctx, 1);
			{
				State = 62;
				setupDefinition();
				State = 63;
				updateDefinition();
				State = 67;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 2016L) != 0))
				{
					{
						{
							State = 64;
							generalDeclaration();
						}
					}
					State = 69;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
			}
		}
		catch (RecognitionException re)
		{
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally
		{
			ExitRule();
		}
		return _localctx;
	}

	public partial class GeneralDeclarationContext : ParserRuleContext
	{
		[System.Diagnostics.DebuggerNonUserCode]
		public FunctionDefinitionContext functionDefinition()
		{
			return GetRuleContext<FunctionDefinitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public DeclarationContext declaration()
		{
			return GetRuleContext<DeclarationContext>(0);
		}
		public GeneralDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_generalDeclaration; } }
	}

	[RuleVersion(0)]
	public GeneralDeclarationContext generalDeclaration()
	{
		GeneralDeclarationContext _localctx = new GeneralDeclarationContext(Context, State);
		EnterRule(_localctx, 2, RULE_generalDeclaration);
		try
		{
			State = 72;
			ErrorHandler.Sync(this);
			switch (Interpreter.AdaptivePredict(TokenStream, 1, Context))
			{
				case 1:
					EnterOuterAlt(_localctx, 1);
					{
						State = 70;
						functionDefinition();
					}
					break;
				case 2:
					EnterOuterAlt(_localctx, 2);
					{
						State = 71;
						declaration();
					}
					break;
			}
		}
		catch (RecognitionException re)
		{
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally
		{
			ExitRule();
		}
		return _localctx;
	}

	public partial class SetupDefinitionContext : ParserRuleContext
	{
		[System.Diagnostics.DebuggerNonUserCode]
		public CompoundStatementContext compoundStatement()
		{
			return GetRuleContext<CompoundStatementContext>(0);
		}
		public SetupDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_setupDefinition; } }
	}

	[RuleVersion(0)]
	public SetupDefinitionContext setupDefinition()
	{
		SetupDefinitionContext _localctx = new SetupDefinitionContext(Context, State);
		EnterRule(_localctx, 4, RULE_setupDefinition);
		try
		{
			EnterOuterAlt(_localctx, 1);
			{
				State = 74;
				Match(T__0);
				State = 75;
				compoundStatement();
			}
		}
		catch (RecognitionException re)
		{
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally
		{
			ExitRule();
		}
		return _localctx;
	}

	public partial class UpdateDefinitionContext : ParserRuleContext
	{
		[System.Diagnostics.DebuggerNonUserCode]
		public CompoundStatementContext compoundStatement()
		{
			return GetRuleContext<CompoundStatementContext>(0);
		}
		public UpdateDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_updateDefinition; } }
	}

	[RuleVersion(0)]
	public UpdateDefinitionContext updateDefinition()
	{
		UpdateDefinitionContext _localctx = new UpdateDefinitionContext(Context, State);
		EnterRule(_localctx, 6, RULE_updateDefinition);
		try
		{
			EnterOuterAlt(_localctx, 1);
			{
				State = 77;
				Match(T__1);
				State = 78;
				compoundStatement();
			}
		}
		catch (RecognitionException re)
		{
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally
		{
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionDefinitionContext : ParserRuleContext
	{
		[System.Diagnostics.DebuggerNonUserCode]
		public TypeContext type()
		{
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public IdentifierContext identifier()
		{
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public ParameterListContext parameterList()
		{
			return GetRuleContext<ParameterListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public CompoundStatementContext compoundStatement()
		{
			return GetRuleContext<CompoundStatementContext>(0);
		}
		public FunctionDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionDefinition; } }
	}

	[RuleVersion(0)]
	public FunctionDefinitionContext functionDefinition()
	{
		FunctionDefinitionContext _localctx = new FunctionDefinitionContext(Context, State);
		EnterRule(_localctx, 8, RULE_functionDefinition);
		try
		{
			EnterOuterAlt(_localctx, 1);
			{
				State = 80;
				type();
				State = 81;
				identifier();
				State = 82;
				Match(T__2);
				State = 83;
				parameterList(0);
				State = 84;
				Match(T__3);
				State = 85;
				compoundStatement();
			}
		}
		catch (RecognitionException re)
		{
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally
		{
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext
	{
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
	}

	[RuleVersion(0)]
	public TypeContext type()
	{
		TypeContext _localctx = new TypeContext(Context, State);
		EnterRule(_localctx, 10, RULE_type);
		int _la;
		try
		{
			EnterOuterAlt(_localctx, 1);
			{
				State = 87;
				_la = TokenStream.LA(1);
				if (!((((_la) & ~0x3f) == 0 && ((1L << _la) & 2016L) != 0)))
				{
					ErrorHandler.RecoverInline(this);
				}
				else
				{
					ErrorHandler.ReportMatch(this);
					Consume();
				}
			}
		}
		catch (RecognitionException re)
		{
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally
		{
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterListContext : ParserRuleContext
	{
		[System.Diagnostics.DebuggerNonUserCode]
		public ParameterContext parameter()
		{
			return GetRuleContext<ParameterContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public ParameterListContext parameterList()
		{
			return GetRuleContext<ParameterListContext>(0);
		}
		public ParameterListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameterList; } }
	}

	[RuleVersion(0)]
	public ParameterListContext parameterList()
	{
		return parameterList(0);
	}

	private ParameterListContext parameterList(int _p)
	{
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ParameterListContext _localctx = new ParameterListContext(Context, _parentState);
		ParameterListContext _prevctx = _localctx;
		int _startState = 12;
		EnterRecursionRule(_localctx, 12, RULE_parameterList, _p);
		try
		{
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
				{
					State = 90;
					parameter();
				}
				Context.Stop = TokenStream.LT(-1);
				State = 97;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream, 2, Context);
				while (_alt != 2 && _alt != global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER)
				{
					if (_alt == 1)
					{
						if (ParseListeners != null)
							TriggerExitRuleEvent();
						_prevctx = _localctx;
						{
							{
								_localctx = new ParameterListContext(_parentctx, _parentState);
								PushNewRecursionContext(_localctx, _startState, RULE_parameterList);
								State = 92;
								if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
								State = 93;
								Match(T__10);
								State = 94;
								parameter();
							}
						}
					}
					State = 99;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream, 2, Context);
				}
			}
		}
		catch (RecognitionException re)
		{
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally
		{
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ParameterContext : ParserRuleContext
	{
		[System.Diagnostics.DebuggerNonUserCode]
		public TypeContext type()
		{
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public IdentifierContext identifier()
		{
			return GetRuleContext<IdentifierContext>(0);
		}
		public ParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameter; } }
	}

	[RuleVersion(0)]
	public ParameterContext parameter()
	{
		ParameterContext _localctx = new ParameterContext(Context, State);
		EnterRule(_localctx, 14, RULE_parameter);
		try
		{
			EnterOuterAlt(_localctx, 1);
			{
				State = 100;
				type();
				State = 101;
				identifier();
			}
		}
		catch (RecognitionException re)
		{
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally
		{
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclarationContext : ParserRuleContext
	{
		[System.Diagnostics.DebuggerNonUserCode]
		public TypeContext type()
		{
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public InitialDeclarationContext initialDeclaration()
		{
			return GetRuleContext<InitialDeclarationContext>(0);
		}
		public DeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declaration; } }
	}

	[RuleVersion(0)]
	public DeclarationContext declaration()
	{
		DeclarationContext _localctx = new DeclarationContext(Context, State);
		EnterRule(_localctx, 16, RULE_declaration);
		try
		{
			EnterOuterAlt(_localctx, 1);
			{
				State = 103;
				type();
				State = 104;
				initialDeclaration();
				State = 105;
				Match(T__11);
			}
		}
		catch (RecognitionException re)
		{
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally
		{
			ExitRule();
		}
		return _localctx;
	}

	public partial class InitialDeclarationContext : ParserRuleContext
	{
		[System.Diagnostics.DebuggerNonUserCode]
		public IdentifierContext identifier()
		{
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public AssignmentExpressionContext assignmentExpression()
		{
			return GetRuleContext<AssignmentExpressionContext>(0);
		}
		public InitialDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_initialDeclaration; } }
	}

	[RuleVersion(0)]
	public InitialDeclarationContext initialDeclaration()
	{
		InitialDeclarationContext _localctx = new InitialDeclarationContext(Context, State);
		EnterRule(_localctx, 18, RULE_initialDeclaration);
		try
		{
			State = 112;
			ErrorHandler.Sync(this);
			switch (Interpreter.AdaptivePredict(TokenStream, 3, Context))
			{
				case 1:
					EnterOuterAlt(_localctx, 1);
					{
						State = 107;
						identifier();
					}
					break;
				case 2:
					EnterOuterAlt(_localctx, 2);
					{
						State = 108;
						identifier();
						State = 109;
						Match(T__12);
						State = 110;
						assignmentExpression();
					}
					break;
			}
		}
		catch (RecognitionException re)
		{
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally
		{
			ExitRule();
		}
		return _localctx;
	}

	public partial class CompoundStatementContext : ParserRuleContext
	{
		[System.Diagnostics.DebuggerNonUserCode]
		public StatementContext[] statement()
		{
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public StatementContext statement(int i)
		{
			return GetRuleContext<StatementContext>(i);
		}
		public CompoundStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compoundStatement; } }
	}

	[RuleVersion(0)]
	public CompoundStatementContext compoundStatement()
	{
		CompoundStatementContext _localctx = new CompoundStatementContext(Context, State);
		EnterRule(_localctx, 20, RULE_compoundStatement);
		int _la;
		try
		{
			EnterOuterAlt(_localctx, 1);
			{
				State = 114;
				Match(T__13);
				State = 118;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 13518495471699936L) != 0))
				{
					{
						{
							State = 115;
							statement();
						}
					}
					State = 120;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 121;
				Match(T__14);
			}
		}
		catch (RecognitionException re)
		{
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally
		{
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext
	{
		[System.Diagnostics.DebuggerNonUserCode]
		public IfStatementContext ifStatement()
		{
			return GetRuleContext<IfStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public LoopStatementContext loopStatement()
		{
			return GetRuleContext<LoopStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public JumpStatementContext jumpStatement()
		{
			return GetRuleContext<JumpStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public DeclarationContext declaration()
		{
			return GetRuleContext<DeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public ExpressionContext expression()
		{
			return GetRuleContext<ExpressionContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
	}

	[RuleVersion(0)]
	public StatementContext statement()
	{
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 22, RULE_statement);
		try
		{
			State = 128;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1))
			{
				case T__15:
					EnterOuterAlt(_localctx, 1);
					{
						State = 123;
						ifStatement();
					}
					break;
				case T__17:
				case T__18:
					EnterOuterAlt(_localctx, 2);
					{
						State = 124;
						loopStatement();
					}
					break;
				case T__19:
				case T__20:
				case T__21:
					EnterOuterAlt(_localctx, 3);
					{
						State = 125;
						jumpStatement();
					}
					break;
				case T__4:
				case T__5:
				case T__6:
				case T__7:
				case T__8:
				case T__9:
					EnterOuterAlt(_localctx, 4);
					{
						State = 126;
						declaration();
					}
					break;
				case T__39:
				case T__40:
				case T__41:
				case String:
				case Numeral:
					EnterOuterAlt(_localctx, 5);
					{
						State = 127;
						expression();
					}
					break;
				default:
					throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re)
		{
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally
		{
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfStatementContext : ParserRuleContext
	{
		[System.Diagnostics.DebuggerNonUserCode]
		public ExpressionContext expression()
		{
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public CompoundStatementContext[] compoundStatement()
		{
			return GetRuleContexts<CompoundStatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public CompoundStatementContext compoundStatement(int i)
		{
			return GetRuleContext<CompoundStatementContext>(i);
		}
		public IfStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifStatement; } }
	}

	[RuleVersion(0)]
	public IfStatementContext ifStatement()
	{
		IfStatementContext _localctx = new IfStatementContext(Context, State);
		EnterRule(_localctx, 24, RULE_ifStatement);
		try
		{
			State = 144;
			ErrorHandler.Sync(this);
			switch (Interpreter.AdaptivePredict(TokenStream, 6, Context))
			{
				case 1:
					EnterOuterAlt(_localctx, 1);
					{
						State = 130;
						Match(T__15);
						State = 131;
						Match(T__2);
						State = 132;
						expression();
						State = 133;
						Match(T__3);
						State = 134;
						compoundStatement();
					}
					break;
				case 2:
					EnterOuterAlt(_localctx, 2);
					{
						State = 136;
						Match(T__15);
						State = 137;
						Match(T__2);
						State = 138;
						expression();
						State = 139;
						Match(T__3);
						State = 140;
						compoundStatement();
						State = 141;
						Match(T__16);
						State = 142;
						compoundStatement();
					}
					break;
			}
		}
		catch (RecognitionException re)
		{
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally
		{
			ExitRule();
		}
		return _localctx;
	}

	public partial class LoopStatementContext : ParserRuleContext
	{
		[System.Diagnostics.DebuggerNonUserCode]
		public ExpressionContext[] expression()
		{
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public ExpressionContext expression(int i)
		{
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public CompoundStatementContext compoundStatement()
		{
			return GetRuleContext<CompoundStatementContext>(0);
		}
		public LoopStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loopStatement; } }
	}

	[RuleVersion(0)]
	public LoopStatementContext loopStatement()
	{
		LoopStatementContext _localctx = new LoopStatementContext(Context, State);
		EnterRule(_localctx, 26, RULE_loopStatement);
		try
		{
			State = 162;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1))
			{
				case T__17:
					EnterOuterAlt(_localctx, 1);
					{
						State = 146;
						Match(T__17);
						State = 147;
						Match(T__2);
						State = 148;
						expression();
						State = 149;
						Match(T__3);
						State = 150;
						compoundStatement();
					}
					break;
				case T__18:
					EnterOuterAlt(_localctx, 2);
					{
						State = 152;
						Match(T__18);
						State = 153;
						Match(T__2);
						State = 154;
						expression();
						State = 155;
						Match(T__11);
						State = 156;
						expression();
						State = 157;
						Match(T__11);
						State = 158;
						expression();
						State = 159;
						Match(T__3);
						State = 160;
						compoundStatement();
					}
					break;
				default:
					throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re)
		{
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally
		{
			ExitRule();
		}
		return _localctx;
	}

	public partial class JumpStatementContext : ParserRuleContext
	{
		[System.Diagnostics.DebuggerNonUserCode]
		public ExpressionContext expression()
		{
			return GetRuleContext<ExpressionContext>(0);
		}
		public JumpStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_jumpStatement; } }
	}

	[RuleVersion(0)]
	public JumpStatementContext jumpStatement()
	{
		JumpStatementContext _localctx = new JumpStatementContext(Context, State);
		EnterRule(_localctx, 28, RULE_jumpStatement);
		try
		{
			State = 172;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1))
			{
				case T__19:
					EnterOuterAlt(_localctx, 1);
					{
						State = 164;
						Match(T__19);
						State = 165;
						Match(T__11);
					}
					break;
				case T__20:
					EnterOuterAlt(_localctx, 2);
					{
						State = 166;
						Match(T__20);
						State = 167;
						Match(T__11);
					}
					break;
				case T__21:
					EnterOuterAlt(_localctx, 3);
					{
						State = 168;
						Match(T__21);
						State = 169;
						expression();
						State = 170;
						Match(T__11);
					}
					break;
				default:
					throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re)
		{
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally
		{
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext
	{
		[System.Diagnostics.DebuggerNonUserCode]
		public AssignmentExpressionContext assignmentExpression()
		{
			return GetRuleContext<AssignmentExpressionContext>(0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	}

	[RuleVersion(0)]
	public ExpressionContext expression()
	{
		ExpressionContext _localctx = new ExpressionContext(Context, State);
		EnterRule(_localctx, 30, RULE_expression);
		try
		{
			EnterOuterAlt(_localctx, 1);
			{
				State = 174;
				assignmentExpression();
			}
		}
		catch (RecognitionException re)
		{
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally
		{
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentExpressionContext : ParserRuleContext
	{
		[System.Diagnostics.DebuggerNonUserCode]
		public TernaryExpressionContext ternaryExpression()
		{
			return GetRuleContext<TernaryExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public PinExpressionContext pinExpression()
		{
			return GetRuleContext<PinExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public UnaryExpressionContext unaryExpression()
		{
			return GetRuleContext<UnaryExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public AssignmentOperatorContext assignmentOperator()
		{
			return GetRuleContext<AssignmentOperatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public AssignmentExpressionContext assignmentExpression()
		{
			return GetRuleContext<AssignmentExpressionContext>(0);
		}
		public AssignmentExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignmentExpression; } }
	}

	[RuleVersion(0)]
	public AssignmentExpressionContext assignmentExpression()
	{
		AssignmentExpressionContext _localctx = new AssignmentExpressionContext(Context, State);
		EnterRule(_localctx, 32, RULE_assignmentExpression);
		try
		{
			State = 182;
			ErrorHandler.Sync(this);
			switch (Interpreter.AdaptivePredict(TokenStream, 9, Context))
			{
				case 1:
					EnterOuterAlt(_localctx, 1);
					{
						State = 176;
						ternaryExpression();
					}
					break;
				case 2:
					EnterOuterAlt(_localctx, 2);
					{
						State = 177;
						pinExpression();
					}
					break;
				case 3:
					EnterOuterAlt(_localctx, 3);
					{
						State = 178;
						unaryExpression(0);
						State = 179;
						assignmentOperator();
						State = 180;
						assignmentExpression();
					}
					break;
			}
		}
		catch (RecognitionException re)
		{
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally
		{
			ExitRule();
		}
		return _localctx;
	}

	public partial class TernaryExpressionContext : ParserRuleContext
	{
		[System.Diagnostics.DebuggerNonUserCode]
		public OrExpressionContext orExpression()
		{
			return GetRuleContext<OrExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public ExpressionContext[] expression()
		{
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public ExpressionContext expression(int i)
		{
			return GetRuleContext<ExpressionContext>(i);
		}
		public TernaryExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ternaryExpression; } }
	}

	[RuleVersion(0)]
	public TernaryExpressionContext ternaryExpression()
	{
		TernaryExpressionContext _localctx = new TernaryExpressionContext(Context, State);
		EnterRule(_localctx, 34, RULE_ternaryExpression);
		try
		{
			State = 191;
			ErrorHandler.Sync(this);
			switch (Interpreter.AdaptivePredict(TokenStream, 10, Context))
			{
				case 1:
					EnterOuterAlt(_localctx, 1);
					{
						State = 184;
						orExpression(0);
					}
					break;
				case 2:
					EnterOuterAlt(_localctx, 2);
					{
						State = 185;
						orExpression(0);
						State = 186;
						Match(T__22);
						State = 187;
						expression();
						State = 188;
						Match(T__23);
						State = 189;
						expression();
					}
					break;
			}
		}
		catch (RecognitionException re)
		{
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally
		{
			ExitRule();
		}
		return _localctx;
	}

	public partial class OrExpressionContext : ParserRuleContext
	{
		[System.Diagnostics.DebuggerNonUserCode]
		public AndExpressionContext andExpression()
		{
			return GetRuleContext<AndExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public OrExpressionContext orExpression()
		{
			return GetRuleContext<OrExpressionContext>(0);
		}
		public OrExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_orExpression; } }
	}

	[RuleVersion(0)]
	public OrExpressionContext orExpression()
	{
		return orExpression(0);
	}

	private OrExpressionContext orExpression(int _p)
	{
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		OrExpressionContext _localctx = new OrExpressionContext(Context, _parentState);
		OrExpressionContext _prevctx = _localctx;
		int _startState = 36;
		EnterRecursionRule(_localctx, 36, RULE_orExpression, _p);
		try
		{
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
				{
					State = 194;
					andExpression(0);
				}
				Context.Stop = TokenStream.LT(-1);
				State = 201;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream, 11, Context);
				while (_alt != 2 && _alt != global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER)
				{
					if (_alt == 1)
					{
						if (ParseListeners != null)
							TriggerExitRuleEvent();
						_prevctx = _localctx;
						{
							{
								_localctx = new OrExpressionContext(_parentctx, _parentState);
								PushNewRecursionContext(_localctx, _startState, RULE_orExpression);
								State = 196;
								if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
								State = 197;
								Match(T__24);
								State = 198;
								andExpression(0);
							}
						}
					}
					State = 203;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream, 11, Context);
				}
			}
		}
		catch (RecognitionException re)
		{
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally
		{
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class AndExpressionContext : ParserRuleContext
	{
		[System.Diagnostics.DebuggerNonUserCode]
		public EqualityExpressionContext equalityExpression()
		{
			return GetRuleContext<EqualityExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public AndExpressionContext andExpression()
		{
			return GetRuleContext<AndExpressionContext>(0);
		}
		public AndExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_andExpression; } }
	}

	[RuleVersion(0)]
	public AndExpressionContext andExpression()
	{
		return andExpression(0);
	}

	private AndExpressionContext andExpression(int _p)
	{
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		AndExpressionContext _localctx = new AndExpressionContext(Context, _parentState);
		AndExpressionContext _prevctx = _localctx;
		int _startState = 38;
		EnterRecursionRule(_localctx, 38, RULE_andExpression, _p);
		try
		{
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
				{
					State = 205;
					equalityExpression(0);
				}
				Context.Stop = TokenStream.LT(-1);
				State = 212;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream, 12, Context);
				while (_alt != 2 && _alt != global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER)
				{
					if (_alt == 1)
					{
						if (ParseListeners != null)
							TriggerExitRuleEvent();
						_prevctx = _localctx;
						{
							{
								_localctx = new AndExpressionContext(_parentctx, _parentState);
								PushNewRecursionContext(_localctx, _startState, RULE_andExpression);
								State = 207;
								if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
								State = 208;
								Match(T__25);
								State = 209;
								equalityExpression(0);
							}
						}
					}
					State = 214;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream, 12, Context);
				}
			}
		}
		catch (RecognitionException re)
		{
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally
		{
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class EqualityExpressionContext : ParserRuleContext
	{
		[System.Diagnostics.DebuggerNonUserCode]
		public ComparisonExpressionContext comparisonExpression()
		{
			return GetRuleContext<ComparisonExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public EqualityExpressionContext equalityExpression()
		{
			return GetRuleContext<EqualityExpressionContext>(0);
		}
		public EqualityExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_equalityExpression; } }
	}

	[RuleVersion(0)]
	public EqualityExpressionContext equalityExpression()
	{
		return equalityExpression(0);
	}

	private EqualityExpressionContext equalityExpression(int _p)
	{
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		EqualityExpressionContext _localctx = new EqualityExpressionContext(Context, _parentState);
		EqualityExpressionContext _prevctx = _localctx;
		int _startState = 40;
		EnterRecursionRule(_localctx, 40, RULE_equalityExpression, _p);
		try
		{
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
				{
					State = 216;
					comparisonExpression(0);
				}
				Context.Stop = TokenStream.LT(-1);
				State = 226;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream, 14, Context);
				while (_alt != 2 && _alt != global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER)
				{
					if (_alt == 1)
					{
						if (ParseListeners != null)
							TriggerExitRuleEvent();
						_prevctx = _localctx;
						{
							State = 224;
							ErrorHandler.Sync(this);
							switch (Interpreter.AdaptivePredict(TokenStream, 13, Context))
							{
								case 1:
									{
										_localctx = new EqualityExpressionContext(_parentctx, _parentState);
										PushNewRecursionContext(_localctx, _startState, RULE_equalityExpression);
										State = 218;
										if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
										State = 219;
										Match(T__26);
										State = 220;
										comparisonExpression(0);
									}
									break;
								case 2:
									{
										_localctx = new EqualityExpressionContext(_parentctx, _parentState);
										PushNewRecursionContext(_localctx, _startState, RULE_equalityExpression);
										State = 221;
										if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
										State = 222;
										Match(T__27);
										State = 223;
										comparisonExpression(0);
									}
									break;
							}
						}
					}
					State = 228;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream, 14, Context);
				}
			}
		}
		catch (RecognitionException re)
		{
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally
		{
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ComparisonExpressionContext : ParserRuleContext
	{
		[System.Diagnostics.DebuggerNonUserCode]
		public BitshiftExpressionContext bitshiftExpression()
		{
			return GetRuleContext<BitshiftExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public ComparisonExpressionContext comparisonExpression()
		{
			return GetRuleContext<ComparisonExpressionContext>(0);
		}
		public ComparisonExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comparisonExpression; } }
	}

	[RuleVersion(0)]
	public ComparisonExpressionContext comparisonExpression()
	{
		return comparisonExpression(0);
	}

	private ComparisonExpressionContext comparisonExpression(int _p)
	{
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ComparisonExpressionContext _localctx = new ComparisonExpressionContext(Context, _parentState);
		ComparisonExpressionContext _prevctx = _localctx;
		int _startState = 42;
		EnterRecursionRule(_localctx, 42, RULE_comparisonExpression, _p);
		try
		{
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
				{
					State = 230;
					bitshiftExpression(0);
				}
				Context.Stop = TokenStream.LT(-1);
				State = 246;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream, 16, Context);
				while (_alt != 2 && _alt != global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER)
				{
					if (_alt == 1)
					{
						if (ParseListeners != null)
							TriggerExitRuleEvent();
						_prevctx = _localctx;
						{
							State = 244;
							ErrorHandler.Sync(this);
							switch (Interpreter.AdaptivePredict(TokenStream, 15, Context))
							{
								case 1:
									{
										_localctx = new ComparisonExpressionContext(_parentctx, _parentState);
										PushNewRecursionContext(_localctx, _startState, RULE_comparisonExpression);
										State = 232;
										if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
										State = 233;
										Match(T__28);
										State = 234;
										bitshiftExpression(0);
									}
									break;
								case 2:
									{
										_localctx = new ComparisonExpressionContext(_parentctx, _parentState);
										PushNewRecursionContext(_localctx, _startState, RULE_comparisonExpression);
										State = 235;
										if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
										State = 236;
										Match(T__29);
										State = 237;
										bitshiftExpression(0);
									}
									break;
								case 3:
									{
										_localctx = new ComparisonExpressionContext(_parentctx, _parentState);
										PushNewRecursionContext(_localctx, _startState, RULE_comparisonExpression);
										State = 238;
										if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
										State = 239;
										Match(T__30);
										State = 240;
										bitshiftExpression(0);
									}
									break;
								case 4:
									{
										_localctx = new ComparisonExpressionContext(_parentctx, _parentState);
										PushNewRecursionContext(_localctx, _startState, RULE_comparisonExpression);
										State = 241;
										if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
										State = 242;
										Match(T__31);
										State = 243;
										bitshiftExpression(0);
									}
									break;
							}
						}
					}
					State = 248;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream, 16, Context);
				}
			}
		}
		catch (RecognitionException re)
		{
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally
		{
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class BitshiftExpressionContext : ParserRuleContext
	{
		[System.Diagnostics.DebuggerNonUserCode]
		public AdditiveExpressionContext additiveExpression()
		{
			return GetRuleContext<AdditiveExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public BitshiftExpressionContext bitshiftExpression()
		{
			return GetRuleContext<BitshiftExpressionContext>(0);
		}
		public BitshiftExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bitshiftExpression; } }
	}

	[RuleVersion(0)]
	public BitshiftExpressionContext bitshiftExpression()
	{
		return bitshiftExpression(0);
	}

	private BitshiftExpressionContext bitshiftExpression(int _p)
	{
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		BitshiftExpressionContext _localctx = new BitshiftExpressionContext(Context, _parentState);
		BitshiftExpressionContext _prevctx = _localctx;
		int _startState = 44;
		EnterRecursionRule(_localctx, 44, RULE_bitshiftExpression, _p);
		try
		{
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
				{
					State = 250;
					additiveExpression(0);
				}
				Context.Stop = TokenStream.LT(-1);
				State = 260;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream, 18, Context);
				while (_alt != 2 && _alt != global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER)
				{
					if (_alt == 1)
					{
						if (ParseListeners != null)
							TriggerExitRuleEvent();
						_prevctx = _localctx;
						{
							State = 258;
							ErrorHandler.Sync(this);
							switch (Interpreter.AdaptivePredict(TokenStream, 17, Context))
							{
								case 1:
									{
										_localctx = new BitshiftExpressionContext(_parentctx, _parentState);
										PushNewRecursionContext(_localctx, _startState, RULE_bitshiftExpression);
										State = 252;
										if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
										State = 253;
										Match(T__32);
										State = 254;
										additiveExpression(0);
									}
									break;
								case 2:
									{
										_localctx = new BitshiftExpressionContext(_parentctx, _parentState);
										PushNewRecursionContext(_localctx, _startState, RULE_bitshiftExpression);
										State = 255;
										if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
										State = 256;
										Match(T__33);
										State = 257;
										additiveExpression(0);
									}
									break;
							}
						}
					}
					State = 262;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream, 18, Context);
				}
			}
		}
		catch (RecognitionException re)
		{
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally
		{
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class AdditiveExpressionContext : ParserRuleContext
	{
		[System.Diagnostics.DebuggerNonUserCode]
		public MultiplicativeExpressionContext multiplicativeExpression()
		{
			return GetRuleContext<MultiplicativeExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public AdditiveExpressionContext additiveExpression()
		{
			return GetRuleContext<AdditiveExpressionContext>(0);
		}
		public AdditiveExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_additiveExpression; } }
	}

	[RuleVersion(0)]
	public AdditiveExpressionContext additiveExpression()
	{
		return additiveExpression(0);
	}

	private AdditiveExpressionContext additiveExpression(int _p)
	{
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		AdditiveExpressionContext _localctx = new AdditiveExpressionContext(Context, _parentState);
		AdditiveExpressionContext _prevctx = _localctx;
		int _startState = 46;
		EnterRecursionRule(_localctx, 46, RULE_additiveExpression, _p);
		try
		{
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
				{
					State = 264;
					multiplicativeExpression(0);
				}
				Context.Stop = TokenStream.LT(-1);
				State = 274;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream, 20, Context);
				while (_alt != 2 && _alt != global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER)
				{
					if (_alt == 1)
					{
						if (ParseListeners != null)
							TriggerExitRuleEvent();
						_prevctx = _localctx;
						{
							State = 272;
							ErrorHandler.Sync(this);
							switch (Interpreter.AdaptivePredict(TokenStream, 19, Context))
							{
								case 1:
									{
										_localctx = new AdditiveExpressionContext(_parentctx, _parentState);
										PushNewRecursionContext(_localctx, _startState, RULE_additiveExpression);
										State = 266;
										if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
										State = 267;
										Match(T__34);
										State = 268;
										multiplicativeExpression(0);
									}
									break;
								case 2:
									{
										_localctx = new AdditiveExpressionContext(_parentctx, _parentState);
										PushNewRecursionContext(_localctx, _startState, RULE_additiveExpression);
										State = 269;
										if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
										State = 270;
										Match(T__35);
										State = 271;
										multiplicativeExpression(0);
									}
									break;
							}
						}
					}
					State = 276;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream, 20, Context);
				}
			}
		}
		catch (RecognitionException re)
		{
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally
		{
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class MultiplicativeExpressionContext : ParserRuleContext
	{
		[System.Diagnostics.DebuggerNonUserCode]
		public UnaryExpressionContext unaryExpression()
		{
			return GetRuleContext<UnaryExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public MultiplicativeExpressionContext multiplicativeExpression()
		{
			return GetRuleContext<MultiplicativeExpressionContext>(0);
		}
		public MultiplicativeExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multiplicativeExpression; } }
	}

	[RuleVersion(0)]
	public MultiplicativeExpressionContext multiplicativeExpression()
	{
		return multiplicativeExpression(0);
	}

	private MultiplicativeExpressionContext multiplicativeExpression(int _p)
	{
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		MultiplicativeExpressionContext _localctx = new MultiplicativeExpressionContext(Context, _parentState);
		MultiplicativeExpressionContext _prevctx = _localctx;
		int _startState = 48;
		EnterRecursionRule(_localctx, 48, RULE_multiplicativeExpression, _p);
		try
		{
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
				{
					State = 278;
					unaryExpression(0);
				}
				Context.Stop = TokenStream.LT(-1);
				State = 291;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream, 22, Context);
				while (_alt != 2 && _alt != global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER)
				{
					if (_alt == 1)
					{
						if (ParseListeners != null)
							TriggerExitRuleEvent();
						_prevctx = _localctx;
						{
							State = 289;
							ErrorHandler.Sync(this);
							switch (Interpreter.AdaptivePredict(TokenStream, 21, Context))
							{
								case 1:
									{
										_localctx = new MultiplicativeExpressionContext(_parentctx, _parentState);
										PushNewRecursionContext(_localctx, _startState, RULE_multiplicativeExpression);
										State = 280;
										if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
										State = 281;
										Match(T__36);
										State = 282;
										unaryExpression(0);
									}
									break;
								case 2:
									{
										_localctx = new MultiplicativeExpressionContext(_parentctx, _parentState);
										PushNewRecursionContext(_localctx, _startState, RULE_multiplicativeExpression);
										State = 283;
										if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
										State = 284;
										Match(T__37);
										State = 285;
										unaryExpression(0);
									}
									break;
								case 3:
									{
										_localctx = new MultiplicativeExpressionContext(_parentctx, _parentState);
										PushNewRecursionContext(_localctx, _startState, RULE_multiplicativeExpression);
										State = 286;
										if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
										State = 287;
										Match(T__38);
										State = 288;
										unaryExpression(0);
									}
									break;
							}
						}
					}
					State = 293;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream, 22, Context);
				}
			}
		}
		catch (RecognitionException re)
		{
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally
		{
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class UnaryExpressionContext : ParserRuleContext
	{
		[System.Diagnostics.DebuggerNonUserCode]
		public PrimitiveExpressionContext primitiveExpression()
		{
			return GetRuleContext<PrimitiveExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public UnaryExpressionContext unaryExpression()
		{
			return GetRuleContext<UnaryExpressionContext>(0);
		}
		public UnaryExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unaryExpression; } }
	}

	[RuleVersion(0)]
	public UnaryExpressionContext unaryExpression()
	{
		return unaryExpression(0);
	}

	private UnaryExpressionContext unaryExpression(int _p)
	{
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		UnaryExpressionContext _localctx = new UnaryExpressionContext(Context, _parentState);
		UnaryExpressionContext _prevctx = _localctx;
		int _startState = 50;
		EnterRecursionRule(_localctx, 50, RULE_unaryExpression, _p);
		try
		{
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
				State = 300;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1))
				{
					case String:
					case Numeral:
						{
							State = 295;
							primitiveExpression();
						}
						break;
					case T__39:
						{
							State = 296;
							Match(T__39);
							State = 297;
							unaryExpression(2);
						}
						break;
					case T__40:
						{
							State = 298;
							Match(T__40);
							State = 299;
							unaryExpression(1);
						}
						break;
					default:
						throw new NoViableAltException(this);
				}
				Context.Stop = TokenStream.LT(-1);
				State = 308;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream, 25, Context);
				while (_alt != 2 && _alt != global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER)
				{
					if (_alt == 1)
					{
						if (ParseListeners != null)
							TriggerExitRuleEvent();
						_prevctx = _localctx;
						{
							State = 306;
							ErrorHandler.Sync(this);
							switch (Interpreter.AdaptivePredict(TokenStream, 24, Context))
							{
								case 1:
									{
										_localctx = new UnaryExpressionContext(_parentctx, _parentState);
										PushNewRecursionContext(_localctx, _startState, RULE_unaryExpression);
										State = 302;
										if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
										State = 303;
										Match(T__39);
									}
									break;
								case 2:
									{
										_localctx = new UnaryExpressionContext(_parentctx, _parentState);
										PushNewRecursionContext(_localctx, _startState, RULE_unaryExpression);
										State = 304;
										if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
										State = 305;
										Match(T__40);
									}
									break;
							}
						}
					}
					State = 310;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream, 25, Context);
				}
			}
		}
		catch (RecognitionException re)
		{
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally
		{
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class PrimitiveExpressionContext : ParserRuleContext
	{
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Numeral() { return GetToken(TinyCellParser.Numeral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode String() { return GetToken(TinyCellParser.String, 0); }
		public PrimitiveExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primitiveExpression; } }
	}

	[RuleVersion(0)]
	public PrimitiveExpressionContext primitiveExpression()
	{
		PrimitiveExpressionContext _localctx = new PrimitiveExpressionContext(Context, State);
		EnterRule(_localctx, 52, RULE_primitiveExpression);
		int _la;
		try
		{
			EnterOuterAlt(_localctx, 1);
			{
				State = 311;
				_la = TokenStream.LA(1);
				if (!(_la == String || _la == Numeral))
				{
					ErrorHandler.RecoverInline(this);
				}
				else
				{
					ErrorHandler.ReportMatch(this);
					Consume();
				}
			}
		}
		catch (RecognitionException re)
		{
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally
		{
			ExitRule();
		}
		return _localctx;
	}

	public partial class PinExpressionContext : ParserRuleContext
	{
		[System.Diagnostics.DebuggerNonUserCode]
		public IdentifierContext identifier()
		{
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public PinVoltageContext pinVoltage()
		{
			return GetRuleContext<PinVoltageContext>(0);
		}
		public PinExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pinExpression; } }
	}

	[RuleVersion(0)]
	public PinExpressionContext pinExpression()
	{
		PinExpressionContext _localctx = new PinExpressionContext(Context, State);
		EnterRule(_localctx, 54, RULE_pinExpression);
		try
		{
			EnterOuterAlt(_localctx, 1);
			{
				State = 313;
				Match(T__41);
				State = 314;
				identifier();
				State = 315;
				Match(T__42);
				State = 316;
				pinVoltage();
			}
		}
		catch (RecognitionException re)
		{
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally
		{
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierContext : ParserRuleContext
	{
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(TinyCellParser.Identifier, 0); }
		public IdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier; } }
	}

	[RuleVersion(0)]
	public IdentifierContext identifier()
	{
		IdentifierContext _localctx = new IdentifierContext(Context, State);
		EnterRule(_localctx, 56, RULE_identifier);
		try
		{
			EnterOuterAlt(_localctx, 1);
			{
				State = 318;
				Match(Identifier);
			}
		}
		catch (RecognitionException re)
		{
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally
		{
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentOperatorContext : ParserRuleContext
	{
		public AssignmentOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignmentOperator; } }
	}

	[RuleVersion(0)]
	public AssignmentOperatorContext assignmentOperator()
	{
		AssignmentOperatorContext _localctx = new AssignmentOperatorContext(Context, State);
		EnterRule(_localctx, 58, RULE_assignmentOperator);
		int _la;
		try
		{
			EnterOuterAlt(_localctx, 1);
			{
				State = 320;
				_la = TokenStream.LA(1);
				if (!((((_la) & ~0x3f) == 0 && ((1L << _la) & 545357767385088L) != 0)))
				{
					ErrorHandler.RecoverInline(this);
				}
				else
				{
					ErrorHandler.ReportMatch(this);
					Consume();
				}
			}
		}
		catch (RecognitionException re)
		{
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally
		{
			ExitRule();
		}
		return _localctx;
	}

	public partial class PinVoltageContext : ParserRuleContext
	{
		public PinVoltageContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pinVoltage; } }
	}

	[RuleVersion(0)]
	public PinVoltageContext pinVoltage()
	{
		PinVoltageContext _localctx = new PinVoltageContext(Context, State);
		EnterRule(_localctx, 60, RULE_pinVoltage);
		int _la;
		try
		{
			EnterOuterAlt(_localctx, 1);
			{
				State = 322;
				_la = TokenStream.LA(1);
				if (!(_la == T__48 || _la == T__49))
				{
					ErrorHandler.RecoverInline(this);
				}
				else
				{
					ErrorHandler.ReportMatch(this);
					Consume();
				}
			}
		}
		catch (RecognitionException re)
		{
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally
		{
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex)
	{
		switch (ruleIndex)
		{
			case 6: return parameterList_sempred((ParameterListContext)_localctx, predIndex);
			case 18: return orExpression_sempred((OrExpressionContext)_localctx, predIndex);
			case 19: return andExpression_sempred((AndExpressionContext)_localctx, predIndex);
			case 20: return equalityExpression_sempred((EqualityExpressionContext)_localctx, predIndex);
			case 21: return comparisonExpression_sempred((ComparisonExpressionContext)_localctx, predIndex);
			case 22: return bitshiftExpression_sempred((BitshiftExpressionContext)_localctx, predIndex);
			case 23: return additiveExpression_sempred((AdditiveExpressionContext)_localctx, predIndex);
			case 24: return multiplicativeExpression_sempred((MultiplicativeExpressionContext)_localctx, predIndex);
			case 25: return unaryExpression_sempred((UnaryExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool parameterList_sempred(ParameterListContext _localctx, int predIndex)
	{
		switch (predIndex)
		{
			case 0: return Precpred(Context, 1);
		}
		return true;
	}
	private bool orExpression_sempred(OrExpressionContext _localctx, int predIndex)
	{
		switch (predIndex)
		{
			case 1: return Precpred(Context, 1);
		}
		return true;
	}
	private bool andExpression_sempred(AndExpressionContext _localctx, int predIndex)
	{
		switch (predIndex)
		{
			case 2: return Precpred(Context, 1);
		}
		return true;
	}
	private bool equalityExpression_sempred(EqualityExpressionContext _localctx, int predIndex)
	{
		switch (predIndex)
		{
			case 3: return Precpred(Context, 2);
			case 4: return Precpred(Context, 1);
		}
		return true;
	}
	private bool comparisonExpression_sempred(ComparisonExpressionContext _localctx, int predIndex)
	{
		switch (predIndex)
		{
			case 5: return Precpred(Context, 4);
			case 6: return Precpred(Context, 3);
			case 7: return Precpred(Context, 2);
			case 8: return Precpred(Context, 1);
		}
		return true;
	}
	private bool bitshiftExpression_sempred(BitshiftExpressionContext _localctx, int predIndex)
	{
		switch (predIndex)
		{
			case 9: return Precpred(Context, 2);
			case 10: return Precpred(Context, 1);
		}
		return true;
	}
	private bool additiveExpression_sempred(AdditiveExpressionContext _localctx, int predIndex)
	{
		switch (predIndex)
		{
			case 11: return Precpred(Context, 2);
			case 12: return Precpred(Context, 1);
		}
		return true;
	}
	private bool multiplicativeExpression_sempred(MultiplicativeExpressionContext _localctx, int predIndex)
	{
		switch (predIndex)
		{
			case 13: return Precpred(Context, 3);
			case 14: return Precpred(Context, 2);
			case 15: return Precpred(Context, 1);
		}
		return true;
	}
	private bool unaryExpression_sempred(UnaryExpressionContext _localctx, int predIndex)
	{
		switch (predIndex)
		{
			case 16: return Precpred(Context, 4);
			case 17: return Precpred(Context, 3);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,55,325,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,1,0,1,0,1,0,5,0,66,8,0,10,0,12,0,69,9,0,1,1,1,1,3,
		1,73,8,1,1,2,1,2,1,2,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,
		6,1,6,1,6,1,6,1,6,1,6,5,6,96,8,6,10,6,12,6,99,9,6,1,7,1,7,1,7,1,8,1,8,
		1,8,1,8,1,9,1,9,1,9,1,9,1,9,3,9,113,8,9,1,10,1,10,5,10,117,8,10,10,10,
		12,10,120,9,10,1,10,1,10,1,11,1,11,1,11,1,11,1,11,3,11,129,8,11,1,12,1,
		12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,3,12,145,
		8,12,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,
		1,13,1,13,1,13,3,13,163,8,13,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,3,
		14,173,8,14,1,15,1,15,1,16,1,16,1,16,1,16,1,16,1,16,3,16,183,8,16,1,17,
		1,17,1,17,1,17,1,17,1,17,1,17,3,17,192,8,17,1,18,1,18,1,18,1,18,1,18,1,
		18,5,18,200,8,18,10,18,12,18,203,9,18,1,19,1,19,1,19,1,19,1,19,1,19,5,
		19,211,8,19,10,19,12,19,214,9,19,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,
		20,1,20,5,20,225,8,20,10,20,12,20,228,9,20,1,21,1,21,1,21,1,21,1,21,1,
		21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,5,21,245,8,21,10,21,12,
		21,248,9,21,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,5,22,259,8,22,
		10,22,12,22,262,9,22,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,5,23,
		273,8,23,10,23,12,23,276,9,23,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,
		1,24,1,24,1,24,1,24,5,24,290,8,24,10,24,12,24,293,9,24,1,25,1,25,1,25,
		1,25,1,25,1,25,3,25,301,8,25,1,25,1,25,1,25,1,25,5,25,307,8,25,10,25,12,
		25,310,9,25,1,26,1,26,1,27,1,27,1,27,1,27,1,27,1,28,1,28,1,29,1,29,1,30,
		1,30,1,30,0,9,12,36,38,40,42,44,46,48,50,31,0,2,4,6,8,10,12,14,16,18,20,
		22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,0,4,1,0,5,
		10,1,0,52,53,2,0,13,13,44,48,1,0,49,50,328,0,62,1,0,0,0,2,72,1,0,0,0,4,
		74,1,0,0,0,6,77,1,0,0,0,8,80,1,0,0,0,10,87,1,0,0,0,12,89,1,0,0,0,14,100,
		1,0,0,0,16,103,1,0,0,0,18,112,1,0,0,0,20,114,1,0,0,0,22,128,1,0,0,0,24,
		144,1,0,0,0,26,162,1,0,0,0,28,172,1,0,0,0,30,174,1,0,0,0,32,182,1,0,0,
		0,34,191,1,0,0,0,36,193,1,0,0,0,38,204,1,0,0,0,40,215,1,0,0,0,42,229,1,
		0,0,0,44,249,1,0,0,0,46,263,1,0,0,0,48,277,1,0,0,0,50,300,1,0,0,0,52,311,
		1,0,0,0,54,313,1,0,0,0,56,318,1,0,0,0,58,320,1,0,0,0,60,322,1,0,0,0,62,
		63,3,4,2,0,63,67,3,6,3,0,64,66,3,2,1,0,65,64,1,0,0,0,66,69,1,0,0,0,67,
		65,1,0,0,0,67,68,1,0,0,0,68,1,1,0,0,0,69,67,1,0,0,0,70,73,3,8,4,0,71,73,
		3,16,8,0,72,70,1,0,0,0,72,71,1,0,0,0,73,3,1,0,0,0,74,75,5,1,0,0,75,76,
		3,20,10,0,76,5,1,0,0,0,77,78,5,2,0,0,78,79,3,20,10,0,79,7,1,0,0,0,80,81,
		3,10,5,0,81,82,3,56,28,0,82,83,5,3,0,0,83,84,3,12,6,0,84,85,5,4,0,0,85,
		86,3,20,10,0,86,9,1,0,0,0,87,88,7,0,0,0,88,11,1,0,0,0,89,90,6,6,-1,0,90,
		91,3,14,7,0,91,97,1,0,0,0,92,93,10,1,0,0,93,94,5,11,0,0,94,96,3,14,7,0,
		95,92,1,0,0,0,96,99,1,0,0,0,97,95,1,0,0,0,97,98,1,0,0,0,98,13,1,0,0,0,
		99,97,1,0,0,0,100,101,3,10,5,0,101,102,3,56,28,0,102,15,1,0,0,0,103,104,
		3,10,5,0,104,105,3,18,9,0,105,106,5,12,0,0,106,17,1,0,0,0,107,113,3,56,
		28,0,108,109,3,56,28,0,109,110,5,13,0,0,110,111,3,32,16,0,111,113,1,0,
		0,0,112,107,1,0,0,0,112,108,1,0,0,0,113,19,1,0,0,0,114,118,5,14,0,0,115,
		117,3,22,11,0,116,115,1,0,0,0,117,120,1,0,0,0,118,116,1,0,0,0,118,119,
		1,0,0,0,119,121,1,0,0,0,120,118,1,0,0,0,121,122,5,15,0,0,122,21,1,0,0,
		0,123,129,3,24,12,0,124,129,3,26,13,0,125,129,3,28,14,0,126,129,3,16,8,
		0,127,129,3,30,15,0,128,123,1,0,0,0,128,124,1,0,0,0,128,125,1,0,0,0,128,
		126,1,0,0,0,128,127,1,0,0,0,129,23,1,0,0,0,130,131,5,16,0,0,131,132,5,
		3,0,0,132,133,3,30,15,0,133,134,5,4,0,0,134,135,3,20,10,0,135,145,1,0,
		0,0,136,137,5,16,0,0,137,138,5,3,0,0,138,139,3,30,15,0,139,140,5,4,0,0,
		140,141,3,20,10,0,141,142,5,17,0,0,142,143,3,20,10,0,143,145,1,0,0,0,144,
		130,1,0,0,0,144,136,1,0,0,0,145,25,1,0,0,0,146,147,5,18,0,0,147,148,5,
		3,0,0,148,149,3,30,15,0,149,150,5,4,0,0,150,151,3,20,10,0,151,163,1,0,
		0,0,152,153,5,19,0,0,153,154,5,3,0,0,154,155,3,30,15,0,155,156,5,12,0,
		0,156,157,3,30,15,0,157,158,5,12,0,0,158,159,3,30,15,0,159,160,5,4,0,0,
		160,161,3,20,10,0,161,163,1,0,0,0,162,146,1,0,0,0,162,152,1,0,0,0,163,
		27,1,0,0,0,164,165,5,20,0,0,165,173,5,12,0,0,166,167,5,21,0,0,167,173,
		5,12,0,0,168,169,5,22,0,0,169,170,3,30,15,0,170,171,5,12,0,0,171,173,1,
		0,0,0,172,164,1,0,0,0,172,166,1,0,0,0,172,168,1,0,0,0,173,29,1,0,0,0,174,
		175,3,32,16,0,175,31,1,0,0,0,176,183,3,34,17,0,177,183,3,54,27,0,178,179,
		3,50,25,0,179,180,3,58,29,0,180,181,3,32,16,0,181,183,1,0,0,0,182,176,
		1,0,0,0,182,177,1,0,0,0,182,178,1,0,0,0,183,33,1,0,0,0,184,192,3,36,18,
		0,185,186,3,36,18,0,186,187,5,23,0,0,187,188,3,30,15,0,188,189,5,24,0,
		0,189,190,3,30,15,0,190,192,1,0,0,0,191,184,1,0,0,0,191,185,1,0,0,0,192,
		35,1,0,0,0,193,194,6,18,-1,0,194,195,3,38,19,0,195,201,1,0,0,0,196,197,
		10,1,0,0,197,198,5,25,0,0,198,200,3,38,19,0,199,196,1,0,0,0,200,203,1,
		0,0,0,201,199,1,0,0,0,201,202,1,0,0,0,202,37,1,0,0,0,203,201,1,0,0,0,204,
		205,6,19,-1,0,205,206,3,40,20,0,206,212,1,0,0,0,207,208,10,1,0,0,208,209,
		5,26,0,0,209,211,3,40,20,0,210,207,1,0,0,0,211,214,1,0,0,0,212,210,1,0,
		0,0,212,213,1,0,0,0,213,39,1,0,0,0,214,212,1,0,0,0,215,216,6,20,-1,0,216,
		217,3,42,21,0,217,226,1,0,0,0,218,219,10,2,0,0,219,220,5,27,0,0,220,225,
		3,42,21,0,221,222,10,1,0,0,222,223,5,28,0,0,223,225,3,42,21,0,224,218,
		1,0,0,0,224,221,1,0,0,0,225,228,1,0,0,0,226,224,1,0,0,0,226,227,1,0,0,
		0,227,41,1,0,0,0,228,226,1,0,0,0,229,230,6,21,-1,0,230,231,3,44,22,0,231,
		246,1,0,0,0,232,233,10,4,0,0,233,234,5,29,0,0,234,245,3,44,22,0,235,236,
		10,3,0,0,236,237,5,30,0,0,237,245,3,44,22,0,238,239,10,2,0,0,239,240,5,
		31,0,0,240,245,3,44,22,0,241,242,10,1,0,0,242,243,5,32,0,0,243,245,3,44,
		22,0,244,232,1,0,0,0,244,235,1,0,0,0,244,238,1,0,0,0,244,241,1,0,0,0,245,
		248,1,0,0,0,246,244,1,0,0,0,246,247,1,0,0,0,247,43,1,0,0,0,248,246,1,0,
		0,0,249,250,6,22,-1,0,250,251,3,46,23,0,251,260,1,0,0,0,252,253,10,2,0,
		0,253,254,5,33,0,0,254,259,3,46,23,0,255,256,10,1,0,0,256,257,5,34,0,0,
		257,259,3,46,23,0,258,252,1,0,0,0,258,255,1,0,0,0,259,262,1,0,0,0,260,
		258,1,0,0,0,260,261,1,0,0,0,261,45,1,0,0,0,262,260,1,0,0,0,263,264,6,23,
		-1,0,264,265,3,48,24,0,265,274,1,0,0,0,266,267,10,2,0,0,267,268,5,35,0,
		0,268,273,3,48,24,0,269,270,10,1,0,0,270,271,5,36,0,0,271,273,3,48,24,
		0,272,266,1,0,0,0,272,269,1,0,0,0,273,276,1,0,0,0,274,272,1,0,0,0,274,
		275,1,0,0,0,275,47,1,0,0,0,276,274,1,0,0,0,277,278,6,24,-1,0,278,279,3,
		50,25,0,279,291,1,0,0,0,280,281,10,3,0,0,281,282,5,37,0,0,282,290,3,50,
		25,0,283,284,10,2,0,0,284,285,5,38,0,0,285,290,3,50,25,0,286,287,10,1,
		0,0,287,288,5,39,0,0,288,290,3,50,25,0,289,280,1,0,0,0,289,283,1,0,0,0,
		289,286,1,0,0,0,290,293,1,0,0,0,291,289,1,0,0,0,291,292,1,0,0,0,292,49,
		1,0,0,0,293,291,1,0,0,0,294,295,6,25,-1,0,295,301,3,52,26,0,296,297,5,
		40,0,0,297,301,3,50,25,2,298,299,5,41,0,0,299,301,3,50,25,1,300,294,1,
		0,0,0,300,296,1,0,0,0,300,298,1,0,0,0,301,308,1,0,0,0,302,303,10,4,0,0,
		303,307,5,40,0,0,304,305,10,3,0,0,305,307,5,41,0,0,306,302,1,0,0,0,306,
		304,1,0,0,0,307,310,1,0,0,0,308,306,1,0,0,0,308,309,1,0,0,0,309,51,1,0,
		0,0,310,308,1,0,0,0,311,312,7,1,0,0,312,53,1,0,0,0,313,314,5,42,0,0,314,
		315,3,56,28,0,315,316,5,43,0,0,316,317,3,60,30,0,317,55,1,0,0,0,318,319,
		5,51,0,0,319,57,1,0,0,0,320,321,7,2,0,0,321,59,1,0,0,0,322,323,7,3,0,0,
		323,61,1,0,0,0,26,67,72,97,112,118,128,144,162,172,182,191,201,212,224,
		226,244,246,258,260,272,274,289,291,300,306,308
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from /Users/emilpriv/Desktop/Git-Clones/P4/P4.TinyCell/Languages/TinyCell/TinyCell.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class TinyCellParser : Parser
{
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		VOLHIGH = 1, VOLLOW = 2, PIN = 3, INT = 4, FLOAT = 5, STRING = 6, BOOL = 7, VOID = 8,
		CHAR = 9, UPDATE = 10, SETUP = 11, SET = 12, TO = 13, IF = 14, ELSE = 15, WHILE = 16,
		FOR = 17, CONTINUE = 18, BREAK = 19, RETURN = 20, QUESTION = 21, LPAR = 22, RPAR = 23,
		LCURLY = 24, RCURLY = 25, LBRACKET = 26, RBRACKET = 27, SEMI = 28, DOT = 29, COMMA = 30,
		COLON = 31, NEWLINE = 32, ASSIGN = 33, PLUSASSIGN = 34, MULTASSIGN = 35, DIVASSIGN = 36,
		MODASSIGN = 37, MINUSASSIGN = 38, QUOTE = 39, MULT = 40, DIV = 41, PLUS = 42, MINUS = 43,
		MOD = 44, AND = 45, OR = 46, EQ = 47, NEQ = 48, GT = 49, LT = 50, GTE = 51, LTE = 52, NOT = 53,
		BITSHIFTL = 54, BITSHIFTR = 55, UNARYPLUS = 56, UNARYMINUS = 57, Identifier = 58,
		String = 59, Numeral = 60, Whitespace = 61, Newline = 62;
	public const int
		RULE_document = 0, RULE_generalDeclaration = 1, RULE_setupDefinition = 2,
		RULE_updateDefinition = 3, RULE_functionDefinition = 4, RULE_type = 5,
		RULE_parameterList = 6, RULE_parameter = 7, RULE_declaration = 8, RULE_initialDeclaration = 9,
		RULE_compoundStatement = 10, RULE_statement = 11, RULE_ifStatement = 12,
		RULE_loopStatement = 13, RULE_jumpStatement = 14, RULE_expression = 15,
		RULE_assignmentExpression = 16, RULE_functionCall = 17, RULE_assignment = 18,
		RULE_ternaryExpression = 19, RULE_orExpression = 20, RULE_andExpression = 21,
		RULE_equalityExpression = 22, RULE_comparisonExpression = 23, RULE_bitshiftExpression = 24,
		RULE_additiveExpression = 25, RULE_multiplicativeExpression = 26, RULE_unaryExpression = 27,
		RULE_primitiveExpression = 28, RULE_pinExpression = 29, RULE_identifier = 30,
		RULE_assignmentOperator = 31, RULE_pinVoltage = 32;
	public static readonly string[] ruleNames = {
		"document", "generalDeclaration", "setupDefinition", "updateDefinition",
		"functionDefinition", "type", "parameterList", "parameter", "declaration",
		"initialDeclaration", "compoundStatement", "statement", "ifStatement",
		"loopStatement", "jumpStatement", "expression", "assignmentExpression",
		"functionCall", "assignment", "ternaryExpression", "orExpression", "andExpression",
		"equalityExpression", "comparisonExpression", "bitshiftExpression", "additiveExpression",
		"multiplicativeExpression", "unaryExpression", "primitiveExpression",
		"pinExpression", "identifier", "assignmentOperator", "pinVoltage"
	};

	private static readonly string[] _LiteralNames = {
		null, "'high'", "'low'", "'pin'", "'int'", "'float'", "'string'", "'bool'",
		"'void'", "'char'", "'update'", "'setup'", "'set'", "'to'", "'if'", "'else'",
		"'while'", "'for'", "'continue'", "'break'", "'return'", "'?'", "'('",
		"')'", "'{'", "'}'", "'['", "']'", "';'", "'.'", "','", "':'", "'\\n'",
		"'='", "'+='", "'*='", "'/='", "'%='", "'-='", "'\"'", "'*'", "'/'", "'+'",
		"'-'", "'%'", "'&&'", "'||'", "'=='", "'!='", "'>'", "'<'", "'>='", "'<='",
		"'!'", "'<<'", "'>>'", "'++'", "'--'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "VOLHIGH", "VOLLOW", "PIN", "INT", "FLOAT", "STRING", "BOOL", "VOID",
		"CHAR", "UPDATE", "SETUP", "SET", "TO", "IF", "ELSE", "WHILE", "FOR",
		"CONTINUE", "BREAK", "RETURN", "QUESTION", "LPAR", "RPAR", "LCURLY", "RCURLY",
		"LBRACKET", "RBRACKET", "SEMI", "DOT", "COMMA", "COLON", "NEWLINE", "ASSIGN",
		"PLUSASSIGN", "MULTASSIGN", "DIVASSIGN", "MODASSIGN", "MINUSASSIGN", "QUOTE",
		"MULT", "DIV", "PLUS", "MINUS", "MOD", "AND", "OR", "EQ", "NEQ", "GT",
		"LT", "GTE", "LTE", "NOT", "BITSHIFTL", "BITSHIFTR", "UNARYPLUS", "UNARYMINUS",
		"Identifier", "String", "Numeral", "Whitespace", "Newline"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "TinyCell.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static TinyCellParser()
	{
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++)
		{
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

	public TinyCellParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

	public TinyCellParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class DocumentContext : ParserRuleContext
	{
		[System.Diagnostics.DebuggerNonUserCode]
		public SetupDefinitionContext setupDefinition()
		{
			return GetRuleContext<SetupDefinitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public UpdateDefinitionContext updateDefinition()
		{
			return GetRuleContext<UpdateDefinitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public GeneralDeclarationContext[] generalDeclaration()
		{
			return GetRuleContexts<GeneralDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public GeneralDeclarationContext generalDeclaration(int i)
		{
			return GetRuleContext<GeneralDeclarationContext>(i);
		}
		public DocumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_document; } }
	}

	[RuleVersion(0)]
	public DocumentContext document()
	{
		DocumentContext _localctx = new DocumentContext(Context, State);
		EnterRule(_localctx, 0, RULE_document);
		int _la;
		try
		{
			EnterOuterAlt(_localctx, 1);
			{
				State = 66;
				setupDefinition();
				State = 67;
				updateDefinition();
				State = 71;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 952L) != 0))
				{
					{
						{
							State = 68;
							generalDeclaration();
						}
					}
					State = 73;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
			}
		}
		catch (RecognitionException re)
		{
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally
		{
			ExitRule();
		}
		return _localctx;
	}

	public partial class GeneralDeclarationContext : ParserRuleContext
	{
		[System.Diagnostics.DebuggerNonUserCode]
		public FunctionDefinitionContext functionDefinition()
		{
			return GetRuleContext<FunctionDefinitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public DeclarationContext declaration()
		{
			return GetRuleContext<DeclarationContext>(0);
		}
		public GeneralDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_generalDeclaration; } }
	}

	[RuleVersion(0)]
	public GeneralDeclarationContext generalDeclaration()
	{
		GeneralDeclarationContext _localctx = new GeneralDeclarationContext(Context, State);
		EnterRule(_localctx, 2, RULE_generalDeclaration);
		try
		{
			State = 76;
			ErrorHandler.Sync(this);
			switch (Interpreter.AdaptivePredict(TokenStream, 1, Context))
			{
				case 1:
					EnterOuterAlt(_localctx, 1);
					{
						State = 74;
						functionDefinition();
					}
					break;
				case 2:
					EnterOuterAlt(_localctx, 2);
					{
						State = 75;
						declaration();
					}
					break;
			}
		}
		catch (RecognitionException re)
		{
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally
		{
			ExitRule();
		}
		return _localctx;
	}

	public partial class SetupDefinitionContext : ParserRuleContext
	{
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SETUP() { return GetToken(TinyCellParser.SETUP, 0); }
		[System.Diagnostics.DebuggerNonUserCode]
		public CompoundStatementContext compoundStatement()
		{
			return GetRuleContext<CompoundStatementContext>(0);
		}
		public SetupDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_setupDefinition; } }
	}

	[RuleVersion(0)]
	public SetupDefinitionContext setupDefinition()
	{
		SetupDefinitionContext _localctx = new SetupDefinitionContext(Context, State);
		EnterRule(_localctx, 4, RULE_setupDefinition);
		try
		{
			EnterOuterAlt(_localctx, 1);
			{
				State = 78;
				Match(SETUP);
				State = 79;
				compoundStatement();
			}
		}
		catch (RecognitionException re)
		{
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally
		{
			ExitRule();
		}
		return _localctx;
	}

	public partial class UpdateDefinitionContext : ParserRuleContext
	{
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UPDATE() { return GetToken(TinyCellParser.UPDATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode]
		public CompoundStatementContext compoundStatement()
		{
			return GetRuleContext<CompoundStatementContext>(0);
		}
		public UpdateDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_updateDefinition; } }
	}

	[RuleVersion(0)]
	public UpdateDefinitionContext updateDefinition()
	{
		UpdateDefinitionContext _localctx = new UpdateDefinitionContext(Context, State);
		EnterRule(_localctx, 6, RULE_updateDefinition);
		try
		{
			EnterOuterAlt(_localctx, 1);
			{
				State = 81;
				Match(UPDATE);
				State = 82;
				compoundStatement();
			}
		}
		catch (RecognitionException re)
		{
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally
		{
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionDefinitionContext : ParserRuleContext
	{
		[System.Diagnostics.DebuggerNonUserCode]
		public TypeContext type()
		{
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public IdentifierContext identifier()
		{
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAR() { return GetToken(TinyCellParser.LPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAR() { return GetToken(TinyCellParser.RPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode]
		public CompoundStatementContext compoundStatement()
		{
			return GetRuleContext<CompoundStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public ParameterListContext[] parameterList()
		{
			return GetRuleContexts<ParameterListContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public ParameterListContext parameterList(int i)
		{
			return GetRuleContext<ParameterListContext>(i);
		}
		public FunctionDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionDefinition; } }
	}

	[RuleVersion(0)]
	public FunctionDefinitionContext functionDefinition()
	{
		FunctionDefinitionContext _localctx = new FunctionDefinitionContext(Context, State);
		EnterRule(_localctx, 8, RULE_functionDefinition);
		int _la;
		try
		{
			EnterOuterAlt(_localctx, 1);
			{
				State = 84;
				type();
				State = 85;
				identifier();
				State = 86;
				Match(LPAR);
				State = 90;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 952L) != 0))
				{
					{
						{
							State = 87;
							parameterList(0);
						}
					}
					State = 92;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 93;
				Match(RPAR);
				State = 94;
				compoundStatement();
			}
		}
		catch (RecognitionException re)
		{
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally
		{
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext
	{
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VOID() { return GetToken(TinyCellParser.VOID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHAR() { return GetToken(TinyCellParser.CHAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(TinyCellParser.INT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT() { return GetToken(TinyCellParser.FLOAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOL() { return GetToken(TinyCellParser.BOOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PIN() { return GetToken(TinyCellParser.PIN, 0); }
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
	}

	[RuleVersion(0)]
	public TypeContext type()
	{
		TypeContext _localctx = new TypeContext(Context, State);
		EnterRule(_localctx, 10, RULE_type);
		int _la;
		try
		{
			EnterOuterAlt(_localctx, 1);
			{
				State = 96;
				_la = TokenStream.LA(1);
				if (!((((_la) & ~0x3f) == 0 && ((1L << _la) & 952L) != 0)))
				{
					ErrorHandler.RecoverInline(this);
				}
				else
				{
					ErrorHandler.ReportMatch(this);
					Consume();
				}
			}
		}
		catch (RecognitionException re)
		{
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally
		{
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterListContext : ParserRuleContext
	{
		[System.Diagnostics.DebuggerNonUserCode]
		public ParameterContext parameter()
		{
			return GetRuleContext<ParameterContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public ParameterListContext parameterList()
		{
			return GetRuleContext<ParameterListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(TinyCellParser.COMMA, 0); }
		public ParameterListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameterList; } }
	}

	[RuleVersion(0)]
	public ParameterListContext parameterList()
	{
		return parameterList(0);
	}

	private ParameterListContext parameterList(int _p)
	{
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ParameterListContext _localctx = new ParameterListContext(Context, _parentState);
		ParameterListContext _prevctx = _localctx;
		int _startState = 12;
		EnterRecursionRule(_localctx, 12, RULE_parameterList, _p);
		try
		{
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
				{
					State = 99;
					parameter();
				}
				Context.Stop = TokenStream.LT(-1);
				State = 106;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream, 3, Context);
				while (_alt != 2 && _alt != global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER)
				{
					if (_alt == 1)
					{
						if (ParseListeners != null)
							TriggerExitRuleEvent();
						_prevctx = _localctx;
						{
							{
								_localctx = new ParameterListContext(_parentctx, _parentState);
								PushNewRecursionContext(_localctx, _startState, RULE_parameterList);
								State = 101;
								if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
								State = 102;
								Match(COMMA);
								State = 103;
								parameter();
							}
						}
					}
					State = 108;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream, 3, Context);
				}
			}
		}
		catch (RecognitionException re)
		{
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally
		{
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ParameterContext : ParserRuleContext
	{
		[System.Diagnostics.DebuggerNonUserCode]
		public TypeContext type()
		{
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public IdentifierContext identifier()
		{
			return GetRuleContext<IdentifierContext>(0);
		}
		public ParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameter; } }
	}

	[RuleVersion(0)]
	public ParameterContext parameter()
	{
		ParameterContext _localctx = new ParameterContext(Context, State);
		EnterRule(_localctx, 14, RULE_parameter);
		try
		{
			EnterOuterAlt(_localctx, 1);
			{
				State = 109;
				type();
				State = 110;
				identifier();
			}
		}
		catch (RecognitionException re)
		{
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally
		{
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclarationContext : ParserRuleContext
	{
		[System.Diagnostics.DebuggerNonUserCode]
		public TypeContext type()
		{
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public InitialDeclarationContext initialDeclaration()
		{
			return GetRuleContext<InitialDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(TinyCellParser.SEMI, 0); }
		public DeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declaration; } }
	}

	[RuleVersion(0)]
	public DeclarationContext declaration()
	{
		DeclarationContext _localctx = new DeclarationContext(Context, State);
		EnterRule(_localctx, 16, RULE_declaration);
		try
		{
			EnterOuterAlt(_localctx, 1);
			{
				State = 112;
				type();
				State = 113;
				initialDeclaration();
				State = 114;
				Match(SEMI);
			}
		}
		catch (RecognitionException re)
		{
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally
		{
			ExitRule();
		}
		return _localctx;
	}

	public partial class InitialDeclarationContext : ParserRuleContext
	{
		[System.Diagnostics.DebuggerNonUserCode]
		public IdentifierContext identifier()
		{
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(TinyCellParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode]
		public ExpressionContext expression()
		{
			return GetRuleContext<ExpressionContext>(0);
		}
		public InitialDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_initialDeclaration; } }
	}

	[RuleVersion(0)]
	public InitialDeclarationContext initialDeclaration()
	{
		InitialDeclarationContext _localctx = new InitialDeclarationContext(Context, State);
		EnterRule(_localctx, 18, RULE_initialDeclaration);
		try
		{
			State = 121;
			ErrorHandler.Sync(this);
			switch (Interpreter.AdaptivePredict(TokenStream, 4, Context))
			{
				case 1:
					EnterOuterAlt(_localctx, 1);
					{
						State = 116;
						identifier();
					}
					break;
				case 2:
					EnterOuterAlt(_localctx, 2);
					{
						State = 117;
						identifier();
						State = 118;
						Match(ASSIGN);
						State = 119;
						expression();
					}
					break;
			}
		}
		catch (RecognitionException re)
		{
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally
		{
			ExitRule();
		}
		return _localctx;
	}

	public partial class CompoundStatementContext : ParserRuleContext
	{
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LCURLY() { return GetToken(TinyCellParser.LCURLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RCURLY() { return GetToken(TinyCellParser.RCURLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode]
		public StatementContext[] statement()
		{
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public StatementContext statement(int i)
		{
			return GetRuleContext<StatementContext>(i);
		}
		public CompoundStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compoundStatement; } }
	}

	[RuleVersion(0)]
	public CompoundStatementContext compoundStatement()
	{
		CompoundStatementContext _localctx = new CompoundStatementContext(Context, State);
		EnterRule(_localctx, 20, RULE_compoundStatement);
		int _la;
		try
		{
			EnterOuterAlt(_localctx, 1);
			{
				State = 123;
				Match(LCURLY);
				State = 127;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 288230376153760696L) != 0))
				{
					{
						{
							State = 124;
							statement();
						}
					}
					State = 129;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 130;
				Match(RCURLY);
			}
		}
		catch (RecognitionException re)
		{
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally
		{
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext
	{
		[System.Diagnostics.DebuggerNonUserCode]
		public IfStatementContext ifStatement()
		{
			return GetRuleContext<IfStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public LoopStatementContext loopStatement()
		{
			return GetRuleContext<LoopStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public JumpStatementContext jumpStatement()
		{
			return GetRuleContext<JumpStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public DeclarationContext declaration()
		{
			return GetRuleContext<DeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public FunctionCallContext functionCall()
		{
			return GetRuleContext<FunctionCallContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public AssignmentContext assignment()
		{
			return GetRuleContext<AssignmentContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
	}

	[RuleVersion(0)]
	public StatementContext statement()
	{
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 22, RULE_statement);
		try
		{
			State = 138;
			ErrorHandler.Sync(this);
			switch (Interpreter.AdaptivePredict(TokenStream, 6, Context))
			{
				case 1:
					EnterOuterAlt(_localctx, 1);
					{
						State = 132;
						ifStatement();
					}
					break;
				case 2:
					EnterOuterAlt(_localctx, 2);
					{
						State = 133;
						loopStatement();
					}
					break;
				case 3:
					EnterOuterAlt(_localctx, 3);
					{
						State = 134;
						jumpStatement();
					}
					break;
				case 4:
					EnterOuterAlt(_localctx, 4);
					{
						State = 135;
						declaration();
					}
					break;
				case 5:
					EnterOuterAlt(_localctx, 5);
					{
						State = 136;
						functionCall();
					}
					break;
				case 6:
					EnterOuterAlt(_localctx, 6);
					{
						State = 137;
						assignment();
					}
					break;
			}
		}
		catch (RecognitionException re)
		{
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally
		{
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfStatementContext : ParserRuleContext
	{
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(TinyCellParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAR() { return GetToken(TinyCellParser.LPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode]
		public ExpressionContext expression()
		{
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAR() { return GetToken(TinyCellParser.RPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode]
		public CompoundStatementContext[] compoundStatement()
		{
			return GetRuleContexts<CompoundStatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public CompoundStatementContext compoundStatement(int i)
		{
			return GetRuleContext<CompoundStatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(TinyCellParser.ELSE, 0); }
		public IfStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifStatement; } }
	}

	[RuleVersion(0)]
	public IfStatementContext ifStatement()
	{
		IfStatementContext _localctx = new IfStatementContext(Context, State);
		EnterRule(_localctx, 24, RULE_ifStatement);
		try
		{
			State = 154;
			ErrorHandler.Sync(this);
			switch (Interpreter.AdaptivePredict(TokenStream, 7, Context))
			{
				case 1:
					EnterOuterAlt(_localctx, 1);
					{
						State = 140;
						Match(IF);
						State = 141;
						Match(LPAR);
						State = 142;
						expression();
						State = 143;
						Match(RPAR);
						State = 144;
						compoundStatement();
					}
					break;
				case 2:
					EnterOuterAlt(_localctx, 2);
					{
						State = 146;
						Match(IF);
						State = 147;
						Match(LPAR);
						State = 148;
						expression();
						State = 149;
						Match(RPAR);
						State = 150;
						compoundStatement();
						State = 151;
						Match(ELSE);
						State = 152;
						compoundStatement();
					}
					break;
			}
		}
		catch (RecognitionException re)
		{
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally
		{
			ExitRule();
		}
		return _localctx;
	}

	public partial class LoopStatementContext : ParserRuleContext
	{
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHILE() { return GetToken(TinyCellParser.WHILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAR() { return GetToken(TinyCellParser.LPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode]
		public ExpressionContext[] expression()
		{
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public ExpressionContext expression(int i)
		{
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAR() { return GetToken(TinyCellParser.RPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode]
		public CompoundStatementContext compoundStatement()
		{
			return GetRuleContext<CompoundStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(TinyCellParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SEMI() { return GetTokens(TinyCellParser.SEMI); }
		[System.Diagnostics.DebuggerNonUserCode]
		public ITerminalNode SEMI(int i)
		{
			return GetToken(TinyCellParser.SEMI, i);
		}
		public LoopStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loopStatement; } }
	}

	[RuleVersion(0)]
	public LoopStatementContext loopStatement()
	{
		LoopStatementContext _localctx = new LoopStatementContext(Context, State);
		EnterRule(_localctx, 26, RULE_loopStatement);
		try
		{
			State = 172;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1))
			{
				case WHILE:
					EnterOuterAlt(_localctx, 1);
					{
						State = 156;
						Match(WHILE);
						State = 157;
						Match(LPAR);
						State = 158;
						expression();
						State = 159;
						Match(RPAR);
						State = 160;
						compoundStatement();
					}
					break;
				case FOR:
					EnterOuterAlt(_localctx, 2);
					{
						State = 162;
						Match(FOR);
						State = 163;
						Match(LPAR);
						State = 164;
						expression();
						State = 165;
						Match(SEMI);
						State = 166;
						expression();
						State = 167;
						Match(SEMI);
						State = 168;
						expression();
						State = 169;
						Match(RPAR);
						State = 170;
						compoundStatement();
					}
					break;
				default:
					throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re)
		{
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally
		{
			ExitRule();
		}
		return _localctx;
	}

	public partial class JumpStatementContext : ParserRuleContext
	{
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONTINUE() { return GetToken(TinyCellParser.CONTINUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(TinyCellParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BREAK() { return GetToken(TinyCellParser.BREAK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURN() { return GetToken(TinyCellParser.RETURN, 0); }
		[System.Diagnostics.DebuggerNonUserCode]
		public ExpressionContext expression()
		{
			return GetRuleContext<ExpressionContext>(0);
		}
		public JumpStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_jumpStatement; } }
	}

	[RuleVersion(0)]
	public JumpStatementContext jumpStatement()
	{
		JumpStatementContext _localctx = new JumpStatementContext(Context, State);
		EnterRule(_localctx, 28, RULE_jumpStatement);
		try
		{
			State = 182;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1))
			{
				case CONTINUE:
					EnterOuterAlt(_localctx, 1);
					{
						State = 174;
						Match(CONTINUE);
						State = 175;
						Match(SEMI);
					}
					break;
				case BREAK:
					EnterOuterAlt(_localctx, 2);
					{
						State = 176;
						Match(BREAK);
						State = 177;
						Match(SEMI);
					}
					break;
				case RETURN:
					EnterOuterAlt(_localctx, 3);
					{
						State = 178;
						Match(RETURN);
						State = 179;
						expression();
						State = 180;
						Match(SEMI);
					}
					break;
				default:
					throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re)
		{
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally
		{
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext
	{
		[System.Diagnostics.DebuggerNonUserCode]
		public PinExpressionContext pinExpression()
		{
			return GetRuleContext<PinExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(TinyCellParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode]
		public TernaryExpressionContext ternaryExpression()
		{
			return GetRuleContext<TernaryExpressionContext>(0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	}

	[RuleVersion(0)]
	public ExpressionContext expression()
	{
		ExpressionContext _localctx = new ExpressionContext(Context, State);
		EnterRule(_localctx, 30, RULE_expression);
		try
		{
			State = 190;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1))
			{
				case SET:
					EnterOuterAlt(_localctx, 1);
					{
						State = 184;
						pinExpression();
						State = 185;
						Match(SEMI);
					}
					break;
				case UNARYPLUS:
				case UNARYMINUS:
				case String:
				case Numeral:
					EnterOuterAlt(_localctx, 2);
					{
						State = 187;
						ternaryExpression();
						State = 188;
						Match(SEMI);
					}
					break;
				default:
					throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re)
		{
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally
		{
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentExpressionContext : ParserRuleContext
	{
		[System.Diagnostics.DebuggerNonUserCode]
		public TernaryExpressionContext ternaryExpression()
		{
			return GetRuleContext<TernaryExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public AssignmentOperatorContext assignmentOperator()
		{
			return GetRuleContext<AssignmentOperatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public AssignmentExpressionContext assignmentExpression()
		{
			return GetRuleContext<AssignmentExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public UnaryExpressionContext unaryExpression()
		{
			return GetRuleContext<UnaryExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public IdentifierContext identifier()
		{
			return GetRuleContext<IdentifierContext>(0);
		}
		public AssignmentExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignmentExpression; } }
	}

	[RuleVersion(0)]
	public AssignmentExpressionContext assignmentExpression()
	{
		AssignmentExpressionContext _localctx = new AssignmentExpressionContext(Context, State);
		EnterRule(_localctx, 32, RULE_assignmentExpression);
		try
		{
			State = 200;
			ErrorHandler.Sync(this);
			switch (Interpreter.AdaptivePredict(TokenStream, 12, Context))
			{
				case 1:
					EnterOuterAlt(_localctx, 1);
					{
						State = 192;
						ternaryExpression();
					}
					break;
				case 2:
					EnterOuterAlt(_localctx, 2);
					{
						State = 195;
						ErrorHandler.Sync(this);
						switch (TokenStream.LA(1))
						{
							case UNARYPLUS:
							case UNARYMINUS:
							case String:
							case Numeral:
								{
									State = 193;
									unaryExpression();
								}
								break;
							case Identifier:
								{
									State = 194;
									identifier();
								}
								break;
							default:
								throw new NoViableAltException(this);
						}
						State = 197;
						assignmentOperator();
						State = 198;
						assignmentExpression();
					}
					break;
			}
		}
		catch (RecognitionException re)
		{
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally
		{
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionCallContext : ParserRuleContext
	{
		[System.Diagnostics.DebuggerNonUserCode]
		public IdentifierContext identifier()
		{
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAR() { return GetToken(TinyCellParser.LPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAR() { return GetToken(TinyCellParser.RPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(TinyCellParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode]
		public ParameterListContext[] parameterList()
		{
			return GetRuleContexts<ParameterListContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public ParameterListContext parameterList(int i)
		{
			return GetRuleContext<ParameterListContext>(i);
		}
		public FunctionCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionCall; } }
	}

	[RuleVersion(0)]
	public FunctionCallContext functionCall()
	{
		FunctionCallContext _localctx = new FunctionCallContext(Context, State);
		EnterRule(_localctx, 34, RULE_functionCall);
		int _la;
		try
		{
			EnterOuterAlt(_localctx, 1);
			{
				State = 202;
				identifier();
				State = 203;
				Match(LPAR);
				State = 207;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 952L) != 0))
				{
					{
						{
							State = 204;
							parameterList(0);
						}
					}
					State = 209;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 210;
				Match(RPAR);
				State = 211;
				Match(SEMI);
			}
		}
		catch (RecognitionException re)
		{
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally
		{
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentContext : ParserRuleContext
	{
		[System.Diagnostics.DebuggerNonUserCode]
		public IdentifierContext identifier()
		{
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public AssignmentOperatorContext assignmentOperator()
		{
			return GetRuleContext<AssignmentOperatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public ExpressionContext expression()
		{
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(TinyCellParser.SEMI, 0); }
		public AssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignment; } }
	}

	[RuleVersion(0)]
	public AssignmentContext assignment()
	{
		AssignmentContext _localctx = new AssignmentContext(Context, State);
		EnterRule(_localctx, 36, RULE_assignment);
		try
		{
			EnterOuterAlt(_localctx, 1);
			{
				State = 213;
				identifier();
				State = 214;
				assignmentOperator();
				State = 215;
				expression();
				State = 216;
				Match(SEMI);
			}
		}
		catch (RecognitionException re)
		{
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally
		{
			ExitRule();
		}
		return _localctx;
	}

	public partial class TernaryExpressionContext : ParserRuleContext
	{
		[System.Diagnostics.DebuggerNonUserCode]
		public OrExpressionContext orExpression()
		{
			return GetRuleContext<OrExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUESTION() { return GetToken(TinyCellParser.QUESTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode]
		public ExpressionContext[] expression()
		{
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public ExpressionContext expression(int i)
		{
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(TinyCellParser.COLON, 0); }
		public TernaryExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ternaryExpression; } }
	}

	[RuleVersion(0)]
	public TernaryExpressionContext ternaryExpression()
	{
		TernaryExpressionContext _localctx = new TernaryExpressionContext(Context, State);
		EnterRule(_localctx, 38, RULE_ternaryExpression);
		try
		{
			State = 225;
			ErrorHandler.Sync(this);
			switch (Interpreter.AdaptivePredict(TokenStream, 14, Context))
			{
				case 1:
					EnterOuterAlt(_localctx, 1);
					{
						State = 218;
						orExpression(0);
					}
					break;
				case 2:
					EnterOuterAlt(_localctx, 2);
					{
						State = 219;
						orExpression(0);
						State = 220;
						Match(QUESTION);
						State = 221;
						expression();
						State = 222;
						Match(COLON);
						State = 223;
						expression();
					}
					break;
			}
		}
		catch (RecognitionException re)
		{
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally
		{
			ExitRule();
		}
		return _localctx;
	}

	public partial class OrExpressionContext : ParserRuleContext
	{
		[System.Diagnostics.DebuggerNonUserCode]
		public AndExpressionContext andExpression()
		{
			return GetRuleContext<AndExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public OrExpressionContext orExpression()
		{
			return GetRuleContext<OrExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR() { return GetToken(TinyCellParser.OR, 0); }
		public OrExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_orExpression; } }
	}

	[RuleVersion(0)]
	public OrExpressionContext orExpression()
	{
		return orExpression(0);
	}

	private OrExpressionContext orExpression(int _p)
	{
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		OrExpressionContext _localctx = new OrExpressionContext(Context, _parentState);
		OrExpressionContext _prevctx = _localctx;
		int _startState = 40;
		EnterRecursionRule(_localctx, 40, RULE_orExpression, _p);
		try
		{
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
				{
					State = 228;
					andExpression(0);
				}
				Context.Stop = TokenStream.LT(-1);
				State = 235;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream, 15, Context);
				while (_alt != 2 && _alt != global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER)
				{
					if (_alt == 1)
					{
						if (ParseListeners != null)
							TriggerExitRuleEvent();
						_prevctx = _localctx;
						{
							{
								_localctx = new OrExpressionContext(_parentctx, _parentState);
								PushNewRecursionContext(_localctx, _startState, RULE_orExpression);
								State = 230;
								if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
								State = 231;
								Match(OR);
								State = 232;
								andExpression(0);
							}
						}
					}
					State = 237;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream, 15, Context);
				}
			}
		}
		catch (RecognitionException re)
		{
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally
		{
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class AndExpressionContext : ParserRuleContext
	{
		[System.Diagnostics.DebuggerNonUserCode]
		public EqualityExpressionContext equalityExpression()
		{
			return GetRuleContext<EqualityExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public AndExpressionContext andExpression()
		{
			return GetRuleContext<AndExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND() { return GetToken(TinyCellParser.AND, 0); }
		public AndExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_andExpression; } }
	}

	[RuleVersion(0)]
	public AndExpressionContext andExpression()
	{
		return andExpression(0);
	}

	private AndExpressionContext andExpression(int _p)
	{
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		AndExpressionContext _localctx = new AndExpressionContext(Context, _parentState);
		AndExpressionContext _prevctx = _localctx;
		int _startState = 42;
		EnterRecursionRule(_localctx, 42, RULE_andExpression, _p);
		try
		{
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
				{
					State = 239;
					equalityExpression(0);
				}
				Context.Stop = TokenStream.LT(-1);
				State = 246;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream, 16, Context);
				while (_alt != 2 && _alt != global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER)
				{
					if (_alt == 1)
					{
						if (ParseListeners != null)
							TriggerExitRuleEvent();
						_prevctx = _localctx;
						{
							{
								_localctx = new AndExpressionContext(_parentctx, _parentState);
								PushNewRecursionContext(_localctx, _startState, RULE_andExpression);
								State = 241;
								if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
								State = 242;
								Match(AND);
								State = 243;
								equalityExpression(0);
							}
						}
					}
					State = 248;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream, 16, Context);
				}
			}
		}
		catch (RecognitionException re)
		{
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally
		{
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class EqualityExpressionContext : ParserRuleContext
	{
		[System.Diagnostics.DebuggerNonUserCode]
		public ComparisonExpressionContext comparisonExpression()
		{
			return GetRuleContext<ComparisonExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public EqualityExpressionContext equalityExpression()
		{
			return GetRuleContext<EqualityExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQ() { return GetToken(TinyCellParser.EQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEQ() { return GetToken(TinyCellParser.NEQ, 0); }
		public EqualityExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_equalityExpression; } }
	}

	[RuleVersion(0)]
	public EqualityExpressionContext equalityExpression()
	{
		return equalityExpression(0);
	}

	private EqualityExpressionContext equalityExpression(int _p)
	{
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		EqualityExpressionContext _localctx = new EqualityExpressionContext(Context, _parentState);
		EqualityExpressionContext _prevctx = _localctx;
		int _startState = 44;
		EnterRecursionRule(_localctx, 44, RULE_equalityExpression, _p);
		try
		{
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
				{
					State = 250;
					comparisonExpression(0);
				}
				Context.Stop = TokenStream.LT(-1);
				State = 260;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream, 18, Context);
				while (_alt != 2 && _alt != global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER)
				{
					if (_alt == 1)
					{
						if (ParseListeners != null)
							TriggerExitRuleEvent();
						_prevctx = _localctx;
						{
							State = 258;
							ErrorHandler.Sync(this);
							switch (Interpreter.AdaptivePredict(TokenStream, 17, Context))
							{
								case 1:
									{
										_localctx = new EqualityExpressionContext(_parentctx, _parentState);
										PushNewRecursionContext(_localctx, _startState, RULE_equalityExpression);
										State = 252;
										if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
										State = 253;
										Match(EQ);
										State = 254;
										comparisonExpression(0);
									}
									break;
								case 2:
									{
										_localctx = new EqualityExpressionContext(_parentctx, _parentState);
										PushNewRecursionContext(_localctx, _startState, RULE_equalityExpression);
										State = 255;
										if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
										State = 256;
										Match(NEQ);
										State = 257;
										comparisonExpression(0);
									}
									break;
							}
						}
					}
					State = 262;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream, 18, Context);
				}
			}
		}
		catch (RecognitionException re)
		{
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally
		{
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ComparisonExpressionContext : ParserRuleContext
	{
		[System.Diagnostics.DebuggerNonUserCode]
		public BitshiftExpressionContext bitshiftExpression()
		{
			return GetRuleContext<BitshiftExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public ComparisonExpressionContext comparisonExpression()
		{
			return GetRuleContext<ComparisonExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT() { return GetToken(TinyCellParser.LT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT() { return GetToken(TinyCellParser.GT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LTE() { return GetToken(TinyCellParser.LTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GTE() { return GetToken(TinyCellParser.GTE, 0); }
		public ComparisonExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comparisonExpression; } }
	}

	[RuleVersion(0)]
	public ComparisonExpressionContext comparisonExpression()
	{
		return comparisonExpression(0);
	}

	private ComparisonExpressionContext comparisonExpression(int _p)
	{
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ComparisonExpressionContext _localctx = new ComparisonExpressionContext(Context, _parentState);
		ComparisonExpressionContext _prevctx = _localctx;
		int _startState = 46;
		EnterRecursionRule(_localctx, 46, RULE_comparisonExpression, _p);
		try
		{
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
				{
					State = 264;
					bitshiftExpression(0);
				}
				Context.Stop = TokenStream.LT(-1);
				State = 280;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream, 20, Context);
				while (_alt != 2 && _alt != global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER)
				{
					if (_alt == 1)
					{
						if (ParseListeners != null)
							TriggerExitRuleEvent();
						_prevctx = _localctx;
						{
							State = 278;
							ErrorHandler.Sync(this);
							switch (Interpreter.AdaptivePredict(TokenStream, 19, Context))
							{
								case 1:
									{
										_localctx = new ComparisonExpressionContext(_parentctx, _parentState);
										PushNewRecursionContext(_localctx, _startState, RULE_comparisonExpression);
										State = 266;
										if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
										State = 267;
										Match(LT);
										State = 268;
										bitshiftExpression(0);
									}
									break;
								case 2:
									{
										_localctx = new ComparisonExpressionContext(_parentctx, _parentState);
										PushNewRecursionContext(_localctx, _startState, RULE_comparisonExpression);
										State = 269;
										if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
										State = 270;
										Match(GT);
										State = 271;
										bitshiftExpression(0);
									}
									break;
								case 3:
									{
										_localctx = new ComparisonExpressionContext(_parentctx, _parentState);
										PushNewRecursionContext(_localctx, _startState, RULE_comparisonExpression);
										State = 272;
										if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
										State = 273;
										Match(LTE);
										State = 274;
										bitshiftExpression(0);
									}
									break;
								case 4:
									{
										_localctx = new ComparisonExpressionContext(_parentctx, _parentState);
										PushNewRecursionContext(_localctx, _startState, RULE_comparisonExpression);
										State = 275;
										if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
										State = 276;
										Match(GTE);
										State = 277;
										bitshiftExpression(0);
									}
									break;
							}
						}
					}
					State = 282;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream, 20, Context);
				}
			}
		}
		catch (RecognitionException re)
		{
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally
		{
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class BitshiftExpressionContext : ParserRuleContext
	{
		[System.Diagnostics.DebuggerNonUserCode]
		public AdditiveExpressionContext additiveExpression()
		{
			return GetRuleContext<AdditiveExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public BitshiftExpressionContext bitshiftExpression()
		{
			return GetRuleContext<BitshiftExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BITSHIFTL() { return GetToken(TinyCellParser.BITSHIFTL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BITSHIFTR() { return GetToken(TinyCellParser.BITSHIFTR, 0); }
		public BitshiftExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bitshiftExpression; } }
	}

	[RuleVersion(0)]
	public BitshiftExpressionContext bitshiftExpression()
	{
		return bitshiftExpression(0);
	}

	private BitshiftExpressionContext bitshiftExpression(int _p)
	{
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		BitshiftExpressionContext _localctx = new BitshiftExpressionContext(Context, _parentState);
		BitshiftExpressionContext _prevctx = _localctx;
		int _startState = 48;
		EnterRecursionRule(_localctx, 48, RULE_bitshiftExpression, _p);
		try
		{
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
				{
					State = 284;
					additiveExpression(0);
				}
				Context.Stop = TokenStream.LT(-1);
				State = 294;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream, 22, Context);
				while (_alt != 2 && _alt != global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER)
				{
					if (_alt == 1)
					{
						if (ParseListeners != null)
							TriggerExitRuleEvent();
						_prevctx = _localctx;
						{
							State = 292;
							ErrorHandler.Sync(this);
							switch (Interpreter.AdaptivePredict(TokenStream, 21, Context))
							{
								case 1:
									{
										_localctx = new BitshiftExpressionContext(_parentctx, _parentState);
										PushNewRecursionContext(_localctx, _startState, RULE_bitshiftExpression);
										State = 286;
										if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
										State = 287;
										Match(BITSHIFTL);
										State = 288;
										additiveExpression(0);
									}
									break;
								case 2:
									{
										_localctx = new BitshiftExpressionContext(_parentctx, _parentState);
										PushNewRecursionContext(_localctx, _startState, RULE_bitshiftExpression);
										State = 289;
										if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
										State = 290;
										Match(BITSHIFTR);
										State = 291;
										additiveExpression(0);
									}
									break;
							}
						}
					}
					State = 296;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream, 22, Context);
				}
			}
		}
		catch (RecognitionException re)
		{
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally
		{
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class AdditiveExpressionContext : ParserRuleContext
	{
		[System.Diagnostics.DebuggerNonUserCode]
		public MultiplicativeExpressionContext multiplicativeExpression()
		{
			return GetRuleContext<MultiplicativeExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public AdditiveExpressionContext additiveExpression()
		{
			return GetRuleContext<AdditiveExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(TinyCellParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(TinyCellParser.MINUS, 0); }
		public AdditiveExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_additiveExpression; } }
	}

	[RuleVersion(0)]
	public AdditiveExpressionContext additiveExpression()
	{
		return additiveExpression(0);
	}

	private AdditiveExpressionContext additiveExpression(int _p)
	{
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		AdditiveExpressionContext _localctx = new AdditiveExpressionContext(Context, _parentState);
		AdditiveExpressionContext _prevctx = _localctx;
		int _startState = 50;
		EnterRecursionRule(_localctx, 50, RULE_additiveExpression, _p);
		try
		{
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
				{
					State = 298;
					multiplicativeExpression(0);
				}
				Context.Stop = TokenStream.LT(-1);
				State = 308;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream, 24, Context);
				while (_alt != 2 && _alt != global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER)
				{
					if (_alt == 1)
					{
						if (ParseListeners != null)
							TriggerExitRuleEvent();
						_prevctx = _localctx;
						{
							State = 306;
							ErrorHandler.Sync(this);
							switch (Interpreter.AdaptivePredict(TokenStream, 23, Context))
							{
								case 1:
									{
										_localctx = new AdditiveExpressionContext(_parentctx, _parentState);
										PushNewRecursionContext(_localctx, _startState, RULE_additiveExpression);
										State = 300;
										if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
										State = 301;
										Match(PLUS);
										State = 302;
										multiplicativeExpression(0);
									}
									break;
								case 2:
									{
										_localctx = new AdditiveExpressionContext(_parentctx, _parentState);
										PushNewRecursionContext(_localctx, _startState, RULE_additiveExpression);
										State = 303;
										if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
										State = 304;
										Match(MINUS);
										State = 305;
										multiplicativeExpression(0);
									}
									break;
							}
						}
					}
					State = 310;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream, 24, Context);
				}
			}
		}
		catch (RecognitionException re)
		{
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally
		{
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class MultiplicativeExpressionContext : ParserRuleContext
	{
		[System.Diagnostics.DebuggerNonUserCode]
		public UnaryExpressionContext unaryExpression()
		{
			return GetRuleContext<UnaryExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public MultiplicativeExpressionContext multiplicativeExpression()
		{
			return GetRuleContext<MultiplicativeExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULT() { return GetToken(TinyCellParser.MULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode]
		public PrimitiveExpressionContext primitiveExpression()
		{
			return GetRuleContext<PrimitiveExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIV() { return GetToken(TinyCellParser.DIV, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MOD() { return GetToken(TinyCellParser.MOD, 0); }
		public MultiplicativeExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multiplicativeExpression; } }
	}

	[RuleVersion(0)]
	public MultiplicativeExpressionContext multiplicativeExpression()
	{
		return multiplicativeExpression(0);
	}

	private MultiplicativeExpressionContext multiplicativeExpression(int _p)
	{
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		MultiplicativeExpressionContext _localctx = new MultiplicativeExpressionContext(Context, _parentState);
		MultiplicativeExpressionContext _prevctx = _localctx;
		int _startState = 52;
		EnterRecursionRule(_localctx, 52, RULE_multiplicativeExpression, _p);
		try
		{
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
				{
					State = 312;
					unaryExpression();
				}
				Context.Stop = TokenStream.LT(-1);
				State = 325;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream, 26, Context);
				while (_alt != 2 && _alt != global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER)
				{
					if (_alt == 1)
					{
						if (ParseListeners != null)
							TriggerExitRuleEvent();
						_prevctx = _localctx;
						{
							State = 323;
							ErrorHandler.Sync(this);
							switch (Interpreter.AdaptivePredict(TokenStream, 25, Context))
							{
								case 1:
									{
										_localctx = new MultiplicativeExpressionContext(_parentctx, _parentState);
										PushNewRecursionContext(_localctx, _startState, RULE_multiplicativeExpression);
										State = 314;
										if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
										State = 315;
										Match(MULT);
										State = 316;
										primitiveExpression();
									}
									break;
								case 2:
									{
										_localctx = new MultiplicativeExpressionContext(_parentctx, _parentState);
										PushNewRecursionContext(_localctx, _startState, RULE_multiplicativeExpression);
										State = 317;
										if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
										State = 318;
										Match(DIV);
										State = 319;
										primitiveExpression();
									}
									break;
								case 3:
									{
										_localctx = new MultiplicativeExpressionContext(_parentctx, _parentState);
										PushNewRecursionContext(_localctx, _startState, RULE_multiplicativeExpression);
										State = 320;
										if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
										State = 321;
										Match(MOD);
										State = 322;
										primitiveExpression();
									}
									break;
							}
						}
					}
					State = 327;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream, 26, Context);
				}
			}
		}
		catch (RecognitionException re)
		{
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally
		{
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class UnaryExpressionContext : ParserRuleContext
	{
		[System.Diagnostics.DebuggerNonUserCode]
		public PrimitiveExpressionContext primitiveExpression()
		{
			return GetRuleContext<PrimitiveExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNARYPLUS() { return GetToken(TinyCellParser.UNARYPLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNARYMINUS() { return GetToken(TinyCellParser.UNARYMINUS, 0); }
		public UnaryExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unaryExpression; } }
	}

	[RuleVersion(0)]
	public UnaryExpressionContext unaryExpression()
	{
		UnaryExpressionContext _localctx = new UnaryExpressionContext(Context, State);
		EnterRule(_localctx, 54, RULE_unaryExpression);
		try
		{
			State = 339;
			ErrorHandler.Sync(this);
			switch (Interpreter.AdaptivePredict(TokenStream, 27, Context))
			{
				case 1:
					EnterOuterAlt(_localctx, 1);
					{
						State = 328;
						primitiveExpression();
					}
					break;
				case 2:
					EnterOuterAlt(_localctx, 2);
					{
						State = 329;
						primitiveExpression();
						State = 330;
						Match(UNARYPLUS);
					}
					break;
				case 3:
					EnterOuterAlt(_localctx, 3);
					{
						State = 332;
						primitiveExpression();
						State = 333;
						Match(UNARYMINUS);
					}
					break;
				case 4:
					EnterOuterAlt(_localctx, 4);
					{
						State = 335;
						Match(UNARYPLUS);
						State = 336;
						primitiveExpression();
					}
					break;
				case 5:
					EnterOuterAlt(_localctx, 5);
					{
						State = 337;
						Match(UNARYMINUS);
						State = 338;
						primitiveExpression();
					}
					break;
			}
		}
		catch (RecognitionException re)
		{
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally
		{
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrimitiveExpressionContext : ParserRuleContext
	{
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Numeral() { return GetToken(TinyCellParser.Numeral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode String() { return GetToken(TinyCellParser.String, 0); }
		public PrimitiveExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primitiveExpression; } }
	}

	[RuleVersion(0)]
	public PrimitiveExpressionContext primitiveExpression()
	{
		PrimitiveExpressionContext _localctx = new PrimitiveExpressionContext(Context, State);
		EnterRule(_localctx, 56, RULE_primitiveExpression);
		int _la;
		try
		{
			EnterOuterAlt(_localctx, 1);
			{
				State = 341;
				_la = TokenStream.LA(1);
				if (!(_la == String || _la == Numeral))
				{
					ErrorHandler.RecoverInline(this);
				}
				else
				{
					ErrorHandler.ReportMatch(this);
					Consume();
				}
			}
		}
		catch (RecognitionException re)
		{
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally
		{
			ExitRule();
		}
		return _localctx;
	}

	public partial class PinExpressionContext : ParserRuleContext
	{
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(TinyCellParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode]
		public IdentifierContext identifier()
		{
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(TinyCellParser.TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode]
		public PinVoltageContext pinVoltage()
		{
			return GetRuleContext<PinVoltageContext>(0);
		}
		public PinExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pinExpression; } }
	}

	[RuleVersion(0)]
	public PinExpressionContext pinExpression()
	{
		PinExpressionContext _localctx = new PinExpressionContext(Context, State);
		EnterRule(_localctx, 58, RULE_pinExpression);
		try
		{
			EnterOuterAlt(_localctx, 1);
			{
				State = 343;
				Match(SET);
				State = 344;
				identifier();
				State = 345;
				Match(TO);
				State = 346;
				pinVoltage();
			}
		}
		catch (RecognitionException re)
		{
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally
		{
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierContext : ParserRuleContext
	{
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(TinyCellParser.Identifier, 0); }
		public IdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier; } }
	}

	[RuleVersion(0)]
	public IdentifierContext identifier()
	{
		IdentifierContext _localctx = new IdentifierContext(Context, State);
		EnterRule(_localctx, 60, RULE_identifier);
		try
		{
			EnterOuterAlt(_localctx, 1);
			{
				State = 348;
				Match(Identifier);
			}
		}
		catch (RecognitionException re)
		{
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally
		{
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentOperatorContext : ParserRuleContext
	{
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(TinyCellParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULTASSIGN() { return GetToken(TinyCellParser.MULTASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIVASSIGN() { return GetToken(TinyCellParser.DIVASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MODASSIGN() { return GetToken(TinyCellParser.MODASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUSASSIGN() { return GetToken(TinyCellParser.PLUSASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUSASSIGN() { return GetToken(TinyCellParser.MINUSASSIGN, 0); }
		public AssignmentOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignmentOperator; } }
	}

	[RuleVersion(0)]
	public AssignmentOperatorContext assignmentOperator()
	{
		AssignmentOperatorContext _localctx = new AssignmentOperatorContext(Context, State);
		EnterRule(_localctx, 62, RULE_assignmentOperator);
		int _la;
		try
		{
			EnterOuterAlt(_localctx, 1);
			{
				State = 350;
				_la = TokenStream.LA(1);
				if (!((((_la) & ~0x3f) == 0 && ((1L << _la) & 541165879296L) != 0)))
				{
					ErrorHandler.RecoverInline(this);
				}
				else
				{
					ErrorHandler.ReportMatch(this);
					Consume();
				}
			}
		}
		catch (RecognitionException re)
		{
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally
		{
			ExitRule();
		}
		return _localctx;
	}

	public partial class PinVoltageContext : ParserRuleContext
	{
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VOLHIGH() { return GetToken(TinyCellParser.VOLHIGH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VOLLOW() { return GetToken(TinyCellParser.VOLLOW, 0); }
		public PinVoltageContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pinVoltage; } }
	}

	[RuleVersion(0)]
	public PinVoltageContext pinVoltage()
	{
		PinVoltageContext _localctx = new PinVoltageContext(Context, State);
		EnterRule(_localctx, 64, RULE_pinVoltage);
		int _la;
		try
		{
			EnterOuterAlt(_localctx, 1);
			{
				State = 352;
				_la = TokenStream.LA(1);
				if (!(_la == VOLHIGH || _la == VOLLOW))
				{
					ErrorHandler.RecoverInline(this);
				}
				else
				{
					ErrorHandler.ReportMatch(this);
					Consume();
				}
			}
		}
		catch (RecognitionException re)
		{
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally
		{
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex)
	{
		switch (ruleIndex)
		{
			case 6: return parameterList_sempred((ParameterListContext)_localctx, predIndex);
			case 20: return orExpression_sempred((OrExpressionContext)_localctx, predIndex);
			case 21: return andExpression_sempred((AndExpressionContext)_localctx, predIndex);
			case 22: return equalityExpression_sempred((EqualityExpressionContext)_localctx, predIndex);
			case 23: return comparisonExpression_sempred((ComparisonExpressionContext)_localctx, predIndex);
			case 24: return bitshiftExpression_sempred((BitshiftExpressionContext)_localctx, predIndex);
			case 25: return additiveExpression_sempred((AdditiveExpressionContext)_localctx, predIndex);
			case 26: return multiplicativeExpression_sempred((MultiplicativeExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool parameterList_sempred(ParameterListContext _localctx, int predIndex)
	{
		switch (predIndex)
		{
			case 0: return Precpred(Context, 1);
		}
		return true;
	}
	private bool orExpression_sempred(OrExpressionContext _localctx, int predIndex)
	{
		switch (predIndex)
		{
			case 1: return Precpred(Context, 1);
		}
		return true;
	}
	private bool andExpression_sempred(AndExpressionContext _localctx, int predIndex)
	{
		switch (predIndex)
		{
			case 2: return Precpred(Context, 1);
		}
		return true;
	}
	private bool equalityExpression_sempred(EqualityExpressionContext _localctx, int predIndex)
	{
		switch (predIndex)
		{
			case 3: return Precpred(Context, 2);
			case 4: return Precpred(Context, 1);
		}
		return true;
	}
	private bool comparisonExpression_sempred(ComparisonExpressionContext _localctx, int predIndex)
	{
		switch (predIndex)
		{
			case 5: return Precpred(Context, 4);
			case 6: return Precpred(Context, 3);
			case 7: return Precpred(Context, 2);
			case 8: return Precpred(Context, 1);
		}
		return true;
	}
	private bool bitshiftExpression_sempred(BitshiftExpressionContext _localctx, int predIndex)
	{
		switch (predIndex)
		{
			case 9: return Precpred(Context, 2);
			case 10: return Precpred(Context, 1);
		}
		return true;
	}
	private bool additiveExpression_sempred(AdditiveExpressionContext _localctx, int predIndex)
	{
		switch (predIndex)
		{
			case 11: return Precpred(Context, 2);
			case 12: return Precpred(Context, 1);
		}
		return true;
	}
	private bool multiplicativeExpression_sempred(MultiplicativeExpressionContext _localctx, int predIndex)
	{
		switch (predIndex)
		{
			case 13: return Precpred(Context, 3);
			case 14: return Precpred(Context, 2);
			case 15: return Precpred(Context, 1);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,62,355,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,1,0,1,0,1,0,5,0,70,8,0,10,0,12,
		0,73,9,0,1,1,1,1,3,1,77,8,1,1,2,1,2,1,2,1,3,1,3,1,3,1,4,1,4,1,4,1,4,5,
		4,89,8,4,10,4,12,4,92,9,4,1,4,1,4,1,4,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,6,
		5,6,105,8,6,10,6,12,6,108,9,6,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,9,1,9,1,9,
		1,9,1,9,3,9,122,8,9,1,10,1,10,5,10,126,8,10,10,10,12,10,129,9,10,1,10,
		1,10,1,11,1,11,1,11,1,11,1,11,1,11,3,11,139,8,11,1,12,1,12,1,12,1,12,1,
		12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,3,12,155,8,12,1,13,1,13,
		1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,
		3,13,173,8,13,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,3,14,183,8,14,1,
		15,1,15,1,15,1,15,1,15,1,15,3,15,191,8,15,1,16,1,16,1,16,3,16,196,8,16,
		1,16,1,16,1,16,3,16,201,8,16,1,17,1,17,1,17,5,17,206,8,17,10,17,12,17,
		209,9,17,1,17,1,17,1,17,1,18,1,18,1,18,1,18,1,18,1,19,1,19,1,19,1,19,1,
		19,1,19,1,19,3,19,226,8,19,1,20,1,20,1,20,1,20,1,20,1,20,5,20,234,8,20,
		10,20,12,20,237,9,20,1,21,1,21,1,21,1,21,1,21,1,21,5,21,245,8,21,10,21,
		12,21,248,9,21,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,5,22,259,8,
		22,10,22,12,22,262,9,22,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,
		23,1,23,1,23,1,23,1,23,1,23,5,23,279,8,23,10,23,12,23,282,9,23,1,24,1,
		24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,5,24,293,8,24,10,24,12,24,296,9,
		24,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,5,25,307,8,25,10,25,12,
		25,310,9,25,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,
		5,26,324,8,26,10,26,12,26,327,9,26,1,27,1,27,1,27,1,27,1,27,1,27,1,27,
		1,27,1,27,1,27,1,27,3,27,340,8,27,1,28,1,28,1,29,1,29,1,29,1,29,1,29,1,
		30,1,30,1,31,1,31,1,32,1,32,1,32,0,8,12,40,42,44,46,48,50,52,33,0,2,4,
		6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,
		54,56,58,60,62,64,0,4,2,0,3,5,7,9,1,0,59,60,1,0,33,38,1,0,1,2,360,0,66,
		1,0,0,0,2,76,1,0,0,0,4,78,1,0,0,0,6,81,1,0,0,0,8,84,1,0,0,0,10,96,1,0,
		0,0,12,98,1,0,0,0,14,109,1,0,0,0,16,112,1,0,0,0,18,121,1,0,0,0,20,123,
		1,0,0,0,22,138,1,0,0,0,24,154,1,0,0,0,26,172,1,0,0,0,28,182,1,0,0,0,30,
		190,1,0,0,0,32,200,1,0,0,0,34,202,1,0,0,0,36,213,1,0,0,0,38,225,1,0,0,
		0,40,227,1,0,0,0,42,238,1,0,0,0,44,249,1,0,0,0,46,263,1,0,0,0,48,283,1,
		0,0,0,50,297,1,0,0,0,52,311,1,0,0,0,54,339,1,0,0,0,56,341,1,0,0,0,58,343,
		1,0,0,0,60,348,1,0,0,0,62,350,1,0,0,0,64,352,1,0,0,0,66,67,3,4,2,0,67,
		71,3,6,3,0,68,70,3,2,1,0,69,68,1,0,0,0,70,73,1,0,0,0,71,69,1,0,0,0,71,
		72,1,0,0,0,72,1,1,0,0,0,73,71,1,0,0,0,74,77,3,8,4,0,75,77,3,16,8,0,76,
		74,1,0,0,0,76,75,1,0,0,0,77,3,1,0,0,0,78,79,5,11,0,0,79,80,3,20,10,0,80,
		5,1,0,0,0,81,82,5,10,0,0,82,83,3,20,10,0,83,7,1,0,0,0,84,85,3,10,5,0,85,
		86,3,60,30,0,86,90,5,22,0,0,87,89,3,12,6,0,88,87,1,0,0,0,89,92,1,0,0,0,
		90,88,1,0,0,0,90,91,1,0,0,0,91,93,1,0,0,0,92,90,1,0,0,0,93,94,5,23,0,0,
		94,95,3,20,10,0,95,9,1,0,0,0,96,97,7,0,0,0,97,11,1,0,0,0,98,99,6,6,-1,
		0,99,100,3,14,7,0,100,106,1,0,0,0,101,102,10,1,0,0,102,103,5,30,0,0,103,
		105,3,14,7,0,104,101,1,0,0,0,105,108,1,0,0,0,106,104,1,0,0,0,106,107,1,
		0,0,0,107,13,1,0,0,0,108,106,1,0,0,0,109,110,3,10,5,0,110,111,3,60,30,
		0,111,15,1,0,0,0,112,113,3,10,5,0,113,114,3,18,9,0,114,115,5,28,0,0,115,
		17,1,0,0,0,116,122,3,60,30,0,117,118,3,60,30,0,118,119,5,33,0,0,119,120,
		3,30,15,0,120,122,1,0,0,0,121,116,1,0,0,0,121,117,1,0,0,0,122,19,1,0,0,
		0,123,127,5,24,0,0,124,126,3,22,11,0,125,124,1,0,0,0,126,129,1,0,0,0,127,
		125,1,0,0,0,127,128,1,0,0,0,128,130,1,0,0,0,129,127,1,0,0,0,130,131,5,
		25,0,0,131,21,1,0,0,0,132,139,3,24,12,0,133,139,3,26,13,0,134,139,3,28,
		14,0,135,139,3,16,8,0,136,139,3,34,17,0,137,139,3,36,18,0,138,132,1,0,
		0,0,138,133,1,0,0,0,138,134,1,0,0,0,138,135,1,0,0,0,138,136,1,0,0,0,138,
		137,1,0,0,0,139,23,1,0,0,0,140,141,5,14,0,0,141,142,5,22,0,0,142,143,3,
		30,15,0,143,144,5,23,0,0,144,145,3,20,10,0,145,155,1,0,0,0,146,147,5,14,
		0,0,147,148,5,22,0,0,148,149,3,30,15,0,149,150,5,23,0,0,150,151,3,20,10,
		0,151,152,5,15,0,0,152,153,3,20,10,0,153,155,1,0,0,0,154,140,1,0,0,0,154,
		146,1,0,0,0,155,25,1,0,0,0,156,157,5,16,0,0,157,158,5,22,0,0,158,159,3,
		30,15,0,159,160,5,23,0,0,160,161,3,20,10,0,161,173,1,0,0,0,162,163,5,17,
		0,0,163,164,5,22,0,0,164,165,3,30,15,0,165,166,5,28,0,0,166,167,3,30,15,
		0,167,168,5,28,0,0,168,169,3,30,15,0,169,170,5,23,0,0,170,171,3,20,10,
		0,171,173,1,0,0,0,172,156,1,0,0,0,172,162,1,0,0,0,173,27,1,0,0,0,174,175,
		5,18,0,0,175,183,5,28,0,0,176,177,5,19,0,0,177,183,5,28,0,0,178,179,5,
		20,0,0,179,180,3,30,15,0,180,181,5,28,0,0,181,183,1,0,0,0,182,174,1,0,
		0,0,182,176,1,0,0,0,182,178,1,0,0,0,183,29,1,0,0,0,184,185,3,58,29,0,185,
		186,5,28,0,0,186,191,1,0,0,0,187,188,3,38,19,0,188,189,5,28,0,0,189,191,
		1,0,0,0,190,184,1,0,0,0,190,187,1,0,0,0,191,31,1,0,0,0,192,201,3,38,19,
		0,193,196,3,54,27,0,194,196,3,60,30,0,195,193,1,0,0,0,195,194,1,0,0,0,
		196,197,1,0,0,0,197,198,3,62,31,0,198,199,3,32,16,0,199,201,1,0,0,0,200,
		192,1,0,0,0,200,195,1,0,0,0,201,33,1,0,0,0,202,203,3,60,30,0,203,207,5,
		22,0,0,204,206,3,12,6,0,205,204,1,0,0,0,206,209,1,0,0,0,207,205,1,0,0,
		0,207,208,1,0,0,0,208,210,1,0,0,0,209,207,1,0,0,0,210,211,5,23,0,0,211,
		212,5,28,0,0,212,35,1,0,0,0,213,214,3,60,30,0,214,215,3,62,31,0,215,216,
		3,30,15,0,216,217,5,28,0,0,217,37,1,0,0,0,218,226,3,40,20,0,219,220,3,
		40,20,0,220,221,5,21,0,0,221,222,3,30,15,0,222,223,5,31,0,0,223,224,3,
		30,15,0,224,226,1,0,0,0,225,218,1,0,0,0,225,219,1,0,0,0,226,39,1,0,0,0,
		227,228,6,20,-1,0,228,229,3,42,21,0,229,235,1,0,0,0,230,231,10,1,0,0,231,
		232,5,46,0,0,232,234,3,42,21,0,233,230,1,0,0,0,234,237,1,0,0,0,235,233,
		1,0,0,0,235,236,1,0,0,0,236,41,1,0,0,0,237,235,1,0,0,0,238,239,6,21,-1,
		0,239,240,3,44,22,0,240,246,1,0,0,0,241,242,10,1,0,0,242,243,5,45,0,0,
		243,245,3,44,22,0,244,241,1,0,0,0,245,248,1,0,0,0,246,244,1,0,0,0,246,
		247,1,0,0,0,247,43,1,0,0,0,248,246,1,0,0,0,249,250,6,22,-1,0,250,251,3,
		46,23,0,251,260,1,0,0,0,252,253,10,2,0,0,253,254,5,47,0,0,254,259,3,46,
		23,0,255,256,10,1,0,0,256,257,5,48,0,0,257,259,3,46,23,0,258,252,1,0,0,
		0,258,255,1,0,0,0,259,262,1,0,0,0,260,258,1,0,0,0,260,261,1,0,0,0,261,
		45,1,0,0,0,262,260,1,0,0,0,263,264,6,23,-1,0,264,265,3,48,24,0,265,280,
		1,0,0,0,266,267,10,4,0,0,267,268,5,50,0,0,268,279,3,48,24,0,269,270,10,
		3,0,0,270,271,5,49,0,0,271,279,3,48,24,0,272,273,10,2,0,0,273,274,5,52,
		0,0,274,279,3,48,24,0,275,276,10,1,0,0,276,277,5,51,0,0,277,279,3,48,24,
		0,278,266,1,0,0,0,278,269,1,0,0,0,278,272,1,0,0,0,278,275,1,0,0,0,279,
		282,1,0,0,0,280,278,1,0,0,0,280,281,1,0,0,0,281,47,1,0,0,0,282,280,1,0,
		0,0,283,284,6,24,-1,0,284,285,3,50,25,0,285,294,1,0,0,0,286,287,10,2,0,
		0,287,288,5,54,0,0,288,293,3,50,25,0,289,290,10,1,0,0,290,291,5,55,0,0,
		291,293,3,50,25,0,292,286,1,0,0,0,292,289,1,0,0,0,293,296,1,0,0,0,294,
		292,1,0,0,0,294,295,1,0,0,0,295,49,1,0,0,0,296,294,1,0,0,0,297,298,6,25,
		-1,0,298,299,3,52,26,0,299,308,1,0,0,0,300,301,10,2,0,0,301,302,5,42,0,
		0,302,307,3,52,26,0,303,304,10,1,0,0,304,305,5,43,0,0,305,307,3,52,26,
		0,306,300,1,0,0,0,306,303,1,0,0,0,307,310,1,0,0,0,308,306,1,0,0,0,308,
		309,1,0,0,0,309,51,1,0,0,0,310,308,1,0,0,0,311,312,6,26,-1,0,312,313,3,
		54,27,0,313,325,1,0,0,0,314,315,10,3,0,0,315,316,5,40,0,0,316,324,3,56,
		28,0,317,318,10,2,0,0,318,319,5,41,0,0,319,324,3,56,28,0,320,321,10,1,
		0,0,321,322,5,44,0,0,322,324,3,56,28,0,323,314,1,0,0,0,323,317,1,0,0,0,
		323,320,1,0,0,0,324,327,1,0,0,0,325,323,1,0,0,0,325,326,1,0,0,0,326,53,
		1,0,0,0,327,325,1,0,0,0,328,340,3,56,28,0,329,330,3,56,28,0,330,331,5,
		56,0,0,331,340,1,0,0,0,332,333,3,56,28,0,333,334,5,57,0,0,334,340,1,0,
		0,0,335,336,5,56,0,0,336,340,3,56,28,0,337,338,5,57,0,0,338,340,3,56,28,
		0,339,328,1,0,0,0,339,329,1,0,0,0,339,332,1,0,0,0,339,335,1,0,0,0,339,
		337,1,0,0,0,340,55,1,0,0,0,341,342,7,1,0,0,342,57,1,0,0,0,343,344,5,12,
		0,0,344,345,3,60,30,0,345,346,5,13,0,0,346,347,3,64,32,0,347,59,1,0,0,
		0,348,349,5,58,0,0,349,61,1,0,0,0,350,351,7,2,0,0,351,63,1,0,0,0,352,353,
		7,3,0,0,353,65,1,0,0,0,28,71,76,90,106,121,127,138,154,172,182,190,195,
		200,207,225,235,246,258,260,278,280,292,294,306,308,323,325,339
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
