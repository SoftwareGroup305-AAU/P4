using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Tree;

namespace P4.TinyCell.Languages.TinyCell
{
    internal class LivenessAnalysisListener : TinyCellBaseListener
    {
        /// <summary>
        /// List of instructions
        /// </summary>
        public List<IInstruction>? instructions { get; set; }

        



        /// <summary>
        /// Represents an instruction in the liveliness analysis./// </summary>
        /// <typeparam name="T">The type of <see cref="ParserRuleContext"/> instruction  </typeparam>
        private class Instruction<T> : IInstruction where T : ParserRuleContext
        {
            /// <summary>
            /// Gets or sets the instruction.
            /// </summary>
            public T? baseInstruction { get; set; }

            /// <summary>
            /// Gets or sets the set of variables generated by this instruction.
            /// </summary>
            public List<TinyCellParser.IdentifierContext>? gen { get; set; }

            /// <summary>
            /// Gets or sets the set of variables killed by this instruction.
            /// </summary>
            public List<TinyCellParser.IdentifierContext>? kill { get; set; }

            /// <summary>
            /// Gets or sets the set of succeeding instructions
            /// </summary>
            public List<IInstruction>? succ { get; set; }

            public List<TinyCellParser.IdentifierContext>? outs { get; set; }

            public List<TinyCellParser.IdentifierContext>? ins { get; set; }
        }

        public interface IInstruction
        {


        }
    }
}
