//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Languages/TinyCell/TinyCell.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class TinyCellParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		Bool=1, Whitespace=2, VOLHIGH=3, VOLLOW=4, PIN=5, INT=6, FLOAT=7, STRING=8, 
		BOOL=9, VOID=10, CHAR=11, UPDATE=12, SETUP=13, SET=14, TO=15, IF=16, ELSE=17, 
		WHILE=18, FOR=19, CONTINUE=20, BREAK=21, RETURN=22, QUESTION=23, LPAR=24, 
		RPAR=25, LCURLY=26, RCURLY=27, LBRACKET=28, RBRACKET=29, SEMI=30, DOT=31, 
		COMMA=32, COLON=33, TRUE=34, FALSE=35, NEWLINE=36, ASSIGN=37, PLUSASSIGN=38, 
		MULTASSIGN=39, DIVASSIGN=40, MODASSIGN=41, MINUSASSIGN=42, QUOTE=43, MULT=44, 
		DIV=45, PLUS=46, MINUS=47, MOD=48, AND=49, OR=50, EQ=51, NEQ=52, GT=53, 
		LT=54, GTE=55, LTE=56, NOT=57, BITSHIFTL=58, BITSHIFTR=59, UNARYPLUS=60, 
		UNARYMINUS=61, Identifier=62, String=63, Numeral=64, Newline=65;
	public const int
		RULE_document = 0, RULE_generalDeclaration = 1, RULE_setupDefinition = 2, 
		RULE_updateDefinition = 3, RULE_functionDefinition = 4, RULE_type = 5, 
		RULE_parameterList = 6, RULE_parameter = 7, RULE_declaration = 8, RULE_initialDeclaration = 9, 
		RULE_compoundStatement = 10, RULE_statement = 11, RULE_ifStatement = 12, 
		RULE_loopStatement = 13, RULE_jumpStatement = 14, RULE_assignment = 15, 
		RULE_functionCall = 16, RULE_primitiveExpression = 17, RULE_unaryExpression = 18, 
		RULE_multiplicativeExpression = 19, RULE_additiveExpression = 20, RULE_bitshiftExpression = 21, 
		RULE_comparisonExpression = 22, RULE_equalityExpression = 23, RULE_andExpression = 24, 
		RULE_orExpression = 25, RULE_ternaryExpression = 26, RULE_pinExpression = 27, 
		RULE_expression = 28, RULE_identifier = 29, RULE_assignmentOperator = 30, 
		RULE_pinVoltage = 31;
	public static readonly string[] ruleNames = {
		"document", "generalDeclaration", "setupDefinition", "updateDefinition", 
		"functionDefinition", "type", "parameterList", "parameter", "declaration", 
		"initialDeclaration", "compoundStatement", "statement", "ifStatement", 
		"loopStatement", "jumpStatement", "assignment", "functionCall", "primitiveExpression", 
		"unaryExpression", "multiplicativeExpression", "additiveExpression", "bitshiftExpression", 
		"comparisonExpression", "equalityExpression", "andExpression", "orExpression", 
		"ternaryExpression", "pinExpression", "expression", "identifier", "assignmentOperator", 
		"pinVoltage"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, "'high'", "'low'", "'pin'", "'int'", "'float'", "'string'", 
		"'bool'", "'void'", "'char'", "'update'", "'setup'", "'set'", "'to'", 
		"'if'", "'else'", "'while'", "'for'", "'continue'", "'break'", "'return'", 
		"'?'", "'('", "')'", "'{'", "'}'", "'['", "']'", "';'", "'.'", "','", 
		"':'", "'true'", "'false'", "'\\n'", "'='", "'+='", "'*='", "'/='", "'%='", 
		"'-='", "'\"'", "'*'", "'/'", "'+'", "'-'", "'%'", "'&&'", "'||'", "'=='", 
		"'!='", "'>'", "'<'", "'>='", "'<='", "'!'", "'<<'", "'>>'", "'++'", "'--'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "Bool", "Whitespace", "VOLHIGH", "VOLLOW", "PIN", "INT", "FLOAT", 
		"STRING", "BOOL", "VOID", "CHAR", "UPDATE", "SETUP", "SET", "TO", "IF", 
		"ELSE", "WHILE", "FOR", "CONTINUE", "BREAK", "RETURN", "QUESTION", "LPAR", 
		"RPAR", "LCURLY", "RCURLY", "LBRACKET", "RBRACKET", "SEMI", "DOT", "COMMA", 
		"COLON", "TRUE", "FALSE", "NEWLINE", "ASSIGN", "PLUSASSIGN", "MULTASSIGN", 
		"DIVASSIGN", "MODASSIGN", "MINUSASSIGN", "QUOTE", "MULT", "DIV", "PLUS", 
		"MINUS", "MOD", "AND", "OR", "EQ", "NEQ", "GT", "LT", "GTE", "LTE", "NOT", 
		"BITSHIFTL", "BITSHIFTR", "UNARYPLUS", "UNARYMINUS", "Identifier", "String", 
		"Numeral", "Newline"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "TinyCell.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static TinyCellParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public TinyCellParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public TinyCellParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class DocumentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SetupDefinitionContext setupDefinition() {
			return GetRuleContext<SetupDefinitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UpdateDefinitionContext updateDefinition() {
			return GetRuleContext<UpdateDefinitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GeneralDeclarationContext[] generalDeclaration() {
			return GetRuleContexts<GeneralDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public GeneralDeclarationContext generalDeclaration(int i) {
			return GetRuleContext<GeneralDeclarationContext>(i);
		}
		public DocumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_document; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITinyCellVisitor<TResult> typedVisitor = visitor as ITinyCellVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDocument(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DocumentContext document() {
		DocumentContext _localctx = new DocumentContext(Context, State);
		EnterRule(_localctx, 0, RULE_document);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 64;
			setupDefinition();
			State = 65;
			updateDefinition();
			State = 69;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 3808L) != 0)) {
				{
				{
				State = 66;
				generalDeclaration();
				}
				}
				State = 71;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GeneralDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunctionDefinitionContext functionDefinition() {
			return GetRuleContext<FunctionDefinitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationContext declaration() {
			return GetRuleContext<DeclarationContext>(0);
		}
		public GeneralDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_generalDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITinyCellVisitor<TResult> typedVisitor = visitor as ITinyCellVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGeneralDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GeneralDeclarationContext generalDeclaration() {
		GeneralDeclarationContext _localctx = new GeneralDeclarationContext(Context, State);
		EnterRule(_localctx, 2, RULE_generalDeclaration);
		try {
			State = 74;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 72;
				functionDefinition();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 73;
				declaration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SetupDefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SETUP() { return GetToken(TinyCellParser.SETUP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CompoundStatementContext compoundStatement() {
			return GetRuleContext<CompoundStatementContext>(0);
		}
		public SetupDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_setupDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITinyCellVisitor<TResult> typedVisitor = visitor as ITinyCellVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSetupDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SetupDefinitionContext setupDefinition() {
		SetupDefinitionContext _localctx = new SetupDefinitionContext(Context, State);
		EnterRule(_localctx, 4, RULE_setupDefinition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 76;
			Match(SETUP);
			State = 77;
			compoundStatement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UpdateDefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UPDATE() { return GetToken(TinyCellParser.UPDATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CompoundStatementContext compoundStatement() {
			return GetRuleContext<CompoundStatementContext>(0);
		}
		public UpdateDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_updateDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITinyCellVisitor<TResult> typedVisitor = visitor as ITinyCellVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUpdateDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UpdateDefinitionContext updateDefinition() {
		UpdateDefinitionContext _localctx = new UpdateDefinitionContext(Context, State);
		EnterRule(_localctx, 6, RULE_updateDefinition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 79;
			Match(UPDATE);
			State = 80;
			compoundStatement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionDefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAR() { return GetToken(TinyCellParser.LPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAR() { return GetToken(TinyCellParser.RPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CompoundStatementContext compoundStatement() {
			return GetRuleContext<CompoundStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParameterListContext[] parameterList() {
			return GetRuleContexts<ParameterListContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParameterListContext parameterList(int i) {
			return GetRuleContext<ParameterListContext>(i);
		}
		public FunctionDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITinyCellVisitor<TResult> typedVisitor = visitor as ITinyCellVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionDefinitionContext functionDefinition() {
		FunctionDefinitionContext _localctx = new FunctionDefinitionContext(Context, State);
		EnterRule(_localctx, 8, RULE_functionDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 82;
			type();
			State = 83;
			identifier();
			State = 84;
			Match(LPAR);
			State = 88;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 3808L) != 0)) {
				{
				{
				State = 85;
				parameterList(0);
				}
				}
				State = 90;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 91;
			Match(RPAR);
			State = 92;
			compoundStatement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VOID() { return GetToken(TinyCellParser.VOID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHAR() { return GetToken(TinyCellParser.CHAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(TinyCellParser.INT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT() { return GetToken(TinyCellParser.FLOAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOL() { return GetToken(TinyCellParser.BOOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PIN() { return GetToken(TinyCellParser.PIN, 0); }
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITinyCellVisitor<TResult> typedVisitor = visitor as ITinyCellVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(Context, State);
		EnterRule(_localctx, 10, RULE_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 94;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 3808L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ParameterContext parameter() {
			return GetRuleContext<ParameterContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParameterListContext parameterList() {
			return GetRuleContext<ParameterListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(TinyCellParser.COMMA, 0); }
		public ParameterListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameterList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITinyCellVisitor<TResult> typedVisitor = visitor as ITinyCellVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameterList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParameterListContext parameterList() {
		return parameterList(0);
	}

	private ParameterListContext parameterList(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ParameterListContext _localctx = new ParameterListContext(Context, _parentState);
		ParameterListContext _prevctx = _localctx;
		int _startState = 12;
		EnterRecursionRule(_localctx, 12, RULE_parameterList, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 97;
			parameter();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 104;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,3,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new ParameterListContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_parameterList);
					State = 99;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 100;
					Match(COMMA);
					State = 101;
					parameter();
					}
					} 
				}
				State = 106;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,3,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ParameterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITinyCellVisitor<TResult> typedVisitor = visitor as ITinyCellVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParameterContext parameter() {
		ParameterContext _localctx = new ParameterContext(Context, State);
		EnterRule(_localctx, 14, RULE_parameter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 107;
			type();
			State = 108;
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InitialDeclarationContext initialDeclaration() {
			return GetRuleContext<InitialDeclarationContext>(0);
		}
		public DeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITinyCellVisitor<TResult> typedVisitor = visitor as ITinyCellVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationContext declaration() {
		DeclarationContext _localctx = new DeclarationContext(Context, State);
		EnterRule(_localctx, 16, RULE_declaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 110;
			type();
			State = 111;
			initialDeclaration();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InitialDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(TinyCellParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public InitialDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_initialDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITinyCellVisitor<TResult> typedVisitor = visitor as ITinyCellVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInitialDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InitialDeclarationContext initialDeclaration() {
		InitialDeclarationContext _localctx = new InitialDeclarationContext(Context, State);
		EnterRule(_localctx, 18, RULE_initialDeclaration);
		try {
			State = 118;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 113;
				identifier();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 114;
				identifier();
				State = 115;
				Match(ASSIGN);
				State = 116;
				expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CompoundStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LCURLY() { return GetToken(TinyCellParser.LCURLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RCURLY() { return GetToken(TinyCellParser.RCURLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public CompoundStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compoundStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITinyCellVisitor<TResult> typedVisitor = visitor as ITinyCellVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompoundStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompoundStatementContext compoundStatement() {
		CompoundStatementContext _localctx = new CompoundStatementContext(Context, State);
		EnterRule(_localctx, 20, RULE_compoundStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 120;
			Match(LCURLY);
			State = 124;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((((_la - 1)) & ~0x3f) == 0 && ((1L << (_la - 1)) & -576460752290928783L) != 0)) {
				{
				{
				State = 121;
				statement();
				}
				}
				State = 126;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 127;
			Match(RCURLY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IfStatementContext ifStatement() {
			return GetRuleContext<IfStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LoopStatementContext loopStatement() {
			return GetRuleContext<LoopStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public JumpStatementContext jumpStatement() {
			return GetRuleContext<JumpStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationContext declaration() {
			return GetRuleContext<DeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(TinyCellParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentContext assignment() {
			return GetRuleContext<AssignmentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITinyCellVisitor<TResult> typedVisitor = visitor as ITinyCellVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 22, RULE_statement);
		try {
			State = 144;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,6,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 129;
				ifStatement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 130;
				loopStatement();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 131;
				jumpStatement();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 132;
				declaration();
				State = 133;
				Match(SEMI);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 135;
				functionCall();
				State = 136;
				Match(SEMI);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 138;
				assignment();
				State = 139;
				Match(SEMI);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 141;
				expression();
				State = 142;
				Match(SEMI);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(TinyCellParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAR() { return GetToken(TinyCellParser.LPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAR() { return GetToken(TinyCellParser.RPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CompoundStatementContext[] compoundStatement() {
			return GetRuleContexts<CompoundStatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CompoundStatementContext compoundStatement(int i) {
			return GetRuleContext<CompoundStatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(TinyCellParser.ELSE, 0); }
		public IfStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITinyCellVisitor<TResult> typedVisitor = visitor as ITinyCellVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfStatementContext ifStatement() {
		IfStatementContext _localctx = new IfStatementContext(Context, State);
		EnterRule(_localctx, 24, RULE_ifStatement);
		try {
			State = 160;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 146;
				Match(IF);
				State = 147;
				Match(LPAR);
				State = 148;
				expression();
				State = 149;
				Match(RPAR);
				State = 150;
				compoundStatement();
				State = 151;
				Match(ELSE);
				State = 152;
				compoundStatement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 154;
				Match(IF);
				State = 155;
				Match(LPAR);
				State = 156;
				expression();
				State = 157;
				Match(RPAR);
				State = 158;
				compoundStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LoopStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHILE() { return GetToken(TinyCellParser.WHILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAR() { return GetToken(TinyCellParser.LPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAR() { return GetToken(TinyCellParser.RPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CompoundStatementContext compoundStatement() {
			return GetRuleContext<CompoundStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(TinyCellParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SEMI() { return GetTokens(TinyCellParser.SEMI); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI(int i) {
			return GetToken(TinyCellParser.SEMI, i);
		}
		public LoopStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loopStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITinyCellVisitor<TResult> typedVisitor = visitor as ITinyCellVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoopStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LoopStatementContext loopStatement() {
		LoopStatementContext _localctx = new LoopStatementContext(Context, State);
		EnterRule(_localctx, 26, RULE_loopStatement);
		try {
			State = 178;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case WHILE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 162;
				Match(WHILE);
				State = 163;
				Match(LPAR);
				State = 164;
				expression();
				State = 165;
				Match(RPAR);
				State = 166;
				compoundStatement();
				}
				break;
			case FOR:
				EnterOuterAlt(_localctx, 2);
				{
				State = 168;
				Match(FOR);
				State = 169;
				Match(LPAR);
				State = 170;
				expression();
				State = 171;
				Match(SEMI);
				State = 172;
				expression();
				State = 173;
				Match(SEMI);
				State = 174;
				expression();
				State = 175;
				Match(RPAR);
				State = 176;
				compoundStatement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class JumpStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONTINUE() { return GetToken(TinyCellParser.CONTINUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(TinyCellParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BREAK() { return GetToken(TinyCellParser.BREAK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURN() { return GetToken(TinyCellParser.RETURN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public JumpStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_jumpStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITinyCellVisitor<TResult> typedVisitor = visitor as ITinyCellVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJumpStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public JumpStatementContext jumpStatement() {
		JumpStatementContext _localctx = new JumpStatementContext(Context, State);
		EnterRule(_localctx, 28, RULE_jumpStatement);
		try {
			State = 188;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CONTINUE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 180;
				Match(CONTINUE);
				State = 181;
				Match(SEMI);
				}
				break;
			case BREAK:
				EnterOuterAlt(_localctx, 2);
				{
				State = 182;
				Match(BREAK);
				State = 183;
				Match(SEMI);
				}
				break;
			case RETURN:
				EnterOuterAlt(_localctx, 3);
				{
				State = 184;
				Match(RETURN);
				State = 185;
				expression();
				State = 186;
				Match(SEMI);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentOperatorContext assignmentOperator() {
			return GetRuleContext<AssignmentOperatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		public AssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITinyCellVisitor<TResult> typedVisitor = visitor as ITinyCellVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentContext assignment() {
		AssignmentContext _localctx = new AssignmentContext(Context, State);
		EnterRule(_localctx, 30, RULE_assignment);
		try {
			State = 198;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,10,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 190;
				identifier();
				State = 191;
				assignmentOperator();
				State = 192;
				expression();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 194;
				identifier();
				State = 195;
				assignmentOperator();
				State = 196;
				functionCall();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionCallContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAR() { return GetToken(TinyCellParser.LPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAR() { return GetToken(TinyCellParser.RPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ParameterListContext[] parameterList() {
			return GetRuleContexts<ParameterListContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParameterListContext parameterList(int i) {
			return GetRuleContext<ParameterListContext>(i);
		}
		public FunctionCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionCall; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITinyCellVisitor<TResult> typedVisitor = visitor as ITinyCellVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionCallContext functionCall() {
		FunctionCallContext _localctx = new FunctionCallContext(Context, State);
		EnterRule(_localctx, 32, RULE_functionCall);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 200;
			identifier();
			State = 201;
			Match(LPAR);
			State = 205;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 3808L) != 0)) {
				{
				{
				State = 202;
				parameterList(0);
				}
				}
				State = 207;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 208;
			Match(RPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrimitiveExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Numeral() { return GetToken(TinyCellParser.Numeral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Bool() { return GetToken(TinyCellParser.Bool, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode String() { return GetToken(TinyCellParser.String, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public PrimitiveExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primitiveExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITinyCellVisitor<TResult> typedVisitor = visitor as ITinyCellVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimitiveExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrimitiveExpressionContext primitiveExpression() {
		PrimitiveExpressionContext _localctx = new PrimitiveExpressionContext(Context, State);
		EnterRule(_localctx, 34, RULE_primitiveExpression);
		try {
			State = 214;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Numeral:
				EnterOuterAlt(_localctx, 1);
				{
				State = 210;
				Match(Numeral);
				}
				break;
			case Bool:
				EnterOuterAlt(_localctx, 2);
				{
				State = 211;
				Match(Bool);
				}
				break;
			case String:
				EnterOuterAlt(_localctx, 3);
				{
				State = 212;
				Match(String);
				}
				break;
			case Identifier:
				EnterOuterAlt(_localctx, 4);
				{
				State = 213;
				identifier();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnaryExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PrimitiveExpressionContext primitiveExpression() {
			return GetRuleContext<PrimitiveExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNARYPLUS() { return GetToken(TinyCellParser.UNARYPLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNARYMINUS() { return GetToken(TinyCellParser.UNARYMINUS, 0); }
		public UnaryExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unaryExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITinyCellVisitor<TResult> typedVisitor = visitor as ITinyCellVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnaryExpressionContext unaryExpression() {
		UnaryExpressionContext _localctx = new UnaryExpressionContext(Context, State);
		EnterRule(_localctx, 36, RULE_unaryExpression);
		try {
			State = 227;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,13,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 216;
				primitiveExpression();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 217;
				primitiveExpression();
				State = 218;
				Match(UNARYPLUS);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 220;
				primitiveExpression();
				State = 221;
				Match(UNARYMINUS);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 223;
				Match(UNARYPLUS);
				State = 224;
				primitiveExpression();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 225;
				Match(UNARYMINUS);
				State = 226;
				primitiveExpression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MultiplicativeExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public UnaryExpressionContext unaryExpression() {
			return GetRuleContext<UnaryExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MultiplicativeExpressionContext multiplicativeExpression() {
			return GetRuleContext<MultiplicativeExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULT() { return GetToken(TinyCellParser.MULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PrimitiveExpressionContext primitiveExpression() {
			return GetRuleContext<PrimitiveExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIV() { return GetToken(TinyCellParser.DIV, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MOD() { return GetToken(TinyCellParser.MOD, 0); }
		public MultiplicativeExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multiplicativeExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITinyCellVisitor<TResult> typedVisitor = visitor as ITinyCellVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiplicativeExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MultiplicativeExpressionContext multiplicativeExpression() {
		return multiplicativeExpression(0);
	}

	private MultiplicativeExpressionContext multiplicativeExpression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		MultiplicativeExpressionContext _localctx = new MultiplicativeExpressionContext(Context, _parentState);
		MultiplicativeExpressionContext _prevctx = _localctx;
		int _startState = 38;
		EnterRecursionRule(_localctx, 38, RULE_multiplicativeExpression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 230;
			unaryExpression();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 243;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,15,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 241;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,14,Context) ) {
					case 1:
						{
						_localctx = new MultiplicativeExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_multiplicativeExpression);
						State = 232;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 233;
						Match(MULT);
						State = 234;
						primitiveExpression();
						}
						break;
					case 2:
						{
						_localctx = new MultiplicativeExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_multiplicativeExpression);
						State = 235;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 236;
						Match(DIV);
						State = 237;
						primitiveExpression();
						}
						break;
					case 3:
						{
						_localctx = new MultiplicativeExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_multiplicativeExpression);
						State = 238;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 239;
						Match(MOD);
						State = 240;
						primitiveExpression();
						}
						break;
					}
					} 
				}
				State = 245;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,15,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class AdditiveExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public MultiplicativeExpressionContext multiplicativeExpression() {
			return GetRuleContext<MultiplicativeExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AdditiveExpressionContext additiveExpression() {
			return GetRuleContext<AdditiveExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(TinyCellParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(TinyCellParser.MINUS, 0); }
		public AdditiveExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_additiveExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITinyCellVisitor<TResult> typedVisitor = visitor as ITinyCellVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAdditiveExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AdditiveExpressionContext additiveExpression() {
		return additiveExpression(0);
	}

	private AdditiveExpressionContext additiveExpression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		AdditiveExpressionContext _localctx = new AdditiveExpressionContext(Context, _parentState);
		AdditiveExpressionContext _prevctx = _localctx;
		int _startState = 40;
		EnterRecursionRule(_localctx, 40, RULE_additiveExpression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 247;
			multiplicativeExpression(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 257;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,17,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 255;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,16,Context) ) {
					case 1:
						{
						_localctx = new AdditiveExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_additiveExpression);
						State = 249;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 250;
						Match(PLUS);
						State = 251;
						multiplicativeExpression(0);
						}
						break;
					case 2:
						{
						_localctx = new AdditiveExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_additiveExpression);
						State = 252;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 253;
						Match(MINUS);
						State = 254;
						multiplicativeExpression(0);
						}
						break;
					}
					} 
				}
				State = 259;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,17,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class BitshiftExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AdditiveExpressionContext additiveExpression() {
			return GetRuleContext<AdditiveExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BitshiftExpressionContext bitshiftExpression() {
			return GetRuleContext<BitshiftExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BITSHIFTL() { return GetToken(TinyCellParser.BITSHIFTL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BITSHIFTR() { return GetToken(TinyCellParser.BITSHIFTR, 0); }
		public BitshiftExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bitshiftExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITinyCellVisitor<TResult> typedVisitor = visitor as ITinyCellVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBitshiftExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BitshiftExpressionContext bitshiftExpression() {
		return bitshiftExpression(0);
	}

	private BitshiftExpressionContext bitshiftExpression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		BitshiftExpressionContext _localctx = new BitshiftExpressionContext(Context, _parentState);
		BitshiftExpressionContext _prevctx = _localctx;
		int _startState = 42;
		EnterRecursionRule(_localctx, 42, RULE_bitshiftExpression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 261;
			additiveExpression(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 271;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,19,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 269;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,18,Context) ) {
					case 1:
						{
						_localctx = new BitshiftExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_bitshiftExpression);
						State = 263;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 264;
						Match(BITSHIFTL);
						State = 265;
						additiveExpression(0);
						}
						break;
					case 2:
						{
						_localctx = new BitshiftExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_bitshiftExpression);
						State = 266;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 267;
						Match(BITSHIFTR);
						State = 268;
						additiveExpression(0);
						}
						break;
					}
					} 
				}
				State = 273;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,19,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ComparisonExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BitshiftExpressionContext bitshiftExpression() {
			return GetRuleContext<BitshiftExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ComparisonExpressionContext comparisonExpression() {
			return GetRuleContext<ComparisonExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT() { return GetToken(TinyCellParser.LT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT() { return GetToken(TinyCellParser.GT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LTE() { return GetToken(TinyCellParser.LTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GTE() { return GetToken(TinyCellParser.GTE, 0); }
		public ComparisonExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comparisonExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITinyCellVisitor<TResult> typedVisitor = visitor as ITinyCellVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComparisonExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ComparisonExpressionContext comparisonExpression() {
		return comparisonExpression(0);
	}

	private ComparisonExpressionContext comparisonExpression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ComparisonExpressionContext _localctx = new ComparisonExpressionContext(Context, _parentState);
		ComparisonExpressionContext _prevctx = _localctx;
		int _startState = 44;
		EnterRecursionRule(_localctx, 44, RULE_comparisonExpression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 275;
			bitshiftExpression(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 291;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,21,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 289;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,20,Context) ) {
					case 1:
						{
						_localctx = new ComparisonExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_comparisonExpression);
						State = 277;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 278;
						Match(LT);
						State = 279;
						bitshiftExpression(0);
						}
						break;
					case 2:
						{
						_localctx = new ComparisonExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_comparisonExpression);
						State = 280;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 281;
						Match(GT);
						State = 282;
						bitshiftExpression(0);
						}
						break;
					case 3:
						{
						_localctx = new ComparisonExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_comparisonExpression);
						State = 283;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 284;
						Match(LTE);
						State = 285;
						bitshiftExpression(0);
						}
						break;
					case 4:
						{
						_localctx = new ComparisonExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_comparisonExpression);
						State = 286;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 287;
						Match(GTE);
						State = 288;
						bitshiftExpression(0);
						}
						break;
					}
					} 
				}
				State = 293;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,21,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class EqualityExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ComparisonExpressionContext comparisonExpression() {
			return GetRuleContext<ComparisonExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EqualityExpressionContext equalityExpression() {
			return GetRuleContext<EqualityExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQ() { return GetToken(TinyCellParser.EQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEQ() { return GetToken(TinyCellParser.NEQ, 0); }
		public EqualityExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_equalityExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITinyCellVisitor<TResult> typedVisitor = visitor as ITinyCellVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEqualityExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EqualityExpressionContext equalityExpression() {
		return equalityExpression(0);
	}

	private EqualityExpressionContext equalityExpression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		EqualityExpressionContext _localctx = new EqualityExpressionContext(Context, _parentState);
		EqualityExpressionContext _prevctx = _localctx;
		int _startState = 46;
		EnterRecursionRule(_localctx, 46, RULE_equalityExpression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 295;
			comparisonExpression(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 305;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,23,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 303;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,22,Context) ) {
					case 1:
						{
						_localctx = new EqualityExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_equalityExpression);
						State = 297;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 298;
						Match(EQ);
						State = 299;
						comparisonExpression(0);
						}
						break;
					case 2:
						{
						_localctx = new EqualityExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_equalityExpression);
						State = 300;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 301;
						Match(NEQ);
						State = 302;
						comparisonExpression(0);
						}
						break;
					}
					} 
				}
				State = 307;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,23,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class AndExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public EqualityExpressionContext equalityExpression() {
			return GetRuleContext<EqualityExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AndExpressionContext andExpression() {
			return GetRuleContext<AndExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND() { return GetToken(TinyCellParser.AND, 0); }
		public AndExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_andExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITinyCellVisitor<TResult> typedVisitor = visitor as ITinyCellVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAndExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AndExpressionContext andExpression() {
		return andExpression(0);
	}

	private AndExpressionContext andExpression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		AndExpressionContext _localctx = new AndExpressionContext(Context, _parentState);
		AndExpressionContext _prevctx = _localctx;
		int _startState = 48;
		EnterRecursionRule(_localctx, 48, RULE_andExpression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 309;
			equalityExpression(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 316;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,24,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new AndExpressionContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_andExpression);
					State = 311;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 312;
					Match(AND);
					State = 313;
					equalityExpression(0);
					}
					} 
				}
				State = 318;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,24,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class OrExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AndExpressionContext andExpression() {
			return GetRuleContext<AndExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OrExpressionContext orExpression() {
			return GetRuleContext<OrExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR() { return GetToken(TinyCellParser.OR, 0); }
		public OrExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_orExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITinyCellVisitor<TResult> typedVisitor = visitor as ITinyCellVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOrExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OrExpressionContext orExpression() {
		return orExpression(0);
	}

	private OrExpressionContext orExpression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		OrExpressionContext _localctx = new OrExpressionContext(Context, _parentState);
		OrExpressionContext _prevctx = _localctx;
		int _startState = 50;
		EnterRecursionRule(_localctx, 50, RULE_orExpression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 320;
			andExpression(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 327;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,25,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new OrExpressionContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_orExpression);
					State = 322;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 323;
					Match(OR);
					State = 324;
					andExpression(0);
					}
					} 
				}
				State = 329;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,25,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class TernaryExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public OrExpressionContext orExpression() {
			return GetRuleContext<OrExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUESTION() { return GetToken(TinyCellParser.QUESTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(TinyCellParser.COLON, 0); }
		public TernaryExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ternaryExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITinyCellVisitor<TResult> typedVisitor = visitor as ITinyCellVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTernaryExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TernaryExpressionContext ternaryExpression() {
		TernaryExpressionContext _localctx = new TernaryExpressionContext(Context, State);
		EnterRule(_localctx, 52, RULE_ternaryExpression);
		try {
			State = 337;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,26,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 330;
				orExpression(0);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 331;
				orExpression(0);
				State = 332;
				Match(QUESTION);
				State = 333;
				expression();
				State = 334;
				Match(COLON);
				State = 335;
				expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PinExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TernaryExpressionContext ternaryExpression() {
			return GetRuleContext<TernaryExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(TinyCellParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(TinyCellParser.TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PinVoltageContext pinVoltage() {
			return GetRuleContext<PinVoltageContext>(0);
		}
		public PinExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pinExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITinyCellVisitor<TResult> typedVisitor = visitor as ITinyCellVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPinExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PinExpressionContext pinExpression() {
		PinExpressionContext _localctx = new PinExpressionContext(Context, State);
		EnterRule(_localctx, 54, RULE_pinExpression);
		try {
			State = 345;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Bool:
			case UNARYPLUS:
			case UNARYMINUS:
			case Identifier:
			case String:
			case Numeral:
				EnterOuterAlt(_localctx, 1);
				{
				State = 339;
				ternaryExpression();
				}
				break;
			case SET:
				EnterOuterAlt(_localctx, 2);
				{
				State = 340;
				Match(SET);
				State = 341;
				identifier();
				State = 342;
				Match(TO);
				State = 343;
				pinVoltage();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PinExpressionContext pinExpression() {
			return GetRuleContext<PinExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAR() { return GetToken(TinyCellParser.LPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAR() { return GetToken(TinyCellParser.RPAR, 0); }
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITinyCellVisitor<TResult> typedVisitor = visitor as ITinyCellVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(Context, State);
		EnterRule(_localctx, 56, RULE_expression);
		try {
			State = 352;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Bool:
			case SET:
			case UNARYPLUS:
			case UNARYMINUS:
			case Identifier:
			case String:
			case Numeral:
				EnterOuterAlt(_localctx, 1);
				{
				State = 347;
				pinExpression();
				}
				break;
			case LPAR:
				EnterOuterAlt(_localctx, 2);
				{
				State = 348;
				Match(LPAR);
				State = 349;
				expression();
				State = 350;
				Match(RPAR);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(TinyCellParser.Identifier, 0); }
		public IdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITinyCellVisitor<TResult> typedVisitor = visitor as ITinyCellVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierContext identifier() {
		IdentifierContext _localctx = new IdentifierContext(Context, State);
		EnterRule(_localctx, 58, RULE_identifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 354;
			Match(Identifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentOperatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(TinyCellParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULTASSIGN() { return GetToken(TinyCellParser.MULTASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIVASSIGN() { return GetToken(TinyCellParser.DIVASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MODASSIGN() { return GetToken(TinyCellParser.MODASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUSASSIGN() { return GetToken(TinyCellParser.PLUSASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUSASSIGN() { return GetToken(TinyCellParser.MINUSASSIGN, 0); }
		public AssignmentOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignmentOperator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITinyCellVisitor<TResult> typedVisitor = visitor as ITinyCellVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignmentOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentOperatorContext assignmentOperator() {
		AssignmentOperatorContext _localctx = new AssignmentOperatorContext(Context, State);
		EnterRule(_localctx, 60, RULE_assignmentOperator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 356;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 8658654068736L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PinVoltageContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VOLHIGH() { return GetToken(TinyCellParser.VOLHIGH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VOLLOW() { return GetToken(TinyCellParser.VOLLOW, 0); }
		public PinVoltageContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pinVoltage; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITinyCellVisitor<TResult> typedVisitor = visitor as ITinyCellVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPinVoltage(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PinVoltageContext pinVoltage() {
		PinVoltageContext _localctx = new PinVoltageContext(Context, State);
		EnterRule(_localctx, 62, RULE_pinVoltage);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 358;
			_la = TokenStream.LA(1);
			if ( !(_la==VOLHIGH || _la==VOLLOW) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 6: return parameterList_sempred((ParameterListContext)_localctx, predIndex);
		case 19: return multiplicativeExpression_sempred((MultiplicativeExpressionContext)_localctx, predIndex);
		case 20: return additiveExpression_sempred((AdditiveExpressionContext)_localctx, predIndex);
		case 21: return bitshiftExpression_sempred((BitshiftExpressionContext)_localctx, predIndex);
		case 22: return comparisonExpression_sempred((ComparisonExpressionContext)_localctx, predIndex);
		case 23: return equalityExpression_sempred((EqualityExpressionContext)_localctx, predIndex);
		case 24: return andExpression_sempred((AndExpressionContext)_localctx, predIndex);
		case 25: return orExpression_sempred((OrExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool parameterList_sempred(ParameterListContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 1);
		}
		return true;
	}
	private bool multiplicativeExpression_sempred(MultiplicativeExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 1: return Precpred(Context, 3);
		case 2: return Precpred(Context, 2);
		case 3: return Precpred(Context, 1);
		}
		return true;
	}
	private bool additiveExpression_sempred(AdditiveExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 4: return Precpred(Context, 2);
		case 5: return Precpred(Context, 1);
		}
		return true;
	}
	private bool bitshiftExpression_sempred(BitshiftExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 6: return Precpred(Context, 2);
		case 7: return Precpred(Context, 1);
		}
		return true;
	}
	private bool comparisonExpression_sempred(ComparisonExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 8: return Precpred(Context, 4);
		case 9: return Precpred(Context, 3);
		case 10: return Precpred(Context, 2);
		case 11: return Precpred(Context, 1);
		}
		return true;
	}
	private bool equalityExpression_sempred(EqualityExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 12: return Precpred(Context, 2);
		case 13: return Precpred(Context, 1);
		}
		return true;
	}
	private bool andExpression_sempred(AndExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 14: return Precpred(Context, 1);
		}
		return true;
	}
	private bool orExpression_sempred(OrExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 15: return Precpred(Context, 1);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,65,361,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,1,0,1,0,1,0,5,0,68,8,0,10,0,12,0,71,9,0,
		1,1,1,1,3,1,75,8,1,1,2,1,2,1,2,1,3,1,3,1,3,1,4,1,4,1,4,1,4,5,4,87,8,4,
		10,4,12,4,90,9,4,1,4,1,4,1,4,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,6,5,6,103,8,
		6,10,6,12,6,106,9,6,1,7,1,7,1,7,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,3,9,119,
		8,9,1,10,1,10,5,10,123,8,10,10,10,12,10,126,9,10,1,10,1,10,1,11,1,11,1,
		11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,3,11,145,
		8,11,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,
		1,12,3,12,161,8,12,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,
		13,1,13,1,13,1,13,1,13,1,13,3,13,179,8,13,1,14,1,14,1,14,1,14,1,14,1,14,
		1,14,1,14,3,14,189,8,14,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,3,15,199,
		8,15,1,16,1,16,1,16,5,16,204,8,16,10,16,12,16,207,9,16,1,16,1,16,1,17,
		1,17,1,17,1,17,3,17,215,8,17,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,
		18,1,18,1,18,3,18,228,8,18,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,
		1,19,1,19,1,19,5,19,242,8,19,10,19,12,19,245,9,19,1,20,1,20,1,20,1,20,
		1,20,1,20,1,20,1,20,1,20,5,20,256,8,20,10,20,12,20,259,9,20,1,21,1,21,
		1,21,1,21,1,21,1,21,1,21,1,21,1,21,5,21,270,8,21,10,21,12,21,273,9,21,
		1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,
		1,22,5,22,290,8,22,10,22,12,22,293,9,22,1,23,1,23,1,23,1,23,1,23,1,23,
		1,23,1,23,1,23,5,23,304,8,23,10,23,12,23,307,9,23,1,24,1,24,1,24,1,24,
		1,24,1,24,5,24,315,8,24,10,24,12,24,318,9,24,1,25,1,25,1,25,1,25,1,25,
		1,25,5,25,326,8,25,10,25,12,25,329,9,25,1,26,1,26,1,26,1,26,1,26,1,26,
		1,26,3,26,338,8,26,1,27,1,27,1,27,1,27,1,27,1,27,3,27,346,8,27,1,28,1,
		28,1,28,1,28,1,28,3,28,353,8,28,1,29,1,29,1,30,1,30,1,31,1,31,1,31,0,8,
		12,38,40,42,44,46,48,50,32,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,
		32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,0,3,2,0,5,7,9,11,1,0,37,
		42,1,0,3,4,371,0,64,1,0,0,0,2,74,1,0,0,0,4,76,1,0,0,0,6,79,1,0,0,0,8,82,
		1,0,0,0,10,94,1,0,0,0,12,96,1,0,0,0,14,107,1,0,0,0,16,110,1,0,0,0,18,118,
		1,0,0,0,20,120,1,0,0,0,22,144,1,0,0,0,24,160,1,0,0,0,26,178,1,0,0,0,28,
		188,1,0,0,0,30,198,1,0,0,0,32,200,1,0,0,0,34,214,1,0,0,0,36,227,1,0,0,
		0,38,229,1,0,0,0,40,246,1,0,0,0,42,260,1,0,0,0,44,274,1,0,0,0,46,294,1,
		0,0,0,48,308,1,0,0,0,50,319,1,0,0,0,52,337,1,0,0,0,54,345,1,0,0,0,56,352,
		1,0,0,0,58,354,1,0,0,0,60,356,1,0,0,0,62,358,1,0,0,0,64,65,3,4,2,0,65,
		69,3,6,3,0,66,68,3,2,1,0,67,66,1,0,0,0,68,71,1,0,0,0,69,67,1,0,0,0,69,
		70,1,0,0,0,70,1,1,0,0,0,71,69,1,0,0,0,72,75,3,8,4,0,73,75,3,16,8,0,74,
		72,1,0,0,0,74,73,1,0,0,0,75,3,1,0,0,0,76,77,5,13,0,0,77,78,3,20,10,0,78,
		5,1,0,0,0,79,80,5,12,0,0,80,81,3,20,10,0,81,7,1,0,0,0,82,83,3,10,5,0,83,
		84,3,58,29,0,84,88,5,24,0,0,85,87,3,12,6,0,86,85,1,0,0,0,87,90,1,0,0,0,
		88,86,1,0,0,0,88,89,1,0,0,0,89,91,1,0,0,0,90,88,1,0,0,0,91,92,5,25,0,0,
		92,93,3,20,10,0,93,9,1,0,0,0,94,95,7,0,0,0,95,11,1,0,0,0,96,97,6,6,-1,
		0,97,98,3,14,7,0,98,104,1,0,0,0,99,100,10,1,0,0,100,101,5,32,0,0,101,103,
		3,14,7,0,102,99,1,0,0,0,103,106,1,0,0,0,104,102,1,0,0,0,104,105,1,0,0,
		0,105,13,1,0,0,0,106,104,1,0,0,0,107,108,3,10,5,0,108,109,3,58,29,0,109,
		15,1,0,0,0,110,111,3,10,5,0,111,112,3,18,9,0,112,17,1,0,0,0,113,119,3,
		58,29,0,114,115,3,58,29,0,115,116,5,37,0,0,116,117,3,56,28,0,117,119,1,
		0,0,0,118,113,1,0,0,0,118,114,1,0,0,0,119,19,1,0,0,0,120,124,5,26,0,0,
		121,123,3,22,11,0,122,121,1,0,0,0,123,126,1,0,0,0,124,122,1,0,0,0,124,
		125,1,0,0,0,125,127,1,0,0,0,126,124,1,0,0,0,127,128,5,27,0,0,128,21,1,
		0,0,0,129,145,3,24,12,0,130,145,3,26,13,0,131,145,3,28,14,0,132,133,3,
		16,8,0,133,134,5,30,0,0,134,145,1,0,0,0,135,136,3,32,16,0,136,137,5,30,
		0,0,137,145,1,0,0,0,138,139,3,30,15,0,139,140,5,30,0,0,140,145,1,0,0,0,
		141,142,3,56,28,0,142,143,5,30,0,0,143,145,1,0,0,0,144,129,1,0,0,0,144,
		130,1,0,0,0,144,131,1,0,0,0,144,132,1,0,0,0,144,135,1,0,0,0,144,138,1,
		0,0,0,144,141,1,0,0,0,145,23,1,0,0,0,146,147,5,16,0,0,147,148,5,24,0,0,
		148,149,3,56,28,0,149,150,5,25,0,0,150,151,3,20,10,0,151,152,5,17,0,0,
		152,153,3,20,10,0,153,161,1,0,0,0,154,155,5,16,0,0,155,156,5,24,0,0,156,
		157,3,56,28,0,157,158,5,25,0,0,158,159,3,20,10,0,159,161,1,0,0,0,160,146,
		1,0,0,0,160,154,1,0,0,0,161,25,1,0,0,0,162,163,5,18,0,0,163,164,5,24,0,
		0,164,165,3,56,28,0,165,166,5,25,0,0,166,167,3,20,10,0,167,179,1,0,0,0,
		168,169,5,19,0,0,169,170,5,24,0,0,170,171,3,56,28,0,171,172,5,30,0,0,172,
		173,3,56,28,0,173,174,5,30,0,0,174,175,3,56,28,0,175,176,5,25,0,0,176,
		177,3,20,10,0,177,179,1,0,0,0,178,162,1,0,0,0,178,168,1,0,0,0,179,27,1,
		0,0,0,180,181,5,20,0,0,181,189,5,30,0,0,182,183,5,21,0,0,183,189,5,30,
		0,0,184,185,5,22,0,0,185,186,3,56,28,0,186,187,5,30,0,0,187,189,1,0,0,
		0,188,180,1,0,0,0,188,182,1,0,0,0,188,184,1,0,0,0,189,29,1,0,0,0,190,191,
		3,58,29,0,191,192,3,60,30,0,192,193,3,56,28,0,193,199,1,0,0,0,194,195,
		3,58,29,0,195,196,3,60,30,0,196,197,3,32,16,0,197,199,1,0,0,0,198,190,
		1,0,0,0,198,194,1,0,0,0,199,31,1,0,0,0,200,201,3,58,29,0,201,205,5,24,
		0,0,202,204,3,12,6,0,203,202,1,0,0,0,204,207,1,0,0,0,205,203,1,0,0,0,205,
		206,1,0,0,0,206,208,1,0,0,0,207,205,1,0,0,0,208,209,5,25,0,0,209,33,1,
		0,0,0,210,215,5,64,0,0,211,215,5,1,0,0,212,215,5,63,0,0,213,215,3,58,29,
		0,214,210,1,0,0,0,214,211,1,0,0,0,214,212,1,0,0,0,214,213,1,0,0,0,215,
		35,1,0,0,0,216,228,3,34,17,0,217,218,3,34,17,0,218,219,5,60,0,0,219,228,
		1,0,0,0,220,221,3,34,17,0,221,222,5,61,0,0,222,228,1,0,0,0,223,224,5,60,
		0,0,224,228,3,34,17,0,225,226,5,61,0,0,226,228,3,34,17,0,227,216,1,0,0,
		0,227,217,1,0,0,0,227,220,1,0,0,0,227,223,1,0,0,0,227,225,1,0,0,0,228,
		37,1,0,0,0,229,230,6,19,-1,0,230,231,3,36,18,0,231,243,1,0,0,0,232,233,
		10,3,0,0,233,234,5,44,0,0,234,242,3,34,17,0,235,236,10,2,0,0,236,237,5,
		45,0,0,237,242,3,34,17,0,238,239,10,1,0,0,239,240,5,48,0,0,240,242,3,34,
		17,0,241,232,1,0,0,0,241,235,1,0,0,0,241,238,1,0,0,0,242,245,1,0,0,0,243,
		241,1,0,0,0,243,244,1,0,0,0,244,39,1,0,0,0,245,243,1,0,0,0,246,247,6,20,
		-1,0,247,248,3,38,19,0,248,257,1,0,0,0,249,250,10,2,0,0,250,251,5,46,0,
		0,251,256,3,38,19,0,252,253,10,1,0,0,253,254,5,47,0,0,254,256,3,38,19,
		0,255,249,1,0,0,0,255,252,1,0,0,0,256,259,1,0,0,0,257,255,1,0,0,0,257,
		258,1,0,0,0,258,41,1,0,0,0,259,257,1,0,0,0,260,261,6,21,-1,0,261,262,3,
		40,20,0,262,271,1,0,0,0,263,264,10,2,0,0,264,265,5,58,0,0,265,270,3,40,
		20,0,266,267,10,1,0,0,267,268,5,59,0,0,268,270,3,40,20,0,269,263,1,0,0,
		0,269,266,1,0,0,0,270,273,1,0,0,0,271,269,1,0,0,0,271,272,1,0,0,0,272,
		43,1,0,0,0,273,271,1,0,0,0,274,275,6,22,-1,0,275,276,3,42,21,0,276,291,
		1,0,0,0,277,278,10,4,0,0,278,279,5,54,0,0,279,290,3,42,21,0,280,281,10,
		3,0,0,281,282,5,53,0,0,282,290,3,42,21,0,283,284,10,2,0,0,284,285,5,56,
		0,0,285,290,3,42,21,0,286,287,10,1,0,0,287,288,5,55,0,0,288,290,3,42,21,
		0,289,277,1,0,0,0,289,280,1,0,0,0,289,283,1,0,0,0,289,286,1,0,0,0,290,
		293,1,0,0,0,291,289,1,0,0,0,291,292,1,0,0,0,292,45,1,0,0,0,293,291,1,0,
		0,0,294,295,6,23,-1,0,295,296,3,44,22,0,296,305,1,0,0,0,297,298,10,2,0,
		0,298,299,5,51,0,0,299,304,3,44,22,0,300,301,10,1,0,0,301,302,5,52,0,0,
		302,304,3,44,22,0,303,297,1,0,0,0,303,300,1,0,0,0,304,307,1,0,0,0,305,
		303,1,0,0,0,305,306,1,0,0,0,306,47,1,0,0,0,307,305,1,0,0,0,308,309,6,24,
		-1,0,309,310,3,46,23,0,310,316,1,0,0,0,311,312,10,1,0,0,312,313,5,49,0,
		0,313,315,3,46,23,0,314,311,1,0,0,0,315,318,1,0,0,0,316,314,1,0,0,0,316,
		317,1,0,0,0,317,49,1,0,0,0,318,316,1,0,0,0,319,320,6,25,-1,0,320,321,3,
		48,24,0,321,327,1,0,0,0,322,323,10,1,0,0,323,324,5,50,0,0,324,326,3,48,
		24,0,325,322,1,0,0,0,326,329,1,0,0,0,327,325,1,0,0,0,327,328,1,0,0,0,328,
		51,1,0,0,0,329,327,1,0,0,0,330,338,3,50,25,0,331,332,3,50,25,0,332,333,
		5,23,0,0,333,334,3,56,28,0,334,335,5,33,0,0,335,336,3,56,28,0,336,338,
		1,0,0,0,337,330,1,0,0,0,337,331,1,0,0,0,338,53,1,0,0,0,339,346,3,52,26,
		0,340,341,5,14,0,0,341,342,3,58,29,0,342,343,5,15,0,0,343,344,3,62,31,
		0,344,346,1,0,0,0,345,339,1,0,0,0,345,340,1,0,0,0,346,55,1,0,0,0,347,353,
		3,54,27,0,348,349,5,24,0,0,349,350,3,56,28,0,350,351,5,25,0,0,351,353,
		1,0,0,0,352,347,1,0,0,0,352,348,1,0,0,0,353,57,1,0,0,0,354,355,5,62,0,
		0,355,59,1,0,0,0,356,357,7,1,0,0,357,61,1,0,0,0,358,359,7,2,0,0,359,63,
		1,0,0,0,29,69,74,88,104,118,124,144,160,178,188,198,205,214,227,241,243,
		255,257,269,271,289,291,303,305,316,327,337,345,352
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
