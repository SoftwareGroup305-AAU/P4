//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from /home/rasmus/Documents/GitHub/P4/P4.TinyCell/Languages/TinyCell/TinyCell.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class TinyCellLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		Bool=1, Whitespace=2, VOLHIGH=3, VOLLOW=4, PIN=5, INT=6, FLOAT=7, STRING=8, 
		BOOL=9, VOID=10, CHAR=11, UPDATE=12, SETUP=13, SET=14, TO=15, IF=16, ELSE=17, 
		WHILE=18, FOR=19, CONTINUE=20, BREAK=21, RETURN=22, QUESTION=23, LPAR=24, 
		RPAR=25, LCURLY=26, RCURLY=27, LBRACKET=28, RBRACKET=29, SEMI=30, DOT=31, 
		COMMA=32, COLON=33, TRUE=34, FALSE=35, NEWLINE=36, ASSIGN=37, PLUSASSIGN=38, 
		MULTASSIGN=39, DIVASSIGN=40, MODASSIGN=41, MINUSASSIGN=42, QUOTE=43, MULT=44, 
		DIV=45, PLUS=46, MINUS=47, MOD=48, AND=49, OR=50, EQ=51, NEQ=52, GT=53, 
		LT=54, GTE=55, LTE=56, NOT=57, BITSHIFTL=58, BITSHIFTR=59, UNARYPLUS=60, 
		UNARYMINUS=61, Identifier=62, String=63, Numeral=64, Newline=65;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"Bool", "Whitespace", "VOLHIGH", "VOLLOW", "PIN", "INT", "FLOAT", "STRING", 
		"BOOL", "VOID", "CHAR", "UPDATE", "SETUP", "SET", "TO", "IF", "ELSE", 
		"WHILE", "FOR", "CONTINUE", "BREAK", "RETURN", "QUESTION", "LPAR", "RPAR", 
		"LCURLY", "RCURLY", "LBRACKET", "RBRACKET", "SEMI", "DOT", "COMMA", "COLON", 
		"TRUE", "FALSE", "NEWLINE", "ASSIGN", "PLUSASSIGN", "MULTASSIGN", "DIVASSIGN", 
		"MODASSIGN", "MINUSASSIGN", "QUOTE", "MULT", "DIV", "PLUS", "MINUS", "MOD", 
		"AND", "OR", "EQ", "NEQ", "GT", "LT", "GTE", "LTE", "NOT", "BITSHIFTL", 
		"BITSHIFTR", "UNARYPLUS", "UNARYMINUS", "Identifier", "String", "Numeral", 
		"Newline"
	};


	public TinyCellLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public TinyCellLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, null, null, "'high'", "'low'", "'pin'", "'int'", "'float'", "'string'", 
		"'bool'", "'void'", "'char'", "'update'", "'setup'", "'set'", "'to'", 
		"'if'", "'else'", "'while'", "'for'", "'continue'", "'break'", "'return'", 
		"'?'", "'('", "')'", "'{'", "'}'", "'['", "']'", "';'", "'.'", "','", 
		"':'", "'true'", "'false'", "'\\n'", "'='", "'+='", "'*='", "'/='", "'%='", 
		"'-='", "'\"'", "'*'", "'/'", "'+'", "'-'", "'%'", "'&&'", "'||'", "'=='", 
		"'!='", "'>'", "'<'", "'>='", "'<='", "'!'", "'<<'", "'>>'", "'++'", "'--'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "Bool", "Whitespace", "VOLHIGH", "VOLLOW", "PIN", "INT", "FLOAT", 
		"STRING", "BOOL", "VOID", "CHAR", "UPDATE", "SETUP", "SET", "TO", "IF", 
		"ELSE", "WHILE", "FOR", "CONTINUE", "BREAK", "RETURN", "QUESTION", "LPAR", 
		"RPAR", "LCURLY", "RCURLY", "LBRACKET", "RBRACKET", "SEMI", "DOT", "COMMA", 
		"COLON", "TRUE", "FALSE", "NEWLINE", "ASSIGN", "PLUSASSIGN", "MULTASSIGN", 
		"DIVASSIGN", "MODASSIGN", "MINUSASSIGN", "QUOTE", "MULT", "DIV", "PLUS", 
		"MINUS", "MOD", "AND", "OR", "EQ", "NEQ", "GT", "LT", "GTE", "LTE", "NOT", 
		"BITSHIFTL", "BITSHIFTR", "UNARYPLUS", "UNARYMINUS", "Identifier", "String", 
		"Numeral", "Newline"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "TinyCell.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static TinyCellLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,65,394,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
		6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
		7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
		7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
		7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
		7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,
		7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,
		7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,
		7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,
		7,63,2,64,7,64,1,0,1,0,3,0,134,8,0,1,1,4,1,137,8,1,11,1,12,1,138,1,1,1,
		1,1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,
		1,6,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,
		8,1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,11,
		1,11,1,11,1,12,1,12,1,12,1,12,1,12,1,12,1,13,1,13,1,13,1,13,1,14,1,14,
		1,14,1,15,1,15,1,15,1,16,1,16,1,16,1,16,1,16,1,17,1,17,1,17,1,17,1,17,
		1,17,1,18,1,18,1,18,1,18,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,
		1,20,1,20,1,20,1,20,1,20,1,20,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,22,
		1,22,1,23,1,23,1,24,1,24,1,25,1,25,1,26,1,26,1,27,1,27,1,28,1,28,1,29,
		1,29,1,30,1,30,1,31,1,31,1,32,1,32,1,33,1,33,1,33,1,33,1,33,1,34,1,34,
		1,34,1,34,1,34,1,34,1,35,1,35,1,36,1,36,1,37,1,37,1,37,1,38,1,38,1,38,
		1,39,1,39,1,39,1,40,1,40,1,40,1,41,1,41,1,41,1,42,1,42,1,43,1,43,1,44,
		1,44,1,45,1,45,1,46,1,46,1,47,1,47,1,48,1,48,1,48,1,49,1,49,1,49,1,50,
		1,50,1,50,1,51,1,51,1,51,1,52,1,52,1,53,1,53,1,54,1,54,1,54,1,55,1,55,
		1,55,1,56,1,56,1,57,1,57,1,57,1,58,1,58,1,58,1,59,1,59,1,59,1,60,1,60,
		1,60,1,61,1,61,5,61,350,8,61,10,61,12,61,353,9,61,1,62,1,62,5,62,357,8,
		62,10,62,12,62,360,9,62,1,62,1,62,1,63,3,63,365,8,63,1,63,3,63,368,8,63,
		1,63,5,63,371,8,63,10,63,12,63,374,9,63,1,63,1,63,4,63,378,8,63,11,63,
		12,63,379,3,63,382,8,63,1,64,1,64,3,64,386,8,64,1,64,1,64,1,64,3,64,391,
		8,64,1,64,1,64,0,0,65,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,
		11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,
		23,47,24,49,25,51,26,53,27,55,28,57,29,59,30,61,31,63,32,65,33,67,34,69,
		35,71,36,73,37,75,38,77,39,79,40,81,41,83,42,85,43,87,44,89,45,91,46,93,
		47,95,48,97,49,99,50,101,51,103,52,105,53,107,54,109,55,111,56,113,57,
		115,58,117,59,119,60,121,61,123,62,125,63,127,64,129,65,1,0,7,3,0,9,10,
		13,13,32,32,3,0,65,90,95,95,97,122,4,0,48,57,65,90,95,95,97,122,6,0,33,
		33,35,41,44,44,46,90,94,122,126,126,1,0,45,45,1,0,48,57,1,0,46,46,404,
		0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,
		0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,
		1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,
		0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,
		1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,
		0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,
		1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,
		0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,0,0,87,1,0,0,0,0,89,
		1,0,0,0,0,91,1,0,0,0,0,93,1,0,0,0,0,95,1,0,0,0,0,97,1,0,0,0,0,99,1,0,0,
		0,0,101,1,0,0,0,0,103,1,0,0,0,0,105,1,0,0,0,0,107,1,0,0,0,0,109,1,0,0,
		0,0,111,1,0,0,0,0,113,1,0,0,0,0,115,1,0,0,0,0,117,1,0,0,0,0,119,1,0,0,
		0,0,121,1,0,0,0,0,123,1,0,0,0,0,125,1,0,0,0,0,127,1,0,0,0,0,129,1,0,0,
		0,1,133,1,0,0,0,3,136,1,0,0,0,5,142,1,0,0,0,7,147,1,0,0,0,9,151,1,0,0,
		0,11,155,1,0,0,0,13,159,1,0,0,0,15,165,1,0,0,0,17,172,1,0,0,0,19,177,1,
		0,0,0,21,182,1,0,0,0,23,187,1,0,0,0,25,194,1,0,0,0,27,200,1,0,0,0,29,204,
		1,0,0,0,31,207,1,0,0,0,33,210,1,0,0,0,35,215,1,0,0,0,37,221,1,0,0,0,39,
		225,1,0,0,0,41,234,1,0,0,0,43,240,1,0,0,0,45,247,1,0,0,0,47,249,1,0,0,
		0,49,251,1,0,0,0,51,253,1,0,0,0,53,255,1,0,0,0,55,257,1,0,0,0,57,259,1,
		0,0,0,59,261,1,0,0,0,61,263,1,0,0,0,63,265,1,0,0,0,65,267,1,0,0,0,67,269,
		1,0,0,0,69,274,1,0,0,0,71,280,1,0,0,0,73,282,1,0,0,0,75,284,1,0,0,0,77,
		287,1,0,0,0,79,290,1,0,0,0,81,293,1,0,0,0,83,296,1,0,0,0,85,299,1,0,0,
		0,87,301,1,0,0,0,89,303,1,0,0,0,91,305,1,0,0,0,93,307,1,0,0,0,95,309,1,
		0,0,0,97,311,1,0,0,0,99,314,1,0,0,0,101,317,1,0,0,0,103,320,1,0,0,0,105,
		323,1,0,0,0,107,325,1,0,0,0,109,327,1,0,0,0,111,330,1,0,0,0,113,333,1,
		0,0,0,115,335,1,0,0,0,117,338,1,0,0,0,119,341,1,0,0,0,121,344,1,0,0,0,
		123,347,1,0,0,0,125,354,1,0,0,0,127,364,1,0,0,0,129,390,1,0,0,0,131,134,
		3,67,33,0,132,134,3,69,34,0,133,131,1,0,0,0,133,132,1,0,0,0,134,2,1,0,
		0,0,135,137,7,0,0,0,136,135,1,0,0,0,137,138,1,0,0,0,138,136,1,0,0,0,138,
		139,1,0,0,0,139,140,1,0,0,0,140,141,6,1,0,0,141,4,1,0,0,0,142,143,5,104,
		0,0,143,144,5,105,0,0,144,145,5,103,0,0,145,146,5,104,0,0,146,6,1,0,0,
		0,147,148,5,108,0,0,148,149,5,111,0,0,149,150,5,119,0,0,150,8,1,0,0,0,
		151,152,5,112,0,0,152,153,5,105,0,0,153,154,5,110,0,0,154,10,1,0,0,0,155,
		156,5,105,0,0,156,157,5,110,0,0,157,158,5,116,0,0,158,12,1,0,0,0,159,160,
		5,102,0,0,160,161,5,108,0,0,161,162,5,111,0,0,162,163,5,97,0,0,163,164,
		5,116,0,0,164,14,1,0,0,0,165,166,5,115,0,0,166,167,5,116,0,0,167,168,5,
		114,0,0,168,169,5,105,0,0,169,170,5,110,0,0,170,171,5,103,0,0,171,16,1,
		0,0,0,172,173,5,98,0,0,173,174,5,111,0,0,174,175,5,111,0,0,175,176,5,108,
		0,0,176,18,1,0,0,0,177,178,5,118,0,0,178,179,5,111,0,0,179,180,5,105,0,
		0,180,181,5,100,0,0,181,20,1,0,0,0,182,183,5,99,0,0,183,184,5,104,0,0,
		184,185,5,97,0,0,185,186,5,114,0,0,186,22,1,0,0,0,187,188,5,117,0,0,188,
		189,5,112,0,0,189,190,5,100,0,0,190,191,5,97,0,0,191,192,5,116,0,0,192,
		193,5,101,0,0,193,24,1,0,0,0,194,195,5,115,0,0,195,196,5,101,0,0,196,197,
		5,116,0,0,197,198,5,117,0,0,198,199,5,112,0,0,199,26,1,0,0,0,200,201,5,
		115,0,0,201,202,5,101,0,0,202,203,5,116,0,0,203,28,1,0,0,0,204,205,5,116,
		0,0,205,206,5,111,0,0,206,30,1,0,0,0,207,208,5,105,0,0,208,209,5,102,0,
		0,209,32,1,0,0,0,210,211,5,101,0,0,211,212,5,108,0,0,212,213,5,115,0,0,
		213,214,5,101,0,0,214,34,1,0,0,0,215,216,5,119,0,0,216,217,5,104,0,0,217,
		218,5,105,0,0,218,219,5,108,0,0,219,220,5,101,0,0,220,36,1,0,0,0,221,222,
		5,102,0,0,222,223,5,111,0,0,223,224,5,114,0,0,224,38,1,0,0,0,225,226,5,
		99,0,0,226,227,5,111,0,0,227,228,5,110,0,0,228,229,5,116,0,0,229,230,5,
		105,0,0,230,231,5,110,0,0,231,232,5,117,0,0,232,233,5,101,0,0,233,40,1,
		0,0,0,234,235,5,98,0,0,235,236,5,114,0,0,236,237,5,101,0,0,237,238,5,97,
		0,0,238,239,5,107,0,0,239,42,1,0,0,0,240,241,5,114,0,0,241,242,5,101,0,
		0,242,243,5,116,0,0,243,244,5,117,0,0,244,245,5,114,0,0,245,246,5,110,
		0,0,246,44,1,0,0,0,247,248,5,63,0,0,248,46,1,0,0,0,249,250,5,40,0,0,250,
		48,1,0,0,0,251,252,5,41,0,0,252,50,1,0,0,0,253,254,5,123,0,0,254,52,1,
		0,0,0,255,256,5,125,0,0,256,54,1,0,0,0,257,258,5,91,0,0,258,56,1,0,0,0,
		259,260,5,93,0,0,260,58,1,0,0,0,261,262,5,59,0,0,262,60,1,0,0,0,263,264,
		5,46,0,0,264,62,1,0,0,0,265,266,5,44,0,0,266,64,1,0,0,0,267,268,5,58,0,
		0,268,66,1,0,0,0,269,270,5,116,0,0,270,271,5,114,0,0,271,272,5,117,0,0,
		272,273,5,101,0,0,273,68,1,0,0,0,274,275,5,102,0,0,275,276,5,97,0,0,276,
		277,5,108,0,0,277,278,5,115,0,0,278,279,5,101,0,0,279,70,1,0,0,0,280,281,
		5,10,0,0,281,72,1,0,0,0,282,283,5,61,0,0,283,74,1,0,0,0,284,285,5,43,0,
		0,285,286,5,61,0,0,286,76,1,0,0,0,287,288,5,42,0,0,288,289,5,61,0,0,289,
		78,1,0,0,0,290,291,5,47,0,0,291,292,5,61,0,0,292,80,1,0,0,0,293,294,5,
		37,0,0,294,295,5,61,0,0,295,82,1,0,0,0,296,297,5,45,0,0,297,298,5,61,0,
		0,298,84,1,0,0,0,299,300,5,34,0,0,300,86,1,0,0,0,301,302,5,42,0,0,302,
		88,1,0,0,0,303,304,5,47,0,0,304,90,1,0,0,0,305,306,5,43,0,0,306,92,1,0,
		0,0,307,308,5,45,0,0,308,94,1,0,0,0,309,310,5,37,0,0,310,96,1,0,0,0,311,
		312,5,38,0,0,312,313,5,38,0,0,313,98,1,0,0,0,314,315,5,124,0,0,315,316,
		5,124,0,0,316,100,1,0,0,0,317,318,5,61,0,0,318,319,5,61,0,0,319,102,1,
		0,0,0,320,321,5,33,0,0,321,322,5,61,0,0,322,104,1,0,0,0,323,324,5,62,0,
		0,324,106,1,0,0,0,325,326,5,60,0,0,326,108,1,0,0,0,327,328,5,62,0,0,328,
		329,5,61,0,0,329,110,1,0,0,0,330,331,5,60,0,0,331,332,5,61,0,0,332,112,
		1,0,0,0,333,334,5,33,0,0,334,114,1,0,0,0,335,336,5,60,0,0,336,337,5,60,
		0,0,337,116,1,0,0,0,338,339,5,62,0,0,339,340,5,62,0,0,340,118,1,0,0,0,
		341,342,5,43,0,0,342,343,5,43,0,0,343,120,1,0,0,0,344,345,5,45,0,0,345,
		346,5,45,0,0,346,122,1,0,0,0,347,351,7,1,0,0,348,350,7,2,0,0,349,348,1,
		0,0,0,350,353,1,0,0,0,351,349,1,0,0,0,351,352,1,0,0,0,352,124,1,0,0,0,
		353,351,1,0,0,0,354,358,3,85,42,0,355,357,7,3,0,0,356,355,1,0,0,0,357,
		360,1,0,0,0,358,356,1,0,0,0,358,359,1,0,0,0,359,361,1,0,0,0,360,358,1,
		0,0,0,361,362,3,85,42,0,362,126,1,0,0,0,363,365,7,4,0,0,364,363,1,0,0,
		0,364,365,1,0,0,0,365,367,1,0,0,0,366,368,2,48,57,0,367,366,1,0,0,0,368,
		372,1,0,0,0,369,371,7,5,0,0,370,369,1,0,0,0,371,374,1,0,0,0,372,370,1,
		0,0,0,372,373,1,0,0,0,373,381,1,0,0,0,374,372,1,0,0,0,375,377,7,6,0,0,
		376,378,7,5,0,0,377,376,1,0,0,0,378,379,1,0,0,0,379,377,1,0,0,0,379,380,
		1,0,0,0,380,382,1,0,0,0,381,375,1,0,0,0,381,382,1,0,0,0,382,128,1,0,0,
		0,383,385,5,13,0,0,384,386,5,10,0,0,385,384,1,0,0,0,385,386,1,0,0,0,386,
		391,1,0,0,0,387,391,5,10,0,0,388,389,5,92,0,0,389,391,5,110,0,0,390,383,
		1,0,0,0,390,387,1,0,0,0,390,388,1,0,0,0,391,392,1,0,0,0,392,393,6,64,0,
		0,393,130,1,0,0,0,12,0,133,138,351,358,364,367,372,379,381,385,390,1,0,
		1,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
